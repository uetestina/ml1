package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=ObjectTypeInfo, data={name=str, *abstract=bool, *parent=str}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=ObjectTypeInfo, data={name=str, *abstract=bool, *parent=str}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class ObjectTypeInfo extends QApiType {

	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("name")
	@Nonnull
	public java.lang.String name;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("abstract")
	@CheckForNull
	public java.lang.Boolean _abstract;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("parent")
	@CheckForNull
	public java.lang.String parent;

	@Nonnull
	public ObjectTypeInfo withName(java.lang.String value) {
		this.name = value;
		return this;
	}

	@Nonnull
	public ObjectTypeInfo with_abstract(java.lang.Boolean value) {
		this._abstract = value;
		return this;
	}

	@Nonnull
	public ObjectTypeInfo withParent(java.lang.String value) {
		this.parent = value;
		return this;
	}

	public ObjectTypeInfo() {
	}

	public ObjectTypeInfo(java.lang.String name, java.lang.Boolean _abstract, java.lang.String parent) {
		this.name = name;
		this._abstract = _abstract;
		this.parent = parent;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("name");
		names.add("abstract");
		names.add("parent");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("name".equals(name))
			return name;
		if ("abstract".equals(name))
			return _abstract;
		if ("parent".equals(name))
			return parent;
		return super.getFieldByName(name);
	}
}

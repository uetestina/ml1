package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=SchemaInfoObjectMember, data={name=str, type=str, *default=any}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=SchemaInfoObjectMember, data={name=str, type=str, *default=any}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class SchemaInfoObjectMember extends QApiType {

	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("name")
	@Nonnull
	public java.lang.String name;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("type")
	@Nonnull
	public java.lang.String type;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("default")
	@CheckForNull
	public java.lang.Object _default;

	@Nonnull
	public SchemaInfoObjectMember withName(java.lang.String value) {
		this.name = value;
		return this;
	}

	@Nonnull
	public SchemaInfoObjectMember withType(java.lang.String value) {
		this.type = value;
		return this;
	}

	@Nonnull
	public SchemaInfoObjectMember with_default(java.lang.Object value) {
		this._default = value;
		return this;
	}

	public SchemaInfoObjectMember() {
	}

	public SchemaInfoObjectMember(java.lang.String name, java.lang.String type, java.lang.Object _default) {
		this.name = name;
		this.type = type;
		this._default = _default;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("name");
		names.add("type");
		names.add("default");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("name".equals(name))
			return name;
		if ("type".equals(name))
			return type;
		if ("default".equals(name))
			return _default;
		return super.getFieldByName(name);
	}
}

//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.forms.locationmultipleselectdialog;

import ims.admin.forms.locationmultipleselectdialog.GenForm.grdSearchLocationRow;
import ims.admin.forms.locationmultipleselectdialog.GenForm.grdSelectedLocationsRow;
import ims.admin.forms.servicemultipleselectdialog.GenForm.grdSearchServiceRow;
import ims.admin.forms.servicemultipleselectdialog.GenForm.grdSelectedServicesRow;
import ims.admin.vo.ConfigLocationLiteVo;
import ims.admin.vo.ConfigLocationLiteVoCollection;
import ims.admin.vo.ServiceVoLiteVo;
import ims.admin.vo.ServiceVoLiteVoCollection;
import ims.RefMan.vo.ContractServiceLocationsConfigVoCollection;
import ims.RefMan.vo.LocationConfigVo;
import ims.RefMan.vo.LocationConfigVoCollection;
import ims.RefMan.vo.OrganisationConfigVo;
import ims.core.vo.OrganisationLiteVo;
import ims.core.vo.OrganisationLiteVoCollection;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setService(null);
		if(args != null )
		{
			if(args[0] != null && args[0] instanceof OrganisationLiteVo)
			{
				OrganisationLiteVo tempVo = (OrganisationLiteVo) args[0];
				form.qmbOrganisation().newRow(tempVo, tempVo.getName());
				form.qmbOrganisation().setValue(tempVo);
			}
			
		}
		
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ConfigLocationLiteVoCollection tempColl = new ConfigLocationLiteVoCollection();
		for(int i = 0;i < form.grdSelectedLocations().getRows().size();i++)
		{
			if(form.grdSelectedLocations().getRows().get(i).getColumnSelected())
				tempColl.add(form.grdSelectedLocations().getRows().get(i).getValue());
		}
		if(tempColl.size() < 1)
		{
			engine.showMessage("Select at least one Location");
			return;
		}
		
		form.getGlobalContext().RefMan.setLocationContract(tempColl);
		engine.close(DialogResult.OK);	}
	
	protected void onBtnAddToListClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ConfigLocationLiteVoCollection  voColl = new ConfigLocationLiteVoCollection();
		boolean deleted = true;
		while(deleted)
		{
			
			deleted = false;
			for (int i = 0; i < form.grdSearchLocation().getRows().size(); i++)
			{
				if(form.grdSearchLocation().getRows().get(i) == null)
					continue;
				
				if (form.grdSearchLocation().getRows().get(i).getColumnSelect())
				{
					if(checkIfLocationIsInLocationSelectedGrid(form.grdSearchLocation().getRows().get(i).getValue()))
					{
						engine.showMessage("The Location "+ form.grdSearchLocation().getRows().get(i).getValue().getName()+ " is already in Selected Locations Grid");
						return;
					}
					voColl.add(form.grdSearchLocation().getRows().get(i).getValue());
					form.grdSearchLocation().getRows().remove(i);
					deleted = true;
					break;
					
					
				}
			}
		}
		if(voColl == null || voColl.size() == 0)
		{
			engine.showMessage("Select at least one location");
			return;
		}
		populateSelectedLocationGrid(voColl);

	}
	private void populateSelectedLocationGrid(ConfigLocationLiteVoCollection locationColl)
	{
		
		if(locationColl == null || locationColl.size() < 1)
			return;
		for(int i = 0; i < locationColl.size();i++)
		{
			ConfigLocationLiteVo record = locationColl.get(i);
			if (record == null)
				continue;
			grdSelectedLocationsRow newRow = form.grdSelectedLocations().getRows().newRow();
			newRow.setColumnLocationName(record.getName());
			newRow.setColumnSelected(Boolean.TRUE);
			newRow.setValue(record);
		}
	}
	private boolean checkIfLocationIsInLocationSelectedGrid(ConfigLocationLiteVo  location)
	{
		if(location == null)
			return false;
		
		for(int i = 0;i < form.grdSelectedLocations().getRows().size();i++)
		{
			ConfigLocationLiteVo tempVo = form.grdSelectedLocations().getRows().get(i).getValue();
			if(location.getID_LocationIsNotNull() && location.getID_Location().equals(tempVo.getID_Location()))
				return true;
		}
		return false;
		
	}
	
	protected void onBtnDeselectAllClick() throws ims.framework.exceptions.PresentationLogicException
	{
		 selectSearchLocations(false);
	}
	
	protected void onBtnSelectAllClick() throws ims.framework.exceptions.PresentationLogicException
	{
		 selectSearchLocations(true);
	}
	private void selectSearchLocations(boolean select)
	{
		for (int i = 0; i < form.grdSearchLocation().getRows().size(); i++)
		{
			form.grdSearchLocation().getRows().get(i).setColumnSelect(select);
		}
	}
	
	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdSearchLocation().getRows().clear();
		if(form.qmbOrganisation().getValue() == null)
		{
			engine.showMessage("Please select an organisation");
			return;
		}
		OrganisationConfigVo orgVo = domain.getOrganisation(form.qmbOrganisation().getValue());
		ConfigLocationLiteVoCollection locVoColl = new ConfigLocationLiteVoCollection();
		if(orgVo == null)
		{
			engine.showMessage("No Location record found.");
			return;
		}
		else
		{
			
			String name = null;
			if( form.txtLocationName().getValue() != null )
				name = form.txtLocationName().getValue().trim();
			if(name != null)
				name = name.toUpperCase();
			
			
			getLocationsFromOrganisatio(orgVo,locVoColl,name);
			if(locVoColl != null && locVoColl.size() > 0)
				populateSearchLocationGrid(locVoColl);
			else
			{
				engine.showMessage("No Location record found.");
				return;
			}
				
		}
	}
	private void populateSearchLocationGrid(ConfigLocationLiteVoCollection locColl)
	{
		form.grdSearchLocation().getRows().clear();
		if(locColl == null || locColl.size() < 1)
			return;
		for(int i = 0; i < locColl.size();i++)
		{
			ConfigLocationLiteVo record = locColl.get(i);
			if (record == null)
				continue;
			grdSearchLocationRow newRow = form.grdSearchLocation().getRows().newRow();
			newRow.setColumnLocationName(record.getName());
			newRow.setColumnSelect(Boolean.FALSE);
			newRow.setValue(record);
		}
	}
	private  void getLocationsFromOrganisatio(OrganisationConfigVo orgVo,ConfigLocationLiteVoCollection tempVoColl,String name)
	{
		if(orgVo == null)
			return ;  
		
		
		if(orgVo.getLocationSites() != null && orgVo.getLocationSites().size() > 0)
		{	
			if(name == null || checkCharacter(name))
			{
				for(int i = 0;i < orgVo.getLocationSites().size();i++)
				{
					if(orgVo.getLocationSites().get(i) != null && Boolean.TRUE.equals(orgVo.getLocationSites().get(i).getIsActive()))
						tempVoColl.add(orgVo.getLocationSites().get(i));
					addLocation(orgVo.getLocationSites().get(i),tempVoColl);
					
				}
			}
			else if(checkBegin(name))   //check if location name begin with % and not end with %
			{
				String nameloc = name.substring(1);  //take off % from the begining
				String nameloc1 = nameloc.trim();
				for(int i = 0;i < orgVo.getLocationSites().size();i++)
				{
					if(orgVo.getLocationSites().get(i) != null && orgVo.getLocationSites().get(i).getNameIsNotNull() && orgVo.getLocationSites().get(i).getName().toUpperCase().startsWith(nameloc1))
					{
						if(Boolean.TRUE.equals(orgVo.getLocationSites().get(i).getIsActive()))
							tempVoColl.add(orgVo.getLocationSites().get(i));
					}
					addLocationBegin(orgVo.getLocationSites().get(i),tempVoColl,nameloc1);
					
				}
			}
			else if(checkEnd(name)) //check if location name end with %
			{
				int nrcar = name.length();
				String nameloc = name.substring(0,nrcar-1);  //take off % from the end
				String nameloc1 = nameloc.trim();
				for(int i = 0;i < orgVo.getLocationSites().size();i++)
				{
					if(orgVo.getLocationSites().get(i) != null && orgVo.getLocationSites().get(i).getNameIsNotNull() && orgVo.getLocationSites().get(i).getName().toUpperCase().endsWith(nameloc1))
					{
						if(Boolean.TRUE.equals(orgVo.getLocationSites().get(i).getIsActive()))
							tempVoColl.add(orgVo.getLocationSites().get(i));
					}
					addLocationEnd(orgVo.getLocationSites().get(i),tempVoColl,nameloc1);
					
				}
			}
			else if(checkBeginEnd(name))//check if location name begin with % and end with %
			{
				int nrcar = name.length();
				String nameloc = name.substring(1,nrcar-1);  //take off % from the end and from begining
				String nameloc1 = nameloc.trim();
				for(int i = 0;i < orgVo.getLocationSites().size();i++)
				{
					if(orgVo.getLocationSites().get(i) != null && orgVo.getLocationSites().get(i).getNameIsNotNull() && orgVo.getLocationSites().get(i).getName().toUpperCase().contains(nameloc1))
					{
						if(Boolean.TRUE.equals(orgVo.getLocationSites().get(i).getIsActive()))
						   tempVoColl.add(orgVo.getLocationSites().get(i));
					}
					addLocationContain(orgVo.getLocationSites().get(i),tempVoColl,nameloc1);
					
				}
			}
			else
			{
				
				for(int i = 0;i < orgVo.getLocationSites().size();i++)
				{
					if(orgVo.getLocationSites().get(i) != null && orgVo.getLocationSites().get(i).getNameIsNotNull() && orgVo.getLocationSites().get(i).getName().toUpperCase().contains(name))
					{
						if(Boolean.TRUE.equals(orgVo.getLocationSites().get(i).getIsActive()))
							tempVoColl.add(orgVo.getLocationSites().get(i));
					}
					addLocationContain(orgVo.getLocationSites().get(i),tempVoColl,name);
					
				}
			}
		} //end of if(orgVo.getLocationSites() != null && orgVo.getLocationSites().size() > 0)
		
		if(orgVo.getRelatedOrganisationsIsNotNull() && orgVo.getRelatedOrganisations().size() > 0)
		{
			for(int m = 0;m < orgVo.getRelatedOrganisations().size();m++)
			{
				OrganisationConfigVo orgTempVo = orgVo.getRelatedOrganisations().get(m);
				if(orgTempVo == null)
					continue;
				getLocationsFromOrganisatio(orgTempVo,tempVoColl,name);
			}
		}
		return; 
		


	}
	private boolean checkBegin(String text)
	{
		if(text == null || text.length() == 0)
			return false;
		int nrcar = text.length();
		if(text.charAt(0) == '%' && text.charAt(nrcar-1) != '%')
			return true;
		else
			return false;
		
	}
	private boolean checkEnd(String text)
	{
		if(text == null || text.length() == 0)
			return false;
		int nrcar = text.length();
		if(text.charAt(0) != '%' && text.charAt(nrcar-1) == '%')
			return true;
		else
			return false;
		
	}
	private boolean checkBeginEnd(String text)
	{
		if(text == null || text.length() == 0)
			return false;
		int nrcar = text.length();
		if(text.charAt(0) == '%' && text.charAt(nrcar-1) == '%')
			return true;
		else
			return false;
		
	}
	private void addLocationBegin(LocationConfigVo loc , ConfigLocationLiteVoCollection tempVoColl,String name)
	{
		 
		if(loc.getLocations() == null || loc.getLocations().size() == 0)
			return;
		for(int j = 0; j < loc.getLocations().size(); j++)
		{
			LocationConfigVo temVo = loc.getLocations().get(j);
			if(temVo != null && temVo.getNameIsNotNull() && temVo.getName().toUpperCase().startsWith(name))
			{
				if(Boolean.TRUE.equals(loc.getLocations().get(j).getIsActive()))
					tempVoColl.add(loc.getLocations().get(j));
			}
			
			addLocationBegin(temVo,tempVoColl,name);
		}
	}
	private void addLocationEnd(LocationConfigVo loc , ConfigLocationLiteVoCollection tempVoColl,String name)
	{
		 
		if(loc.getLocations() == null || loc.getLocations().size() == 0)
			return;
		for(int j = 0; j < loc.getLocations().size(); j++)
		{
			LocationConfigVo temVo = loc.getLocations().get(j);
			if(temVo != null && temVo.getNameIsNotNull() && temVo.getName().toUpperCase().endsWith(name))
			{
				if(Boolean.TRUE.equals(loc.getLocations().get(j).getIsActive()))
					tempVoColl.add(loc.getLocations().get(j));
			}
			
			addLocationEnd(temVo,tempVoColl,name);
		}
	}
	private void addLocationContain(LocationConfigVo loc , ConfigLocationLiteVoCollection tempVoColl,String name)
	{
		 
		if(loc.getLocations() == null || loc.getLocations().size() == 0)
			return;
		for(int j = 0; j < loc.getLocations().size(); j++)
		{
			LocationConfigVo temVo = loc.getLocations().get(j);
			if(temVo != null && temVo.getNameIsNotNull() && temVo.getName().toUpperCase().contains(name))
			{
				if(Boolean.TRUE.equals(loc.getLocations().get(j).getIsActive()))
					tempVoColl.add(loc.getLocations().get(j));
			}
			
			addLocationContain(temVo,tempVoColl,name);
		}
	}
	
	private void addLocation(LocationConfigVo loc,ConfigLocationLiteVoCollection tempVoColl)
	{
		if(loc.getLocations() == null || loc.getLocations().size() == 0)
			return;
		for(int j = 0; j < loc.getLocations().size(); j++)
		{
			if(loc.getLocations().get(j) != null &&  Boolean.TRUE.equals(loc.getLocations().get(j).getIsActive()))
				tempVoColl.add(loc.getLocations().get(j));
			addLocation(loc.getLocations().get(j),tempVoColl);
		}
	}
	private boolean checkCharacter(String name)
	{
		boolean flag = true;
		if(name == null || name.length() == 0)
			return true;
		for(int i = 0;i< name.length();i++)
		{
			if(name.charAt(i) != '%' && name.charAt(i) != ' ' )
				flag = false;
		}
		return flag;
	}
	protected void onQmbOrganisationTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbOrganisation().clear();
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on");
			return;
		}
		OrganisationLiteVoCollection orgVoColl = domain.listActiveOrganisations(value);
		populateqmbOrganisation(orgVoColl);
	}
	private void populateqmbOrganisation(OrganisationLiteVoCollection orgVoColl)
	{
		form.qmbOrganisation().clear();
		if(orgVoColl == null || orgVoColl.size() == 0)
			return;
		for(int i = 0; i < orgVoColl.size();i++)
		{
			if(orgVoColl.get(i) == null)
				continue;
			form.qmbOrganisation().newRow(orgVoColl.get(i), orgVoColl.get(i).getName());
		}
		if (orgVoColl.size() == 1)
			form.qmbOrganisation().setValue(orgVoColl.get(0));
		else
			form.qmbOrganisation().showOpened();
	}
}

//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.configuration.AppForm business object (ID: 1021100001).
 */
public class AppFormLiteVo extends ims.core.configuration.vo.AppFormRefVo implements ims.vo.ImsCloneable, Comparable, ims.vo.interfaces.IActionICPLinkedItem
{
	private static final long serialVersionUID = 1L;

	public AppFormLiteVo()
	{
	}
	public AppFormLiteVo(Integer id, int version)
	{
		super(id, version);
	}
	public AppFormLiteVo(ims.core.vo.beans.AppFormLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.aliasname = bean.getAliasName();
		this.caption = bean.getCaption();
		this.isdialog = bean.getIsDialog();
		this.isalias = bean.getIsAlias();
		this.iscomponent = bean.getIsComponent();
		this.description = bean.getDescription();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.AppFormLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.aliasname = bean.getAliasName();
		this.caption = bean.getCaption();
		this.isdialog = bean.getIsDialog();
		this.isalias = bean.getIsAlias();
		this.iscomponent = bean.getIsComponent();
		this.description = bean.getDescription();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.AppFormLiteVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.AppFormLiteVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.AppFormLiteVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("ALIASNAME"))
			return getAliasName();
		if(fieldName.equals("CAPTION"))
			return getCaption();
		if(fieldName.equals("ISDIALOG"))
			return getIsDialog();
		if(fieldName.equals("ISALIAS"))
			return getIsAlias();
		if(fieldName.equals("ISCOMPONENT"))
			return getIsComponent();
		if(fieldName.equals("DESCRIPTION"))
			return getDescription();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 100;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getAliasNameIsNotNull()
	{
		return this.aliasname != null;
	}
	public String getAliasName()
	{
		return this.aliasname;
	}
	public static int getAliasNameMaxLength()
	{
		return 100;
	}
	public void setAliasName(String value)
	{
		this.isValidated = false;
		this.aliasname = value;
	}
	public boolean getCaptionIsNotNull()
	{
		return this.caption != null;
	}
	public String getCaption()
	{
		return this.caption;
	}
	public static int getCaptionMaxLength()
	{
		return 100;
	}
	public void setCaption(String value)
	{
		this.isValidated = false;
		this.caption = value;
	}
	public boolean getIsDialogIsNotNull()
	{
		return this.isdialog != null;
	}
	public Boolean getIsDialog()
	{
		return this.isdialog;
	}
	public void setIsDialog(Boolean value)
	{
		this.isValidated = false;
		this.isdialog = value;
	}
	public boolean getIsAliasIsNotNull()
	{
		return this.isalias != null;
	}
	public Boolean getIsAlias()
	{
		return this.isalias;
	}
	public void setIsAlias(Boolean value)
	{
		this.isValidated = false;
		this.isalias = value;
	}
	public boolean getIsComponentIsNotNull()
	{
		return this.iscomponent != null;
	}
	public Boolean getIsComponent()
	{
		return this.iscomponent;
	}
	public void setIsComponent(Boolean value)
	{
		this.isValidated = false;
		this.iscomponent = value;
	}
	public boolean getDescriptionIsNotNull()
	{
		return this.description != null;
	}
	public String getDescription()
	{
		return this.description;
	}
	public static int getDescriptionMaxLength()
	{
		return 255;
	}
	public void setDescription(String value)
	{
		this.isValidated = false;
		this.description = value;
	}
	/**
	* Method used to retrieve display text
	*/
	public String getDisplayText()
	{
		return name;
	}
	
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name == null || this.name.length() == 0)
			listOfErrors.add("Name is mandatory");
		else if(this.name.length() > 100)
			listOfErrors.add("The length of the field [name] in the value object [ims.core.vo.AppFormLiteVo] is too big. It should be less or equal to 100");
		if(this.aliasname != null)
			if(this.aliasname.length() > 100)
				listOfErrors.add("The length of the field [aliasname] in the value object [ims.core.vo.AppFormLiteVo] is too big. It should be less or equal to 100");
		if(this.caption == null || this.caption.length() == 0)
			listOfErrors.add("Caption is mandatory");
		else if(this.caption.length() > 100)
			listOfErrors.add("The length of the field [caption] in the value object [ims.core.vo.AppFormLiteVo] is too big. It should be less or equal to 100");
		if(this.isdialog == null)
			listOfErrors.add("IsDialog is mandatory");
		if(this.isalias == null)
			listOfErrors.add("IsAlias is mandatory");
		if(this.iscomponent == null)
			listOfErrors.add("IsComponent is mandatory");
		if(this.description == null || this.description.length() == 0)
			listOfErrors.add("Description is mandatory");
		else if(this.description.length() > 255)
			listOfErrors.add("The length of the field [description] in the value object [ims.core.vo.AppFormLiteVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AppFormLiteVo clone = new AppFormLiteVo(this.id, this.version);
		
		clone.name = this.name;
		clone.aliasname = this.aliasname;
		clone.caption = this.caption;
		clone.isdialog = this.isdialog;
		clone.isalias = this.isalias;
		clone.iscomponent = this.iscomponent;
		clone.description = this.description;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AppFormLiteVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AppFormLiteVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AppFormLiteVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AppFormLiteVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.name != null)
			count++;
		if(this.aliasname != null)
			count++;
		if(this.caption != null)
			count++;
		if(this.isdialog != null)
			count++;
		if(this.isalias != null)
			count++;
		if(this.iscomponent != null)
			count++;
		if(this.description != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected String name;
	protected String aliasname;
	protected String caption;
	protected Boolean isdialog;
	protected Boolean isalias;
	protected Boolean iscomponent;
	protected String description;
	private boolean isValidated = false;
	private boolean isBusy = false;
}

//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4772.16308)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.clinical.domain.impl;

import ims.clinical.domain.ClinicalNoteDrawing;
import ims.clinical.domain.DiagnosisComplications;
import ims.clinical.domain.PatientProblems;
import ims.clinical.domain.Procedures;
import ims.clinical.domain.base.impl.BasePatient_SummaryImpl;
import ims.clinical.vo.CSPatientSummaryDiagnosisVo;
import ims.clinical.vo.CSPatientSummaryDiagnosisVoCollection;
import ims.clinical.vo.CSPatientSummaryProcedureVo;
import ims.clinical.vo.CSPatientSummaryProcedureVoCollection;
import ims.clinical.vo.CSPrimaryDiagnosisAndPoceduresVo;
import ims.clinical.vo.ClinicalDIAssociationVoCollection;
import ims.clinical.vo.PIDBarOncologyManualVo;
import ims.clinical.vo.PIDBarOncologyManualVoCollection;
import ims.clinical.vo.domain.ClinicalDIAssociationVoAssembler;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.CareSpell;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.pas.domain.objects.PASEvent;
import ims.core.admin.pas.vo.PASEventRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.CareContextRefVoCollection;
import ims.core.admin.vo.CareSpellRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVoCollection;
import ims.core.clinical.domain.objects.ClinicalNotes;
import ims.core.clinical.domain.objects.Service;
import ims.core.clinical.vo.ClinicalNotesRefVo;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.clinical.vo.PatientProblemRefVo;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.domain.CareSpellDialog;
import ims.core.domain.impl.CareSpellDialogImpl;
import ims.core.helper.PIDBarOncologyManualClass;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CareContextSmallVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareContextVoCollection;
import ims.core.vo.CareContextWithoutClicalContactsVo;
import ims.core.vo.CareSpellVo;
import ims.core.vo.CareSpellVoCollection;
import ims.core.vo.CareSpellWithoutEpisodesVo;
import ims.core.vo.ClinicalContactFilterVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.ClinicalContactShortVoCollection;
import ims.core.vo.ClinicalNotesVo;
import ims.core.vo.ClinicalNotesVoCollection;
import ims.core.vo.EpisodeOfCareSmallVo;
import ims.core.vo.EpisodeOfCareWithoutContextsVo;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.EpisodeofCareVoCollection;
import ims.core.vo.PatientDiagnosisShortVoCollection;
import ims.core.vo.PatientProblemVoCollection;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.CareContextSmallVoAssembler;
import ims.core.vo.domain.CareContextVoAssembler;
import ims.core.vo.domain.CareContextWithoutClicalContactsVoAssembler;
import ims.core.vo.domain.CareSpellVoAssembler;
import ims.core.vo.domain.CareSpellWithoutEpisodesVoAssembler;
import ims.core.vo.domain.ClinicalContactShortVoAssembler;
import ims.core.vo.domain.ClinicalNotesShortVoAssembler;
import ims.core.vo.domain.ClinicalNotesVoAssembler;
import ims.core.vo.domain.EpisodeOfCareSmallVoAssembler;
import ims.core.vo.domain.EpisodeOfCareWithoutContextsVoAssembler;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.EpisodeofCareVoAssembler;
import ims.core.vo.domain.PasEventLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.CareContextStatus;
import ims.core.vo.lookups.ClinicalContactStatus;
import ims.core.vo.lookups.ContactType;
import ims.core.vo.lookups.EpisodeOfCareStatus;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.core.vo.lookups.ProblemGroupStatus;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.TaxonomyTypeCollection;
import ims.core.vo.lookups.WorklistContactType;
import ims.core.vo.lookups.WorklistContactTypeCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.factory.ContextEvalFactory;
import ims.domain.lookups.LookupMapping;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.vo.LookupInstVo;
import ims.vo.LookupMappingVo;
import ims.vo.LookupMappingVoCollection;
import ims.vo.ValueObject;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

public class Patient_SummaryImpl extends BasePatient_SummaryImpl
{

	private static final long serialVersionUID = 1L;

	public CareSpellVoCollection listCareSpellsByPatient(PatientRefVo patientRefVo)
	{
		if (patientRefVo == null || patientRefVo.getID_Patient() == null)
			throw new CodingRuntimeException("Patient not provided");

		DomainFactory factory = getDomainFactory();
		List careSpells = factory.find("from CareSpell careSpell where careSpell.patient.id = :idPatient", new String[] { "idPatient" }, new Object[] { patientRefVo.getID_Patient() });

		if (careSpells != null && careSpells.size() > 0)
			return CareSpellVoAssembler.createCareSpellVoCollectionFromCareSpell(careSpells).sort(SortOrder.DESCENDING);

		return null;
	}

	// ///////////////
	// Procedures
	// ///////////////

	public PatientProcedureShortVoCollection listProcedureByClinicalContact(ClinicalContactRefVo clinicalContactRefVo)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProcedureByClinalContact(clinicalContactRefVo);
	}

	public PatientProcedureShortVoCollection listProcedureByPatient(PatientRefVo patientRefVo)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProcedureByPatient(patientRefVo);
	}

	public PatientProcedureShortVoCollection listProceduresByCareSpell(CareSpellRefVo careSpellRefVo)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProceduresByCareSpell(careSpellRefVo);
	}

	public PatientProcedureShortVoCollection listProceduresByEpisodeOfCare(EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProceduresByEpisodeOfCare(episodeOfCareRefVo);
	}

	public PatientProcedureShortVoCollection listProceduresByCareContextPatientSummary(CareContextRefVo careContextRefVo)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProceduresByCareContextPatientSummary(careContextRefVo);
	}

	// ///////////////
	// Problems
	// ///////////////

	public PatientProblemVoCollection listProblemsByPatient(PatientRefVo patient)
	{
		PatientProblems impl = (PatientProblems) getDomainImpl(PatientProblemsImpl.class);
		return impl.listByPatient(patient);
	}

	public PatientProblemVoCollection listProblemsByCareSpell(CareSpellRefVo careSpellRefVo)
	{
		PatientProblems impl = (PatientProblems) getDomainImpl(PatientProblemsImpl.class);
		return impl.listProblemsByCareSpell(careSpellRefVo);
	}

	public PatientProblemVoCollection listProblemsByEpisodeOfCare(EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		PatientProblems impl = (PatientProblems) getDomainImpl(PatientProblemsImpl.class);
		return impl.listProblemsByEpisodeOfCare(episodeOfCareRefVo);
	}

	public PatientProblemVoCollection listProblemsByCareContext(CareContextRefVo careContextRefVo)
	{
		PatientProblems impl = (PatientProblems) getDomainImpl(PatientProblemsImpl.class);
		return impl.listProblemsByCareContext(careContextRefVo);
	}

	public PatientProblemVoCollection listProblemsByClinicalContact(ClinicalContactRefVo clinicalcontact)
	{
		PatientProblems impl = (PatientProblems) getDomainImpl(PatientProblemsImpl.class);
		return impl.listByClinicalContact(clinicalcontact);
	}

	// ///////////////
	// Diagnoses/Complications
	// ///////////////

	public PatientDiagnosisShortVoCollection listDiagnosisComplicationsPatient(PatientRefVo patrefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listDiagnosisComplicationsPatient(patrefVo);
	}

	public PatientDiagnosisShortVoCollection listPatientComplications(PatientRefVo patrefvo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listPatientComplications(patrefvo);
	}

	public PatientDiagnosisShortVoCollection listPatientDiagnoses(PatientRefVo patrefvo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listPatientDiagnoses(patrefvo);
	}

	public PatientDiagnosisShortVoCollection listContactComplications(ClinicalContactRefVo clinicalcontactrefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listContactComplications(clinicalcontactrefVo);
	}

	public PatientDiagnosisShortVoCollection listContactDiagnoses(ClinicalContactRefVo clinicalcontactrefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listContactDiagnoses(clinicalcontactrefVo);
	}

	public PatientDiagnosisShortVoCollection listDiagnosisComplicationsContact(ClinicalContactRefVo clinicalcontactrefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listDiagnosisComplicationsContact(clinicalcontactrefVo);
	}

	public PatientDiagnosisShortVoCollection listCareContextComplications(CareContextRefVo careContextRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listCareContextComplications(careContextRefVo);
	}

	public PatientDiagnosisShortVoCollection listCareContextDiagnoses(CareContextRefVo careContextRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listCareContextDiagnoses(careContextRefVo);
	}

	public PatientDiagnosisShortVoCollection listEpisodeOfCareComplications(EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listEpisodeOfCareComplications(episodeOfCareRefVo);
	}

	public PatientDiagnosisShortVoCollection listEpisodeOfCareDiagnoses(EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listEpisodeOfCareDiagnoses(episodeOfCareRefVo);
	}

	public PatientDiagnosisShortVoCollection listDiagnosisComplicationsCareContext(CareContextRefVo careContextRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listDiagnosisComplicationsCareContext(careContextRefVo);
	}

	public PatientDiagnosisShortVoCollection listDiagnosisComplicationEpisodeOfCare(EpisodeOfCareRefVo episodeOfCareRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listDiagnosisComplicationEpisodeOfCare(episodeOfCareRefVo);
	}

	public PatientDiagnosisShortVoCollection listDiagnosisComplicationCareSpell(CareSpellRefVo careSpellRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listDiagnosisComplicationCareSpell(careSpellRefVo);
	}

	public PatientDiagnosisShortVoCollection listCareSpellDiagnoses(CareSpellRefVo careSpellRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listCareSpellDiagnoses(careSpellRefVo);
	}

	public PatientDiagnosisShortVoCollection listCareSpellComplications(CareSpellRefVo careSpellRefVo)
	{
		DiagnosisComplications impl = (DiagnosisComplications) getDomainImpl(DiagnosisComplicationsImpl.class);
		return impl.listCareSpellComplications(careSpellRefVo);
	}

	public ims.clinical.vo.ClinicalDIAssociationVoCollection listClinicalDiAssociationByPatientDiagnosis(ims.core.clinical.vo.PatientDiagnosisRefVo filter)
	{
		return listAssociation(filter);
	}

	public ims.clinical.vo.ClinicalDIAssociationVoCollection listClinicalDiAssociationByPatientProcedure(ims.core.clinical.vo.PatientProcedureRefVo filter)
	{
		return listAssociation(filter);
	}

	public ims.clinical.vo.ClinicalDIAssociationVoCollection listClinicalDiAssociationByPatientProblem(ims.core.clinical.vo.PatientProblemRefVo filter)
	{
		return listAssociation(filter);
	}

	private ClinicalDIAssociationVoCollection listAssociation(ValueObject filter)
	{
		if (filter == null)
			throw new DomainRuntimeException("filter not provided");

		String hql = "from Clinicalcdiassociations assoc where ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (filter instanceof PatientDiagnosisRefVo)
		{
			hql += "assoc.primDiagnosis.id = :diagId";
			markers.add("diagId");
			values.add(((PatientDiagnosisRefVo) filter).getID_PatientDiagnosis());
		}
		else if (filter instanceof PatientProcedureRefVo)
		{
			hql += "assoc.primProcedure.id = :procId";
			markers.add("procId");
			values.add(((PatientProcedureRefVo) filter).getID_PatientProcedure());
		}
		else if (filter instanceof PatientProblemRefVo)
		{
			hql += "assoc.primProblem.id = :problemId";
			markers.add("problemId");
			values.add(((PatientProblemRefVo) filter).getID_PatientProblem());
		}
		hql += " and assoc.isActive = 1";// WDEV-12407
		DomainFactory factory = getDomainFactory();
		List associations = factory.find(hql, markers, values);
		if (associations != null)
			return ClinicalDIAssociationVoAssembler.createClinicalDIAssociationVoCollectionFromClinicalcdiassociations(associations);

		return null;
	}

	public ClinicalContactShortVoCollection listClinicalContactsShort(PatientShort voPatientShort, ClinicalContactFilterVo voClinicalContactFilter, Boolean bOnlyRootClinicalContacts)
	{
		DomainFactory factory = getDomainFactory();

		String hql;
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		hql = " from ClinicalContact rc ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		if (voPatientShort != null)
		{
			condStr.append(andStr + " rc.patient.id = :patientID");
			markers.add("patientID");
			values.add(voPatientShort.getID_Patient());
			andStr = " and ";
		}
		else
		{
			// LIST CLINICAL CONTACTS FOR ALL PATIENTS
			return listClinicalContacts(voClinicalContactFilter, bOnlyRootClinicalContacts);
		}
		if (voClinicalContactFilter != null)
		{
			if (voClinicalContactFilter.getContactType() != null)
			{
				condStr.append(andStr + " rc.contactType = :contactType");
				markers.add("contactType");
				values.add(getDomLookup(voClinicalContactFilter.getContactType()));
				andStr = " and ";
			}
			if (voClinicalContactFilter.getLocation() != null)
			{
				condStr.append(andStr + " rc.patient.ward.id = :wardId");
				markers.add("wardId");
				values.add(voClinicalContactFilter.getLocation().getID_Location());
				andStr = " and ";
			}
			if (voClinicalContactFilter.getMemberOfStaff() != null) // no seenBy
																	// available
																	// in Value
																	// Object
			{
				if (voClinicalContactFilter.getMemberOfStaff().getHcp() != null)
				{
					condStr.append(andStr + " rc.responsibleHCP.id = :hcpId");
					markers.add("hcpId");
					values.add(voClinicalContactFilter.getMemberOfStaff().getHcp().getID_Hcp());
					andStr = " and ";
				}
			}
			if (voClinicalContactFilter.getIsContactTypeInpatient() == Boolean.TRUE)
			{
				condStr.append(andStr + " rc.contactType != :contactType");
				markers.add("contactType");
				values.add(getDomLookup(ContactType.OUTPATIENT));
				andStr = " and ";
			}
		}

		if (bOnlyRootClinicalContacts.booleanValue())
		{
			condStr.append(andStr + " rc.parentClinContact is null");
		}

		hql += " where " + condStr.toString();

		List clinicalContactList = factory.find(hql, markers, values);

		ClinicalContactShortVoCollection voContactColl = new ClinicalContactShortVoCollection();

		for (int x = 0; x < clinicalContactList.size(); x++)
		{
			ClinicalContact domClinContact = (ClinicalContact) clinicalContactList.get(x);
			ClinicalContactShortVo voClinicalContact = ClinicalContactShortVoAssembler.create(domClinContact);
			voContactColl.add(voClinicalContact);
		}

		return voContactColl.sort();
	}

	public ClinicalContactShortVoCollection listClinicalContacts(ClinicalContactFilterVo filter, Boolean bOnlyRootClinicalContacts)
	{
		DomainFactory factory = getDomainFactory();

		List clinicalContactList = null;
		String hql;
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (filter == null)
		{
			clinicalContactList = factory.listDomainObjects(ClinicalContact.class);
		}
		else
		{
			hql = " from ClinicalContact rc ";
			StringBuffer condStr = new StringBuffer();
			String andStr = " ";

			if (filter.getContactType() != null)
			{
				condStr.append(andStr + " rc.contactType = :contactType");
				markers.add("contactType");
				values.add(getDomLookup(filter.getContactType()));
				andStr = " and ";
			}

			if (filter.getLocation() != null) // no Ward available in Value
											  // Object
			{
				condStr.append(andStr + " rc.patient.ward.id = :wardId");
				markers.add("wardId");
				values.add(filter.getLocation().getID_Location());
				andStr = " and ";
			}
			if (filter.getMemberOfStaff() != null) // no seenBy available in
												   // Value Object
			{
				if (filter.getMemberOfStaff().getHcp() != null)
				{
					condStr.append(andStr + " rc.responsibleHCP.id = :hcpId");
					markers.add("hcpId");
					values.add(filter.getMemberOfStaff().getHcp().getID_Hcp());
					andStr = " and ";
				}
			}
			if (bOnlyRootClinicalContacts.booleanValue())
			{
				condStr.append(andStr + " rc.parentClinContact is null");
			}

			condStr.append(andStr + " rc.endDateTime is null");

			hql += " where " + condStr.toString();

			clinicalContactList = factory.find(hql, markers, values);
		}

		ClinicalContactShortVoCollection voContactColl = new ClinicalContactShortVoCollection();

		for (int x = 0; x < clinicalContactList.size(); x++)
		{
			ClinicalContact domClinContact = (ClinicalContact) clinicalContactList.get(x);
			ClinicalContactShortVo voClinicalContact = ClinicalContactShortVoAssembler.create(domClinContact);
			voContactColl.add(voClinicalContact);
		}

		return voContactColl.sort();
	}

	public PatientProcedureShortVoCollection listProcedureByClinicalContactAndStatus(ClinicalContactRefVo clinicalContactRefVo, PatientProcedureStatus status)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProcedureByClinicalContactAndStatus(clinicalContactRefVo, status);
	}

	public PatientProcedureShortVoCollection listProceduresByCareContextPatientSummaryAndStatus(CareContextRefVo careContextRefVo, PatientProcedureStatus status)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProceduresByCareContextPatientSummaryAndStatus(careContextRefVo, status);
	}

	public PatientProcedureShortVoCollection listProceduresByEpisodeOfCareAndStatus(EpisodeOfCareRefVo episodeOfCareRefVo, PatientProcedureStatus status)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProceduresByEpisodeOfCareAndStatus(episodeOfCareRefVo, status);
	}

	public PatientProcedureShortVoCollection listProceduresByCareSpellAndStatus(CareSpellRefVo careSpellRefVo, PatientProcedureStatus status)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProceduresByCareSpellAndStatus(careSpellRefVo, status);
	}

	public PatientProcedureShortVoCollection listProcedureByPatientAndStatus(PatientRefVo patientRefVo, PatientProcedureStatus status)
	{
		Procedures impl = (Procedures) getDomainImpl(PlannedProcedureImpl.class);
		return impl.listProcedureByPatientAndStatus(patientRefVo, status);
	}

	public CSPrimaryDiagnosisAndPoceduresVo listPrimaryDiagnosisAndProblems(CareSpellRefVo careSpellRefVo)
	{
		if (careSpellRefVo == null)
			throw new CodingRuntimeException("Cannot list Primary Diagnosis/Problems for null CareSpellRefVo");

		DomainFactory factory = getDomainFactory();

		StringBuffer diagnosisQuery = new StringBuffer();
		diagnosisQuery.append("select c1_1.diagnosis.id, c1_1.diagnosis.diagnosisDescription");
		diagnosisQuery.append(" from CsPrimaryDiagnosis as c1_1");
		diagnosisQuery.append(" where ");
		diagnosisQuery.append(" (c1_1.isActive = :ACTIVE and c1_1.episodeOfCare.careSpell.id = :CARESPELL_ID)");
		diagnosisQuery.append(" and c1_1.isRIE is null and c1_1.diagnosis.isRIE is null");

		StringBuffer problemsQuery = new StringBuffer();
		problemsQuery.append("select  c1_1.patientProblem.id, c1_1.patientProblem.patientProblem");
		problemsQuery.append(" from CsPrimaryProblem as c1_1");
		problemsQuery.append(" where");
		problemsQuery.append(" (c1_1.isActive = :ACTIVE and c1_1.careContext.episodeOfCare.careSpell.id = :CARESPELL_ID)");
		problemsQuery.append(" and c1_1.isRIE is null and c1_1.patientProblem.isRIE is null");

		ArrayList params = new ArrayList();
		params.add("ACTIVE");
		params.add("CARESPELL_ID");

		ArrayList values = new ArrayList();
		values.add(Boolean.TRUE);
		values.add(careSpellRefVo.getID_CareSpell());

		List diagnosisList = factory.find(diagnosisQuery.toString(), params, values);
		List problemsList = factory.find(problemsQuery.toString(), params, values);

		CSPrimaryDiagnosisAndPoceduresVo voPrimary = new CSPrimaryDiagnosisAndPoceduresVo();
		voPrimary.setPrimaryDiagnosis(new CSPatientSummaryDiagnosisVoCollection());
		voPrimary.setPrimaryProcedures(new CSPatientSummaryProcedureVoCollection());

		for (int i = 0; diagnosisList != null && i < diagnosisList.size(); i++)
		{
			Object[] diagObjects = (Object[]) diagnosisList.get(i);
			if (diagObjects != null)
			{
				CSPatientSummaryDiagnosisVo voCSPatientSummaryDiagnosis = new CSPatientSummaryDiagnosisVo();
				if (diagObjects[0] instanceof Integer)
				{
					voCSPatientSummaryDiagnosis.setID_CSPatientSummaryDiagnosis((Integer) diagObjects[0]);
				}

				if (diagObjects[1] instanceof String)
				{
					voCSPatientSummaryDiagnosis.setDiagnosisName((String) diagObjects[1]);
				}
				voPrimary.getPrimaryDiagnosis().add(voCSPatientSummaryDiagnosis);
			}
		}

		for (int i = 0; i < problemsList.size(); i++)
		{
			Object[] procObjects = (Object[]) problemsList.get(i);
			if (procObjects != null)
			{
				CSPatientSummaryProcedureVo voCSPatientSummaryProcedure = new CSPatientSummaryProcedureVo();
				if (procObjects[0] instanceof Integer)
				{
					voCSPatientSummaryProcedure.setID_CSPatientSummaryProcedure((Integer) procObjects[0]);
				}

				if (procObjects[1] instanceof String)
				{
					voCSPatientSummaryProcedure.setProcedureName((String) procObjects[1]);
				}
				voPrimary.getPrimaryProcedures().add(voCSPatientSummaryProcedure);
			}
		}

		return voPrimary;
	}

	public ClinicalNotesVo getClinicalNotesForContact(ClinicalContactRefVo clinicalContactRefId)
	{
		if (clinicalContactRefId == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Cannot get ClinicalNotesVo for null ClinicalContactRefVo");

		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ClinicalNotes clinnote where ");
		String andStr = " ";

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		hql.append(andStr + " clinnote.clinicalContact.id = :clinicContactId");
		markers.add("clinicContactId");
		values.add(clinicalContactRefId.getID_ClinicalContact());
		andStr = " and ";

		hql.append(andStr);
		hql.append(" clinnote.noteType = :noteType");
		markers.add("noteType");
		values.add(getDomLookup(ims.core.vo.lookups.ClinicalNoteType.CLINICALNOTE));

		List listNotes = factory.find(hql.toString(), markers, values);
		if (listNotes != null && listNotes.size() > 0)
		{
			ClinicalNotesVoCollection voColl = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(listNotes);
			if (voColl != null)
			{
				int size = voColl.size();
				if (size > 0)
					return voColl.get(0);

			}
		}

		return null;
	}

	public ims.core.vo.ClinicalNotesVo getClinicalNote(ClinicalNotesRefVo clinicalNoteRefVo)
	{
		ClinicalNoteDrawing impl = (ClinicalNoteDrawing) getDomainImpl(ClinicalNoteDrawingImpl.class);
		return impl.getClinicalNotes(clinicalNoteRefVo.getID_ClinicalNotes());

	}

	public ims.core.vo.ClinicalNotesShortVo getClinicalNotesShort(Integer id)
	{
		if (id != null)
		{
			DomainFactory factory = getDomainFactory();
			ClinicalNotes doCareContext = (ClinicalNotes) factory.getDomainObject(ClinicalNotes.class, id);
			return ClinicalNotesShortVoAssembler.create(doCareContext);
		}
		return null;
	}

	// wdev-2689
	public void recordReadAudit(PatientRefVo patient) throws StaleObjectException
	{
		if (ConfigFlag.DOM.READ_AUDIT_ENABLED.getValue() != true)
			return;

		ims.domain.ContextEvalFactory evalFactory = new ContextEvalFactory(super.getSession());
		if (evalFactory.hasContextEvalProvider())
		{
			evalFactory.getContextEvalProvider().recordReadAudit(patient, "Patient Clinical");
		}
	}

	public PASEventRefVo getPASEvent(String eventID)
	{
		DomainFactory factory = getDomainFactory();
		List l = factory.find("from PASEvent p where p.pasEventId = '" + eventID + "'");
		if (l.size() != 1)
			return null;

		return PasEventLiteVoAssembler.create((PASEvent) l.get(0));
	}

	public WorklistContactType getWorklistContactTypeByExternalCode(ContactType contactType)
	{
		if (contactType == null)
			return null;

		LookupInstVo instContactType = LookupHelper.getContactTypeInstance(getLookupService(), contactType.getId());
		LookupInstVo instMap = getMappings(instContactType);
		LookupMappingVoCollection mapColl = instMap.getMappings();
		for (int j = 0; j < mapColl.size(); j++)
		{
			LookupMappingVo valueObject = mapColl.get(j);
			TaxonomyType taxonomyType = getExtSystemInstance(valueObject.getExtSystem());
			if (taxonomyType.equals(TaxonomyType.WORKLIST_MAPPING))
			{
				Integer codeVal = Integer.valueOf(valueObject.getExtCode());
				WorklistContactTypeCollection collWorklistContactType = LookupHelper.getWorklistContactType(getLookupService());
				for (int i = 0; i < collWorklistContactType.size(); i++)
				{
					if (codeVal == collWorklistContactType.get(i).getId())
						return collWorklistContactType.get(i);
				}
			}
		}

		return null;
	}

	private TaxonomyType getExtSystemInstance(String extSystem)
	{
		TaxonomyTypeCollection coll = LookupHelper.getTaxonomyType(getLookupService());
		for (int x = 0; x < coll.size(); x++)
		{
			TaxonomyType inst = coll.get(x);
			if (inst.getText().equals(extSystem))
				return inst;
		}
		return null;
	}

	public LookupInstVo getMappings(LookupInstVo instance)
	{
		DomainFactory factory = getDomainFactory();
		ims.domain.lookups.LookupInstance doInst = factory.getLookupInstance(instance.getId());
		Set mappings = doInst.getMappings();
		LookupMappingVoCollection mapColl = new LookupMappingVoCollection();
		Iterator iter = mappings.iterator();
		LookupMapping doMapping;
		while (iter.hasNext())
		{
			doMapping = (LookupMapping) iter.next();
			mapColl.add(new LookupMappingVo(doMapping.getExtSystem(), doMapping.getExtCode()));
		}
		mapColl.sort();
		instance.setMappings(mapColl);
		return instance;
	}

	public ServiceRefVo getServiceForEpisodeOfCareSpecialty(EpisodeOfCareRefVo episodeOfCare)
	{
		if (episodeOfCare == null || !episodeOfCare.getID_EpisodeOfCareIsNotNull())
			return null;

		StringBuilder query = new StringBuilder();

		query.append("select service from Service as service left join service.specialty as specialty where specialty in ");
		query.append(" (select spec from EpisodeOfCare as eoc left join eoc.specialty as spec where eoc.id = :EOC_ID)");
		query.append("  and service.isRIE is null and service.isActive = 1");

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("EOC_ID");
		paramValues.add(episodeOfCare.getID_EpisodeOfCare());

		return ServiceLiteVoAssembler.create((Service) getDomainFactory().findFirst(query.toString(), paramNames, paramValues));
	}

	// wdev-14053
	private StringBuffer checkIfTheLastCharacterIsComma(StringBuffer hqlId)
	{
		if (hqlId == null || hqlId.length() == 0)
			return null;
		int tempNrChar = hqlId.length();
		if (hqlId.charAt(tempNrChar - 1) == ',' && tempNrChar == 1)
		{
			return null;
		}
		else if (hqlId.charAt(tempNrChar - 1) == ',')
		{
			return new StringBuffer(hqlId.substring(0, tempNrChar - 1));
		}
		else
		{
			return hqlId;
		}
	}

	// wdev-13977
	protected CareSpellVoCollection returnNonCancelledContexts(List careSpells)
	{
		boolean flagTemp = false;
		if (careSpells == null || careSpells.size() == 0)
			return null;
		else
		{
			CareSpellVoCollection careSpelColl = new CareSpellVoCollection();
			EpisodeofCareVoCollection episodeColl = new EpisodeofCareVoCollection();
			CareContextVoCollection careContextColl = new CareContextVoCollection();
			ClinicalContactShortVoCollection clinicalContactColl = new ClinicalContactShortVoCollection();
			List episodeOfCare = null;
			List careContext = null;
			List clinicalContact = null;
			DomainFactory factory = getDomainFactory();
			StringBuffer hqlId = new StringBuffer();
			StringBuffer hql; // wdev-14053
			flagTemp = false; // wdev-14053
			for (int i = 0; i < careSpells.size(); i++)
			{
				if (i > 0)
				{
					if (flagTemp == true) // wdev-14053
						hqlId.append(",");
				}

				CareSpell tempDo = (CareSpell) careSpells.get(i);
				if (tempDo != null)
				{
					hqlId.append(tempDo.getId());
					flagTemp = true; // wdev-14053

				}
				else
					flagTemp = false; // wdev-14053
				// ----------------
				CareSpellWithoutEpisodesVo tempCareSpel = CareSpellWithoutEpisodesVoAssembler.create(tempDo); // carespell
				if (tempCareSpel != null)
				{

					careSpelColl.add(copyFromShort(tempCareSpel));
				}
				// -------------
			}
			hqlId = checkIfTheLastCharacterIsComma(hqlId); // wdev-14053
			if (hqlId != null && hqlId.length() > 0) // wdev-14053
			{
				hql = new StringBuffer(" select e1_1 from CareSpell as c1_1 left join c1_1.episodes as e1_1 left join e1_1.currentStatus as e2_1 left join e2_1.status as l1_1 where c1_1.id in (" + hqlId + "  ) and (e2_1.status is null or e2_1.status.id != :statusEpisode  )");
				episodeOfCare = factory.find(hql.toString(), new String[] { "statusEpisode" }, new Object[] { (EpisodeOfCareStatus.CANCELLED).getId() });
			}
			if (episodeOfCare != null && episodeOfCare.size() > 0)
			{
				hqlId = new StringBuffer();
				flagTemp = false;
				for (int i = 0; i < episodeOfCare.size(); i++)
				{
					if (i > 0)
					{
						if (flagTemp == true) // wdev-14053
							hqlId.append(",");
					}

					EpisodeOfCare tempDo = (EpisodeOfCare) episodeOfCare.get(i);
					if (tempDo != null)
					{
						hqlId.append(tempDo.getId());
						flagTemp = true; // wdev-14053
					}
					else
						flagTemp = false; // wdev-14053
					// -------------
					EpisodeOfCareWithoutContextsVo episodeVo = EpisodeOfCareWithoutContextsVoAssembler.create(tempDo); // episodeofcare
					if (episodeVo != null)
						episodeColl.add(copyFromShortEpisode(episodeVo));
					// ------------
				}
				hqlId = checkIfTheLastCharacterIsComma(hqlId); // wdev-14053
				if (hqlId != null && hqlId.length() > 0) // wdev-14053
				{
					hql = new StringBuffer(" select c1_1 from EpisodeOfCare as e1_1 left join e1_1.careContexts as c1_1 left join c1_1.currentStatus as c2_1 where e1_1.id in (" + hqlId + "  ) and (c2_1.status is null or c2_1.status.id != :statusCareContext )");
					careContext = factory.find(hql.toString(), new String[] { "statusCareContext" }, new Object[] { (CareContextStatus.CANCELLED).getId() });
				}
				if (careContext != null && careContext.size() > 0)
				{
					hqlId = new StringBuffer();
					flagTemp = false;
					for (int i = 0; i < careContext.size(); i++)
					{
						if (i > 0)
						{
							if (flagTemp == true) // wdev-14053
								hqlId.append(",");
						}

						CareContext tempDo = (CareContext) careContext.get(i);
						if (tempDo != null)
						{
							hqlId.append(tempDo.getId());
							flagTemp = true; // wdev-14053
						}
						else
							flagTemp = false; // wdev-14053

						// -------------------------------------
						CareContextWithoutClicalContactsVo tempVo = CareContextWithoutClicalContactsVoAssembler.create(tempDo);
						if (tempVo != null)
							careContextColl.add(copyFromShortCareContext(tempVo));
						// -------------------------------------
					}
					hqlId = checkIfTheLastCharacterIsComma(hqlId); // wdev-14053
					if (hqlId != null && hqlId.length() > 0) // wdev-14053
					{
						hql = new StringBuffer(" select c2_1 from CareContext as c1_1 left join c1_1.clinicalContacts as c2_1 left join c2_1.currentStatus as c3_1 where c1_1.id in ( " + hqlId + " ) and (c3_1.status is null or c3_1.status.id != :statusClinicalContatct)");
						clinicalContact = factory.find(hql.toString(), new String[] { "statusClinicalContatct" }, new Object[] { (ClinicalContactStatus.CANCELLED).getId() });
					}

				}
				if (clinicalContact != null && clinicalContact.size() > 0)
				{

					for (int i = 0; i < clinicalContact.size(); i++)
					{

						ClinicalContact tempDo = (ClinicalContact) clinicalContact.get(i);

						// -------------------------------------
						ClinicalContactShortVo tempVo = ClinicalContactShortVoAssembler.create(tempDo);
						if (tempVo != null)
							clinicalContactColl.add(tempVo);
						// -------------------------------------
					}

				}
			}

			populateCareContextWithClinicalContacts(careContextColl, clinicalContactColl);
			episodeColl = populateCareContexstCollection(episodeColl, careContextColl);
			careSpelColl = populateEpisodeOfCareCollection(careSpelColl, episodeColl);
			if (careSpelColl != null && careSpelColl.size() > 0)
				return careSpelColl.sort(SortOrder.DESCENDING);
			else
				return null;

		}

	}

	// wdev-13977
	private void populateCareContextWithClinicalContacts(CareContextVoCollection careContextColl, ClinicalContactShortVoCollection clinicalColl)
	{
		if (careContextColl == null || clinicalColl == null)
			return;

		for (int j = 0; j < careContextColl.size(); j++)
		{
			CareContextVo curentCareContext = careContextColl.get(j);
			if (curentCareContext == null)
				continue;
			for (int i = 0; i < clinicalColl.size(); i++)
			{
				ClinicalContactShortVo tempVo = clinicalColl.get(i);
				if (tempVo != null && tempVo.getCareContextIsNotNull() && tempVo.getCareContext().getID_CareContextIsNotNull() && tempVo.getCareContext().getID_CareContext().equals(curentCareContext.getID_CareContext()))
				{
					ClinicalContactShortVoCollection tempColl = curentCareContext.getClinicalContacts();
					if (tempColl == null)
						tempColl = new ClinicalContactShortVoCollection();
					tempColl.add(tempVo);
					curentCareContext.setClinicalContacts(tempColl);

				}
			}
		}
	}

	// wdev-13335
	public CareSpellVoCollection listCareSpellsByPatientAndCriteria(PatientRefVo patientRef, Date dateFrom, Date dateTo, Integer context, Boolean showCancelled)
	{
		if (patientRef == null || patientRef.getID_Patient() == null)
			throw new CodingRuntimeException("Patient not provided");

		DomainFactory factory = getDomainFactory();
		List careSpells = null;
		if (context > 0 && (dateFrom == null || dateTo == null))
			context = 0;

		if (context == 0) // search against carespell
		{
			// wdev-13977
			ArrayList names = new ArrayList();
			ArrayList values = new ArrayList();

			StringBuffer hql = new StringBuffer("select c1_1 from CareSpell as c1_1 left join c1_1.currentStatus as c2_1 ");
			hql.append(" where c1_1.patient.id = :idPatient");
			names.add("idPatient");
			values.add(patientRef.getID_Patient());

			if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
			{
				hql.append(" and (c2_1.status is null or c2_1.status.id != :statusCareSpell) ");
				names.add("statusCareSpell");
				values.add((ProblemGroupStatus.CANCELLED).getId());

			}
			hql.append("  order by c1_1.systemInformation.creationDateTime desc");
			careSpells = factory.find(hql.toString(), names, values);
			if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
			{
				return returnNonCancelledContexts(careSpells);
			}
			// -----
			// careSpells =
			// factory.find("from CareSpell careSpell where careSpell.patient.id = :idPatient order by careSpell.systemInformation.creationDateTime desc",
			// new String[] {"idPatient"}, new Object[]
			// {patientRef.getID_Patient()});
		}
		else if (context == 1) // search against carespell with date from and
							   // date to
		{

			// wdev-13977
			ArrayList names = new ArrayList();
			ArrayList values = new ArrayList();

			StringBuffer hql = new StringBuffer("select c1_1 from CareSpell as c1_1 left join c1_1.currentStatus as c2_1 ");
			hql.append(" where c1_1.patient.id = :idPatientand and c1_1.startDate between :datefrom and :dateto");
			names.add("idPatientand");
			values.add(patientRef.getID_Patient());

			names.add("datefrom");
			values.add(dateFrom.getDate());

			names.add("dateto");
			values.add(dateTo.getDate());

			if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
			{
				hql.append(" and (c2_1.status is null or c2_1.status.id != :statusCareSpell) ");
				names.add("statusCareSpell");
				values.add((ProblemGroupStatus.CANCELLED).getId());

			}
			hql.append("  order by c1_1.systemInformation.creationDateTime desc");
			careSpells = factory.find(hql.toString(), names, values);
			if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
			{
				return returnNonCancelledContexts(careSpells);
			}
			// -----
			// careSpells =
			// factory.find("from CareSpell careSpell where careSpell.patient.id = :idPatient and careSpell.startDate between :datefrom and :dateto order by careSpell.systemInformation.creationDateTime desc",
			// new String[] {"idPatient","datefrom","dateto"}, new Object[]
			// {patientRef.getID_Patient(),dateFrom.getDate(),dateTo.getDate()});
		}
		else if (context == 2) // search against episodeofcare with date from
							   // and date to
		{
			// careSpells =
			// factory.find("select c1_1,e1_1 from CareSpell as c1_1 left join c1_1.episodes as e1_1 left join c1_1.patient as p1_1 where (e1_1.startDate between :datefrom and :dateto and p1_1.id = :idPatient) order by c1_1.systemInformation.creationDateTime desc,e1_1.systemInformation.creationDateTime desc "
			// , new String[] {"idPatient","datefrom","dateto"}, new Object[]
			// {patientRef.getID_Patient(),dateFrom.getDate(),dateTo.getDate()});
			// wdev-13977
			ArrayList names = new ArrayList();
			ArrayList values = new ArrayList();

			StringBuffer hql = new StringBuffer("select c1_1, e1_1 from CareSpell as c1_1 left join c1_1.episodes as e1_1 left join e1_1.currentStatus as e2_1 left join c1_1.patient as p1_1 left join c1_1.currentStatus as c2_1"); // ,
																																																									  // ClinicalContactStatusHistory
																																																									  // as
																																																									  // c3_1
			hql.append(" where c1_1.patient.id = :idPatient and e1_1.startDate between :datefrom and :dateto");
			names.add("idPatient");
			values.add(patientRef.getID_Patient());

			names.add("datefrom");
			values.add(dateFrom.getDate());

			names.add("dateto");
			values.add(dateTo.getDate());

			if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
			{
				hql.append(" and ((c2_1.status is null or c2_1.status.id != :statusCareSpell) and (e2_1.status is null or e2_1.status.id != :statusEpisode ) ) ");
				names.add("statusCareSpell");
				values.add((ProblemGroupStatus.CANCELLED).getId());
				names.add("statusEpisode");
				values.add((EpisodeOfCareStatus.CANCELLED).getId());

			}
			hql.append("  order by c1_1.systemInformation.creationDateTime desc");
			careSpells = factory.find(hql.toString(), names, values);

			if (careSpells != null && careSpells.size() > 0)
			{
				CareSpellVoCollection careSpelColl = new CareSpellVoCollection();
				EpisodeofCareVoCollection episodeColl = new EpisodeofCareVoCollection();
				// wdev-13977
				CareContextVoCollection careContextColl = new CareContextVoCollection();
				ClinicalContactShortVoCollection clinicalContactColl = new ClinicalContactShortVoCollection();

				if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
				{
					for (int i = 0; i < careSpells.size(); i++)
					{
						Object[] temp = (Object[]) careSpells.get(i);
						CareSpellWithoutEpisodesVo tempCareSpel = CareSpellWithoutEpisodesVoAssembler.create((CareSpell) temp[0]); // carespell
						if (tempCareSpel != null)
						{
							careSpelColl.add(copyFromShort(tempCareSpel));
						}

						EpisodeOfCareWithoutContextsVo episodeVo = EpisodeOfCareWithoutContextsVoAssembler.create((EpisodeOfCare) temp[1]); // episodeofcare
						if (episodeVo != null)
							episodeColl.add(copyFromShortEpisode(episodeVo));

						// ------------

					}
					populateCareContextAndClinical(careContextColl, clinicalContactColl, episodeColl);

					// -------
					populateCareContextWithClinicalContacts(careContextColl, clinicalContactColl);
					episodeColl = populateCareContexstCollection(episodeColl, careContextColl);
					careSpelColl = populateEpisodeOfCareCollection(careSpelColl, episodeColl);
				}
				else
				{
					for (int i = 0; i < careSpells.size(); i++)
					{
						Object[] temp = (Object[]) careSpells.get(i);
						CareSpellWithoutEpisodesVo tempCareSpel = CareSpellWithoutEpisodesVoAssembler.create((CareSpell) temp[0]); // carespell
						if (tempCareSpel != null)
						{

							careSpelColl.add(copyFromShort(tempCareSpel));
						}

						EpisodeofCareVo episodeVo = EpisodeofCareVoAssembler.create((EpisodeOfCare) temp[1]); // episodeofcare
						if (episodeVo != null)
							episodeColl.add(episodeVo);

					}
					careSpelColl = populateEpisodeOfCareCollection(careSpelColl, episodeColl);
				}

				if (careSpelColl != null && careSpelColl.size() > 0)
					return careSpelColl.sort(SortOrder.DESCENDING);
				else
					return null;
			}
			return null;

		}
		else if (context == 3) // search against carecontext with date from and
							   // date to
		{

			Time t = new Time(23, 59, 59);
			DateTime tempd = new DateTime(new Date(dateTo.getDate()), t);
			java.util.Date dtDT = tempd.getJavaDate();

			// careSpells =
			// factory.find("select c1_1,e1_1,c2_1 from CareSpell as c1_1 left join c1_1.episodes as e1_1 left join e1_1.careContexts as c2_1 where (c2_1.startDateTime  between :datefrom and :dateto and c1_1.patient.id = :idPatient) order by c1_1.systemInformation.creationDateTime desc,e1_1.systemInformation.creationDateTime desc , c2_1.systemInformation.creationDateTime desc"
			// , new String[] {"idPatient","datefrom","dateto"}, new Object[]
			// {patientRef.getID_Patient(),dateFrom.getDate(),dtDT});
			ArrayList names = new ArrayList();
			ArrayList values = new ArrayList();

			StringBuffer hql = new StringBuffer("select c1_1, e1_1, c2_1 from CareSpell as c1_1 left join c1_1.episodes as e1_1 left join e1_1.careContexts as c2_1 left join c2_1.currentStatus as c3_1 left join e1_1.currentStatus as e2_1 left join c1_1.currentStatus as c4_1");
			hql.append(" where c2_1.startDateTime  between :datefrom and :dateto and c1_1.patient.id = :idPatient ");
			names.add("idPatient");
			values.add(patientRef.getID_Patient());

			names.add("datefrom");
			values.add(dateFrom.getDate());

			names.add("dateto");
			values.add(dtDT);

			if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
			{
				hql.append(" and ((c4_1.status is null or c4_1.status.id != :statusCareSpell)  and (e2_1.status is null or e2_1.status.id != :statusEpisode) and (c3_1.status is null or c3_1.status.id != :statusCareContext) ) ");
				names.add("statusCareSpell");
				values.add((ProblemGroupStatus.CANCELLED).getId());
				names.add("statusEpisode");
				values.add((EpisodeOfCareStatus.CANCELLED).getId());
				names.add("statusCareContext");
				values.add((CareContextStatus.CANCELLED).getId());

			}
			hql.append("  order by c1_1.systemInformation.creationDateTime desc,e1_1.systemInformation.creationDateTime desc , c2_1.systemInformation.creationDateTime desc");
			careSpells = factory.find(hql.toString(), names, values);
			if (careSpells != null && careSpells.size() > 0)
			{
				CareSpellVoCollection careSpelColl = new CareSpellVoCollection();
				EpisodeofCareVoCollection episodeColl = new EpisodeofCareVoCollection();
				CareContextVoCollection careContextColl = new CareContextVoCollection();
				ClinicalContactShortVoCollection clinicalContactColl = new ClinicalContactShortVoCollection();
				boolean flagTemp = false; // wdev-14053
				if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
				{
					List clinicalContact = null;
					for (int i = 0; i < careSpells.size(); i++)
					{
						Object[] temp = (Object[]) careSpells.get(i);
						CareSpellWithoutEpisodesVo tempCareSpel = CareSpellWithoutEpisodesVoAssembler.create((CareSpell) temp[0]); // carespell
						if (tempCareSpel != null)
						{

							careSpelColl.add(copyFromShort(tempCareSpel));
						}
						EpisodeOfCareWithoutContextsVo episodeVo = EpisodeOfCareWithoutContextsVoAssembler.create((EpisodeOfCare) temp[1]); // episodeofcare
						if (episodeVo != null)
							episodeColl.add(copyFromShortEpisode(episodeVo));

						CareContextWithoutClicalContactsVo careContextVo = CareContextWithoutClicalContactsVoAssembler.create((CareContext) temp[2]); // careContext
						if (careContextVo != null)
							careContextColl.add(copyFromShortCareContext(careContextVo));

					}
					if (careContextColl != null && careContextColl.size() > 0)
					{
						StringBuffer hqlId = new StringBuffer();
						for (int i = 0; i < careContextColl.size(); i++)
						{
							if (i > 0)
							{
								if (flagTemp == true) // wdev-14053
									hqlId.append(",");
							}

							CareContextVo tempDo = careContextColl.get(i);
							if (tempDo != null)
							{
								hqlId.append(tempDo.getID_CareContext());
								flagTemp = true; // wdev-14053
							}
							else
							{
								flagTemp = false; // wdev-14053
							}

						}
						hqlId = checkIfTheLastCharacterIsComma(hqlId); // wdev-14053
						if (hqlId != null && hqlId.length() > 0) // wdev-14053
						{
							hql = new StringBuffer(" select c2_1 from CareContext as c1_1 left join c1_1.clinicalContacts as c2_1 left join c2_1.currentStatus as c3_1 where c1_1.id in ( " + hqlId + " ) and (c3_1.status is null or c3_1.status.id != :statusClinicalContatct)");
							clinicalContact = factory.find(hql.toString(), new String[] { "statusClinicalContatct" }, new Object[] { (ClinicalContactStatus.CANCELLED).getId() });
						}

					}
					if (clinicalContact != null && clinicalContact.size() > 0)
					{

						for (int i = 0; i < clinicalContact.size(); i++)
						{

							ClinicalContact tempDo = (ClinicalContact) clinicalContact.get(i);

							// -------------------------------------
							ClinicalContactShortVo tempVo = ClinicalContactShortVoAssembler.create(tempDo);
							if (tempVo != null)
								clinicalContactColl.add(tempVo);
							// -------------------------------------
						}

					}
					populateCareContextWithClinicalContacts(careContextColl, clinicalContactColl);
					episodeColl = populateCareContexstCollection(episodeColl, careContextColl);
					careSpelColl = populateEpisodeOfCareCollection(careSpelColl, episodeColl);
				}
				else
				{
					for (int i = 0; i < careSpells.size(); i++)
					{
						Object[] temp = (Object[]) careSpells.get(i);
						CareSpellWithoutEpisodesVo tempCareSpel = CareSpellWithoutEpisodesVoAssembler.create((CareSpell) temp[0]); // carespell
						if (tempCareSpel != null)
						{

							careSpelColl.add(copyFromShort(tempCareSpel));
						}
						EpisodeOfCareWithoutContextsVo episodeVo = EpisodeOfCareWithoutContextsVoAssembler.create((EpisodeOfCare) temp[1]); // episodeofcare
						if (episodeVo != null)
							episodeColl.add(copyFromShortEpisode(episodeVo));

						CareContextVo careContextVo = CareContextVoAssembler.create((CareContext) temp[2]); // careContext
						if (careContextVo != null)
							careContextColl.add(careContextVo);

					}
					episodeColl = populateCareContexstCollection(episodeColl, careContextColl);
					careSpelColl = populateEpisodeOfCareCollection(careSpelColl, episodeColl);
				}

				if (careSpelColl != null && careSpelColl.size() > 0)
					return careSpelColl.sort(SortOrder.DESCENDING);
				else
					return null;
			}
			else
				return null;
		}
		else if (context == 4)// WDEV-14914
		{
			Date tempd = ((Date) dateTo.clone()).addDay(1);
			java.util.Date dtDT = tempd.getDate();

			ArrayList names = new ArrayList();
			ArrayList values = new ArrayList();

			StringBuffer hql = new StringBuffer("select careSpell, episodeOfCare, careContext, clinicalContact from CareSpell as careSpell left join careSpell.episodes as episodeOfCare left join episodeOfCare.careContexts as careContext left join careContext.clinicalContacts as clinicalContact left join clinicalContact.currentStatus as clinicalContactStatus left join careContext.currentStatus as careContextStatus left join episodeOfCare.currentStatus as episodeOfCareStatus left join careSpell.currentStatus as careSpellStatus");
			hql.append(" where clinicalContact.startDateTime  >= :datefrom and clinicalContact.startDateTime < :dateto and careSpell.patient.id = :idPatient ");
			names.add("idPatient");
			values.add(patientRef.getID_Patient());

			names.add("datefrom");
			values.add(dateFrom.getDate());

			names.add("dateto");
			values.add(dtDT);

			if (showCancelled == null || showCancelled.equals(Boolean.FALSE))
			{
				hql.append(" and ((careSpellStatus.status is null or careSpellStatus.status.id != :statusCareSpell)  and (episodeOfCareStatus.status is null or episodeOfCareStatus.status.id != :statusEpisode) and (careContextStatus.status is null or careContextStatus.status.id != :statusCareContext) and (clinicalContactStatus.status is null or clinicalContactStatus.status.id != :statusClinicalContact)) ");
				names.add("statusCareSpell");
				values.add((ProblemGroupStatus.CANCELLED).getId());
				names.add("statusEpisode");
				values.add((EpisodeOfCareStatus.CANCELLED).getId());
				names.add("statusCareContext");
				values.add((CareContextStatus.CANCELLED).getId());
				names.add("statusClinicalContact");
				values.add((ClinicalContactStatus.CANCELLED).getId());
			}
			hql.append("  order by careSpell.systemInformation.creationDateTime desc,episodeOfCare.systemInformation.creationDateTime desc , careContext.systemInformation.creationDateTime desc,  clinicalContact.systemInformation.creationDateTime desc");
			careSpells = factory.find(hql.toString(), names, values);

			if (careSpells == null || careSpells.size() == 0)
				return null;

			CareSpellVoCollection careSpelColl = new CareSpellVoCollection();
			EpisodeofCareVoCollection episodeColl = new EpisodeofCareVoCollection();
			CareContextVoCollection careContextColl = new CareContextVoCollection();
			ClinicalContactShortVoCollection clinicalContactColl = new ClinicalContactShortVoCollection();

			for (int i = 0; i < careSpells.size(); i++)
			{
				Object[] temp = (Object[]) careSpells.get(i);
				CareSpellWithoutEpisodesVo tempCareSpel = CareSpellWithoutEpisodesVoAssembler.create((CareSpell) temp[0]); // carespell
				if (tempCareSpel != null)
				{
					careSpelColl.add(copyFromShort(tempCareSpel));
				}

				EpisodeOfCareWithoutContextsVo episodeVo = EpisodeOfCareWithoutContextsVoAssembler.create((EpisodeOfCare) temp[1]); // episodeofcare
				if (episodeVo != null)
					episodeColl.add(copyFromShortEpisode(episodeVo));

				CareContextWithoutClicalContactsVo careContextVo = CareContextWithoutClicalContactsVoAssembler.create((CareContext) temp[2]); // careContext
				if (careContextVo != null)
					careContextColl.add(copyFromShortCareContext(careContextVo));

				ClinicalContactShortVo clinicalContactVo = ClinicalContactShortVoAssembler.create((ClinicalContact) temp[3]);
				if (clinicalContactVo != null)
					clinicalContactColl.add(clinicalContactVo);

			}

			populateCareContextWithClinicalContacts(careContextColl, clinicalContactColl);
			episodeColl = populateCareContexstCollection(episodeColl, careContextColl);
			careSpelColl = populateEpisodeOfCareCollection(careSpelColl, episodeColl);

			return careSpelColl;
		}
		else
			return null;

		if (careSpells != null && careSpells.size() > 0)
			return CareSpellVoAssembler.createCareSpellVoCollectionFromCareSpell(careSpells).sort(SortOrder.DESCENDING);

		return null;
	}

	// wdev-13977
	private void populateCareContextAndClinical(CareContextVoCollection careContextColl, ClinicalContactShortVoCollection clinicalContactColl, EpisodeofCareVoCollection episodeColl)
	{
		List clinicalContact = null;
		List careContext = null; // wdev-14053
		DomainFactory factory = getDomainFactory();
		StringBuffer hql; // wdev-14053
		boolean flagTemp = false; // wdev-14053
		if (episodeColl != null && episodeColl.size() > 0)
		{
			StringBuffer hqlId = new StringBuffer();
			for (int i = 0; i < episodeColl.size(); i++)
			{
				if (i > 0)
				{
					if (flagTemp == true) // wdev-14053
						hqlId.append(",");
				}

				EpisodeofCareVo tempDo = episodeColl.get(i);
				if (tempDo != null)
				{
					hqlId.append(tempDo.getID_EpisodeOfCare());
					flagTemp = true; // wdev-14053
				}
				else
					flagTemp = false; // wdev-14053

			}
			hqlId = checkIfTheLastCharacterIsComma(hqlId); // wdev-14053
			if (hqlId != null && hqlId.length() > 0) // wdev-14053
			{
				hql = new StringBuffer(" select c1_1 from EpisodeOfCare as e1_1 left join e1_1.careContexts as c1_1 left join c1_1.currentStatus as c2_1 where e1_1.id in (" + hqlId + "  ) and (c2_1.status is null or c2_1.status.id != :statusCareContext )");
				careContext = factory.find(hql.toString(), new String[] { "statusCareContext" }, new Object[] { (CareContextStatus.CANCELLED).getId() });
			}

			if (careContext != null && careContext.size() > 0)
			{
				hqlId = new StringBuffer();
				flagTemp = false; // wdev-14053
				for (int i = 0; i < careContext.size(); i++)
				{
					if (i > 0)
					{
						if (flagTemp == true) // wdev-14053
							hqlId.append(",");
					}

					CareContext tempDo = (CareContext) careContext.get(i);
					if (tempDo != null)
					{
						hqlId.append(tempDo.getId());
						flagTemp = true; // wdev-14053
					}
					else
						flagTemp = false; // wdev-14053

					// -------------------------------------
					CareContextWithoutClicalContactsVo tempVo = CareContextWithoutClicalContactsVoAssembler.create(tempDo);
					if (tempVo != null)
						careContextColl.add(copyFromShortCareContext(tempVo));
					// -------------------------------------
				}
				hqlId = checkIfTheLastCharacterIsComma(hqlId); // wdev-14053
				if (hqlId != null && hqlId.length() > 0) // wdev-14053
				{
					hql = new StringBuffer(" select c2_1 from CareContext as c1_1 left join c1_1.clinicalContacts as c2_1 left join c2_1.currentStatus as c3_1 where c1_1.id in ( " + hqlId + " ) and (c3_1.status is null or c3_1.status.id != :statusClinicalContatct)");
					clinicalContact = factory.find(hql.toString(), new String[] { "statusClinicalContatct" }, new Object[] { (ClinicalContactStatus.CANCELLED).getId() });
				}

			}
			if (clinicalContact != null && clinicalContact.size() > 0)
			{

				for (int i = 0; i < clinicalContact.size(); i++)
				{

					ClinicalContact tempDo = (ClinicalContact) clinicalContact.get(i);

					// -------------------------------------
					ClinicalContactShortVo tempVo = ClinicalContactShortVoAssembler.create(tempDo);
					if (tempVo != null)
						clinicalContactColl.add(tempVo);
					// -------------------------------------
				}

			}
		}

	}

	// wdev-13335
	private EpisodeofCareVoCollection populateCareContexstCollection(EpisodeofCareVoCollection episodeColl, CareContextVoCollection careContextColl)
	{
		if (episodeColl == null || careContextColl == null)
			return null;
		for (int i = 0; i < episodeColl.size(); i++)
		{
			for (int k = 0; k < careContextColl.size(); k++)
			{
				if (episodeColl.get(i).getID_EpisodeOfCareIsNotNull() && episodeColl.get(i).getID_EpisodeOfCare().equals(careContextColl.get(k).getEpisodeOfCare().getID_EpisodeOfCare()))
				{
					if (!episodeColl.get(i).getCareContextsIsNotNull())
						episodeColl.get(i).setCareContexts(new CareContextVoCollection());

					episodeColl.get(i).getCareContexts().add(careContextColl.get(k));
				}
			}
		}
		return episodeColl;
	}

	// wdev-13335
	private CareSpellVoCollection populateEpisodeOfCareCollection(CareSpellVoCollection careSpelColl, EpisodeofCareVoCollection episodeColl)
	{
		if (careSpelColl == null || episodeColl == null)
			return null;
		for (int k = 0; k < careSpelColl.size(); k++)
		{
			for (int l = 0; l < episodeColl.size(); l++)
			{
				if (careSpelColl.get(k).getID_CareSpellIsNotNull() && careSpelColl.get(k).getID_CareSpell().equals(episodeColl.get(l).getCareSpell().getID_CareSpell()))
				{
					if (!careSpelColl.get(k).getEpisodesIsNotNull())
						careSpelColl.get(k).setEpisodes(new EpisodeofCareVoCollection());

					careSpelColl.get(k).getEpisodes().add(episodeColl.get(l));
				}

			}
		}
		return careSpelColl;
	}

	// wdev-13335,wdev-13977
	private CareSpellVo copyFromShort(CareSpellWithoutEpisodesVo shortVo)
	{
		CareSpellVo tempVo = new CareSpellVo(shortVo.getID_CareSpell(), shortVo.getVersion_CareSpell());
		if (shortVo == null)
			return null;
		tempVo.setID_CareSpell(shortVo.getID_CareSpell());
		tempVo.setEndDate(shortVo.getEndDate());
		tempVo.setStartDate(shortVo.getStartDate());
		tempVo.setIsRIE(shortVo.getIsRIE());
		tempVo.setPatient(shortVo.getPatient());
		tempVo.setSysInfo(shortVo.getSysInfo());
		tempVo.setEpisodes(new EpisodeofCareVoCollection());
		tempVo.setCurrentStatus(shortVo.getCurrentStatus());
		tempVo.setStatusHistory(shortVo.getStatusHistory());

		return tempVo;

	}

	// -------
	// wdev-13335.wdev-13977
	private EpisodeofCareVo copyFromShortEpisode(EpisodeOfCareWithoutContextsVo episodeVo)
	{
		if (episodeVo == null)
			return null;
		EpisodeofCareVo tempVo = new EpisodeofCareVo(episodeVo.getID_EpisodeOfCare(), episodeVo.getVersion_EpisodeOfCare());
		tempVo.setID_EpisodeOfCare(episodeVo.getID_EpisodeOfCare());
		tempVo.setCareSpell(episodeVo.getCareSpell());
		tempVo.setEndDate(episodeVo.getEndDate());
		tempVo.setStartDate(episodeVo.getStartDate());
		tempVo.setIsRIE(episodeVo.getIsRIE());
		tempVo.setSpecialty(episodeVo.getSpecialty());
		tempVo.setRelationship(episodeVo.getRelationship());
		tempVo.setResponsibleHCP(episodeVo.getResponsibleHCP());
		tempVo.setCareContexts(new CareContextVoCollection());
		tempVo.setCurrentStatus(episodeVo.getCurrentStatus());
		tempVo.setCurrentReferral(episodeVo.getCurrentReferral());
		tempVo.setEpisodeOfCareHistory(episodeVo.getEpisodeOfCareHistory());
		tempVo.setLinkedReferrals(episodeVo.getLinkedReferrals());
		tempVo.setRelationship(episodeVo.getRelationship());
		tempVo.setStatusHistory(episodeVo.getStatusHistory());

		return tempVo;

	}

	// wdev-13977
	private CareContextVo copyFromShortCareContext(CareContextWithoutClicalContactsVo careContext)
	{
		if (careContext == null)
			return null;
		CareContextVo tempVo = new CareContextVo(careContext.getID_CareContext(), careContext.getVersion_CareContext());
		tempVo.setID_CareContext(careContext.getID_CareContext());
		tempVo.setBedNumber(careContext.getBedNumber());
		tempVo.setCareContextHistory(careContext.getCareContextHistory());
		tempVo.setContext(careContext.getContext());
		tempVo.setCurrentStatus(careContext.getCurrentStatus());
		tempVo.setDischargeReason(careContext.getDischargeReason());
		tempVo.setEndDateTime(careContext.getEndDateTime());
		tempVo.setEpisodeOfCare(careContext.getEpisodeOfCare());
		tempVo.setEstimatedDischargeDate(careContext.getEstimatedDischargeDate());
		tempVo.setIsRIE(careContext.getIsRIE());
		tempVo.setLocationType(careContext.getLocationType());
		tempVo.setOrderingHospital(careContext.getOrderingHospital());
		tempVo.setPasEvent(careContext.getPasEvent());
		tempVo.setResponsibleHCP(careContext.getResponsibleHCP());
		tempVo.setStartDateTime(careContext.getStartDateTime());
		tempVo.setStatusHistory(careContext.getStatusHistory());
		tempVo.setClinicalContacts(new ClinicalContactShortVoCollection());
		return tempVo;

	}

	// wdev-13335
	public CareSpellVo getCareSpellById(CareSpellRefVo careSpellRef)
	{
		if (careSpellRef == null)
			return null;
		DomainFactory factory = getDomainFactory();
		return CareSpellVoAssembler.create((CareSpell) factory.getDomainObject(CareSpell.class, careSpellRef.getID_CareSpell()));
	}

	// wdev-13335
	public EpisodeofCareShortVo getEpisodeOfCareShort(EpisodeOfCareRefVo episodeRef)
	{
		if (episodeRef == null)
			return null;
		DomainFactory factory = getDomainFactory();
		return EpisodeofCareShortVoAssembler.create((EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, episodeRef.getID_EpisodeOfCare()));
	}

	public CareContextVo saveCareContext(CareContextVo careContext) throws StaleObjectException
	{
		CareSpellDialog careSpellDialog = (CareSpellDialog) getDomainImpl(CareSpellDialogImpl.class);
		return careSpellDialog.saveCareContext(careContext);
	}

	public ClinicalContactShortVo saveClinicalContact(ClinicalContactShortVo clinicalContact) throws StaleObjectException
	{
		if (clinicalContact == null || !clinicalContact.isValidated())
			throw new CodingRuntimeException("ClinicalContact is null or has not been validated");
		DomainFactory factory = getDomainFactory();

		ClinicalContact doClinicalContact = ClinicalContactShortVoAssembler.extractClinicalContact(factory, clinicalContact);

		// WDEV-10231 - add any new status record to history
		if (doClinicalContact != null && doClinicalContact.getCurrentStatus().getId() == null)
			doClinicalContact.getStatusHistory().add(doClinicalContact.getCurrentStatus());

		factory.save(doClinicalContact);
		return ClinicalContactShortVoAssembler.create(doClinicalContact);
	}

	// wdev-13896
	public CareContextRefVoCollection getCareContextThatHasHistoryId(CareContextRefVoCollection refVoColl)
	{
		if (refVoColl == null || refVoColl.size() == 0)
			return null;
		StringBuffer hqlId = new StringBuffer();
		for (int i = 0; i < refVoColl.size(); i++)
		{
			if (i > 0)
				hqlId.append(",");

			hqlId.append(refVoColl.get(i).getID_CareContext());
		}
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" select distinct c1_1.id from CareContext as c1_1 join c1_1.careContextHistory as c2_1 where (c1_1.id in (" + hqlId + "  ))  ");

		List listCareContextId = factory.find(hql.toString());
		if (listCareContextId != null && listCareContextId.size() > 0)
		{
			CareContextRefVoCollection temVoRefColl = new CareContextRefVoCollection();
			for (int j = 0; j < listCareContextId.size(); j++)
			{
				CareContextRefVo tempVo = new CareContextRefVo();
				tempVo.setID_CareContext((Integer) listCareContextId.get(j));
				temVoRefColl.add(tempVo);
			}
			return temVoRefColl;

		}
		return null;
	}

	// wdev-13896
	public EpisodeOfCareRefVoCollection getEpisodeOfCareIdThatHasHistory(EpisodeOfCareRefVoCollection refVoColl)
	{
		if (refVoColl == null || refVoColl.size() == 0)
			return null;
		StringBuffer hqlId = new StringBuffer();
		for (int i = 0; i < refVoColl.size(); i++)
		{
			if (i > 0)
				hqlId.append(",");

			hqlId.append(refVoColl.get(i).getID_EpisodeOfCare());
		}
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" select distinct e1_1.id from EpisodeOfCare as e1_1 join e1_1.episodeOfCareHistory as e2_1 where (e1_1.id in ( " + hqlId + "  ))  ");

		List listEpisodeOfCareId = factory.find(hql.toString());
		if (listEpisodeOfCareId != null && listEpisodeOfCareId.size() > 0)
		{
			EpisodeOfCareRefVoCollection temVoRefColl = new EpisodeOfCareRefVoCollection();
			for (int j = 0; j < listEpisodeOfCareId.size(); j++)
			{
				EpisodeOfCareRefVo tempVo = new EpisodeOfCareRefVo();
				tempVo.setID_EpisodeOfCare((Integer) listEpisodeOfCareId.get(j));
				temVoRefColl.add(tempVo);
			}
			return temVoRefColl;

		}
		return null;
	}

	// wdev-13896
	public EpisodeOfCareSmallVo getEpisodeOfCareWithHistory(EpisodeOfCareRefVo refVo)
	{
		if (refVo == null)
			return null;
		DomainFactory factory = getDomainFactory();
		return EpisodeOfCareSmallVoAssembler.create((EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, refVo.getID_EpisodeOfCare()));
	}

	// wdev-13896
	public CareContextSmallVo getCareContextWithHistory(CareContextRefVo refVo)
	{
		if (refVo == null)
			return null;
		DomainFactory factory = getDomainFactory();
		return CareContextSmallVoAssembler.create((CareContext) factory.getDomainObject(CareContext.class, refVo.getID_CareContext()));
	}

	// wdev-13977
	public CareSpellVo saveCareSpell(CareSpellVo careSpell) throws StaleObjectException, UniqueKeyViolationException
	{
		CareSpellDialog careSpellDialog = (CareSpellDialog) getDomainImpl(CareSpellDialogImpl.class);
		return careSpellDialog.saveCareSpell(careSpell);
	}

	// wdev-13977
	public EpisodeofCareVo saveEpisodeOfCare(EpisodeofCareVo episodeOfCare) throws StaleObjectException, UniqueKeyViolationException
	{

		if (!episodeOfCare.isValidated())
			throw new CodingRuntimeException("EpisodeOfCare has not been validated!");

		DomainFactory factory = getDomainFactory();

		EpisodeOfCare domEpis = EpisodeofCareVoAssembler.extractEpisodeOfCare(factory, episodeOfCare);
		factory.save(domEpis);
		return EpisodeofCareVoAssembler.create(domEpis);
	}

	// wdev-13977
	public CareContextVo getCareContextById(CareContextRefVo careRef)
	{
		if (careRef == null)
			return null;
		DomainFactory factory = getDomainFactory();
		CareContext doCareContext = (CareContext) factory.getDomainObject(CareContext.class, careRef.getID_CareContext());
		return CareContextVoAssembler.create(doCareContext);
	}

	// wdev-13977
	public EpisodeofCareVo getEpisodeOfCare(EpisodeOfCareRefVo episodeRef)
	{
		if (episodeRef == null)
			return null;
		DomainFactory factory = getDomainFactory();
		EpisodeOfCare doEpisodeOfCare = (EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, episodeRef.getID_EpisodeOfCare());
		return EpisodeofCareVoAssembler.create(doEpisodeOfCare);
	}

	public String getPIDDiagnosisInfo(CareContextRefVo careContextRefVo, EpisodeOfCareRefVo episodeRefVo, CareSpellRefVo careSpellRefVo)
	{
		if (careContextRefVo == null && episodeRefVo == null && careSpellRefVo == null)
			return "";

		String hqlSB = "select new ims.core.helper.PIDBarOncologyManualClass( " + "p2_1.id, p2_1.diagnosisDescription, e1_1.startDate, e1_1.endDate, m1_1.name.surname, m1_1.name.forename, l1_1.text )" + "from PatientDiagnosis as p2_1 left join p2_1.episodeOfCare as e1_1 left join e1_1.responsibleHCP as h1_1 left join h1_1.mos as m1_1 " + "left join m1_1.name.title as l1_1 left join p2_1.primaryForCareSpells as c2_1 where ( c2_1.isActive = :ACTIVE and c2_1.isRIE is null and c2_1.diagnosis.isRIE is null";

		List lstRecs = null;
		DomainFactory factory = getDomainFactory();
		if (careContextRefVo != null)
		{
			String hqlCC = hqlSB;
			hqlCC += " and c2_1.careContext.id = :careContextId )";
			hqlCC += " order by p2_1.diagnosedDate desc";
			lstRecs = factory.find(hqlCC.toString(), new String[] { "careContextId", "ACTIVE" }, new Object[] { careContextRefVo.getID_CareContext(), Boolean.TRUE });

			if (lstRecs.size() == 0 && episodeRefVo != null)
			{
				String hqlEP = hqlSB;

				hqlEP += "  and c2_1.episodeOfCare.id = :episodeID )";
				hqlEP += " order by p2_1.diagnosedDate desc";
				lstRecs = factory.find(hqlEP.toString(), new String[] { "episodeID", "ACTIVE" }, new Object[] { episodeRefVo.getID_EpisodeOfCare(), Boolean.TRUE });
			}
			if (lstRecs.size() == 0 && careSpellRefVo != null)
			{
				String hqlCS = hqlSB;

				hqlCS += "  and c2_1.episodeOfCare.careSpell.id = :carespID )";
				hqlCS += " order by p2_1.diagnosedDate desc";
				lstRecs = factory.find(hqlCS.toString(), new String[] { "carespID", "ACTIVE" }, new Object[] { careSpellRefVo.getID_CareSpell(), Boolean.TRUE });
			}
		}
		else if (careContextRefVo == null && episodeRefVo != null)
		{
			String hqlEP = hqlSB;

			hqlEP += "  and c2_1.episodeOfCare.id = :episodeID )"; // wdev-14053
			hqlEP += " order by p2_1.diagnosedDate desc";
			lstRecs = factory.find(hqlEP.toString(), new String[] { "episodeID", "ACTIVE" }, new Object[] { episodeRefVo.getID_EpisodeOfCare(), Boolean.TRUE });

			if (lstRecs.size() == 0 && careSpellRefVo != null)
			{
				String hqlCS = hqlSB;

				hqlCS += "  and c2_1.episodeOfCare.careSpell.id = :carespID )";
				hqlCS += " order by p2_1.diagnosedDate desc";
				lstRecs = factory.find(hqlCS.toString(), new String[] { "carespID", "ACTIVE" }, new Object[] { careSpellRefVo.getID_CareSpell(), Boolean.TRUE });
			}
		}
		else if (careContextRefVo == null && episodeRefVo == null && careSpellRefVo != null)
		{
			String hqlCS = hqlSB;

			hqlCS += "  and c2_1.episodeOfCare.careSpell.id = :carespID )"; // wdev-14053
			hqlCS += " order by p2_1.diagnosedDate desc";
			lstRecs = factory.find(hqlCS.toString(), new String[] { "carespID", "ACTIVE" }, new Object[] { careSpellRefVo.getID_CareSpell(), Boolean.TRUE });
		}

		PIDBarOncologyManualVo voItem = null;
		PIDBarOncologyManualVoCollection voColl = new PIDBarOncologyManualVoCollection();
		for (int i = 0; lstRecs != null && i < lstRecs.size(); i++)
		{
			PIDBarOncologyManualClass doPID = (PIDBarOncologyManualClass) lstRecs.get(i);
			voItem = new PIDBarOncologyManualVo();

			voItem.setDiagnosisDesc(doPID.getDiagnosisDesc());
			voItem.setStartDate(doPID.getStartdate() != null ? new ims.framework.utils.Date(doPID.getStartdate()) : null);
			voItem.setEndDate(doPID.getEnddate() != null ? new ims.framework.utils.Date(doPID.getEnddate()) : null);
			voItem.setHCPName(doPID.getHcpName());

			voColl.add(voItem);
		}

		if (voColl == null)
			return "";

		StringBuffer sb = new StringBuffer();

		if (voColl.size() > 1)
		{
			sb.append(" : ");
			sb.append(" > 1 linked primary diagnosis");
		}
		else if (voColl != null && voColl.size() == 1)
		{
			sb.append(" : ");
			if (voColl.get(0).getStartDateIsNotNull())
			{
				sb.append(voColl.get(0).getStartDate().toString());
				sb.append(" - ");
			}
			if (voColl.get(0).getEndDateIsNotNull())
			{
				sb.append(voColl.get(0).getEndDate().toString());
				sb.append(", ");
			}
			if (voColl.get(0).getDiagnosisDescIsNotNull())
			{
				sb.append(voColl.get(0).getDiagnosisDesc());
				sb.append(", ");
			}
			if (voColl.get(0).getHCPNameIsNotNull())
				sb.append(voColl.get(0).getHCPName());
		}
		return sb.toString();

	}

	public Boolean hasActiveClinicalContacts(CareContextRefVo careContext)
	{
		if (careContext == null || careContext.getID_CareContext() == null)
			return false;

		StringBuilder query = new StringBuilder();

		query.append("SELECT COUNT(clin.id) ");
		query.append(" FROM ClinicalContact AS clin LEFT JOIN clin.careContext AS context LEFT JOIN clin.currentStatus AS curStatus LEFT JOIN curStatus.status AS status ");
		query.append(" WHERE context.id = :CARE_CONTEXT_ID AND status.id = :OPEN_STATUS");

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("CARE_CONTEXT_ID");
		paramValues.add(careContext.getID_CareContext());
		paramNames.add("OPEN_STATUS");
		paramValues.add(ClinicalContactStatus.OPEN.getID());

		long count = getDomainFactory().countWithHQL(query.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray(new Object[paramValues.size()]));

		if (count > 0)
			return true;

		return false;
	}

	public Boolean hasActiveCareContexts(EpisodeOfCareRefVo episodeOfCare)
	{
		if (episodeOfCare == null || episodeOfCare.getID_EpisodeOfCare() == null)
			return false;

		StringBuilder query = new StringBuilder();

		query.append("SELECT COUNT(context.id) ");
		query.append(" FROM CareContext AS context LEFT JOIN context.episodeOfCare AS episode LEFT JOIN context.currentStatus AS curStatus LEFT JOIN curStatus.status AS status ");
		query.append(" WHERE episode.id = :EPISODE_CARE_ID AND status.id = :OPEN_STATUS");

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("EPISODE_CARE_ID");
		paramValues.add(episodeOfCare.getID_EpisodeOfCare());
		paramNames.add("OPEN_STATUS");
		paramValues.add(CareContextStatus.OPEN.getID());

		long count = getDomainFactory().countWithHQL(query.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray(new Object[paramValues.size()]));

		if (count > 0)
			return true;

		return false;
	}

	public Boolean hasActiveEpisodeOfCare(CareSpellRefVo careSpell)
	{
		if (careSpell == null || careSpell.getID_CareSpell() == null)
			return false;

		StringBuilder query = new StringBuilder();

		query.append("SELECT COUNT(episode.id) ");
		query.append(" FROM EpisodeOfCare AS episode LEFT JOIN episode.careSpell AS careSpell LEFT JOIN episode.currentStatus AS curStatus LEFT JOIN curStatus.status AS status ");
		query.append(" WHERE careSpell.id = :CARE_SPELL_ID AND status.id = :OPEN_STATUS");

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("CARE_SPELL_ID");
		paramValues.add(careSpell.getID_CareSpell());
		paramNames.add("OPEN_STATUS");
		paramValues.add(EpisodeOfCareStatus.OPEN.getID());

		long count = getDomainFactory().countWithHQL(query.toString(), paramNames.toArray(new String[paramNames.size()]), paramValues.toArray(new Object[paramValues.size()]));

		if (count > 0)
			return true;

		return false;
	}
}

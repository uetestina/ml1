//#############################################################################
//#                                                                           #
//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #
//#  this program.  Users of this software do so entirely at their own risk.  #
//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #
//#  software that it builds, deploys and maintains.                          #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3324.28499)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;


import ims.admin.domain.AppointmentOutcomeConfig;
import ims.admin.domain.impl.AppointmentOutcomeConfigImpl;
import ims.admin.vo.AppointmentOutcomeConfigVo;
import ims.admin.vo.AppointmentOutcomeConfigVoCollection;
import ims.admin.vo.domain.AppointmentOutcomeConfigVoAssembler;
import ims.RefMan.domain.objects.CATSReferralStatus;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.LinkedCatsReferral;
import ims.RefMan.domain.objects.OrderInvAppt;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.TCIForPatientElectiveList;
import ims.RefMan.vo.CancerTypeConfigVo;
import ims.RefMan.vo.CancerTypeItemConfigVo;
import ims.RefMan.vo.CareSpellForRequestServiceShortVo;
import ims.RefMan.vo.CatsReferralForRequestServiceVo;
import ims.RefMan.vo.CatsReferralForSessionManagementVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralMasterVo;
import ims.RefMan.vo.CatsReferralParentVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralStatusLiteVo;
import ims.RefMan.vo.CatsReferralStatusVo;
import ims.RefMan.vo.ContractServiceLocationsConfigVo;
import ims.RefMan.vo.EpisodeOfCareForRequestServiceShortVoCollection;
import ims.RefMan.vo.InterProviderTransferOutRefVo;
import ims.RefMan.vo.InterProviderTransferOutVo;
import ims.RefMan.vo.LinkedCatsReferralForOutcomeVo;
import ims.RefMan.vo.LinkedCatsReferralForOutcomeVoCollection;
import ims.RefMan.vo.LinkedCatsReferralRefVo;
import ims.RefMan.vo.LinkedCatsReferralRefVoCollection;
import ims.RefMan.vo.LinkedCatsReferral_RIE_OutcomeVo;
import ims.RefMan.vo.PathwayClockForTransferOfCareVo;
import ims.RefMan.vo.PathwayClockForTransferOfCareVoCollection;
import ims.RefMan.vo.PatientDiagnosisForAppointmentOutcomeVo;
import ims.RefMan.vo.PatientElectiveListAddLaterVo;
import ims.RefMan.vo.PatientElectiveListDetailsToSaveVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.PatientElectiveList_RIE_AppointmentOutcomeVo;
import ims.RefMan.vo.PatientEventForTransferOfCareVo;
import ims.RefMan.vo.PatientEventForTransferOfCareVoCollection;
import ims.RefMan.vo.PatientJournayTargetForTransferOfCareVo;
import ims.RefMan.vo.PatientJournayTargetForTransferOfCareVoCollection;
import ims.RefMan.vo.PatientJourneyBreachForTransferOfCareVo;
import ims.RefMan.vo.PatientJourneyBreachForTransferOfCareVoCollection;
import ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVo;
import ims.RefMan.vo.PatientJourneyCommentForTransferOfCareVoCollection;
import ims.RefMan.vo.PatientPathwayJourneyForTransferOfCareVo;
import ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo;
import ims.RefMan.vo.ReferralForTransferOfCareVo;
import ims.RefMan.vo.domain.CancerTypeConfigVoAssembler;
import ims.RefMan.vo.domain.CareSpellForRequestServiceShortVoAssembler;
import ims.RefMan.vo.domain.CatsReferralForRequestServiceVoAssembler;
import ims.RefMan.vo.domain.CatsReferralForSessionManagementVoAssembler;
import ims.RefMan.vo.domain.CatsReferralListVoAssembler;
import ims.RefMan.vo.domain.CatsReferralMasterVoAssembler;
import ims.RefMan.vo.domain.CatsReferralParentVoAssembler;
import ims.RefMan.vo.domain.ContractServiceLocationsConfigVoAssembler;
import ims.RefMan.vo.domain.LinkedCatsReferralForOutcomeVoAssembler;
import ims.RefMan.vo.domain.LinkedCatsReferral_RIE_OutcomeVoAssembler;
import ims.RefMan.vo.domain.PatientDiagnosisForAppointmentOutcomeVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListAddLaterVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveList_RIE_AppointmentOutcomeVoAssembler;
import ims.RefMan.vo.domain.PatientEventForTransferOfCareVoAssembler;
import ims.RefMan.vo.domain.PatientPathwayJourneyForTransferOfCareVoAssembler;
import ims.RefMan.vo.domain.PatientProcedureForAppointmentOutcomeVoAssembler;
import ims.RefMan.vo.lookups.CancerType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.ReferralRelationType;
import ims.RefMan.vo.lookups.ReferralUrgency;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.CareSpell;
import ims.core.admin.domain.objects.Referral;
import ims.core.admin.vo.CareSpellRefVo;
import ims.core.admin.vo.ReferralRefVo;
import ims.core.clinical.domain.objects.NonUniqueTaxonomyMap;
import ims.core.clinical.domain.objects.PatientDiagnosis;
import ims.core.clinical.domain.objects.PatientProcedure;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.clinical.vo.PatientProcedureRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.configuration.domain.objects.ContractServiceLocationsConfig;
import ims.core.configuration.vo.ContractConfigRefVo;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.Patient;
import ims.core.vo.RecordingUserInformationVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.domain.PatientAssembler;
import ims.core.vo.lookups.PollStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.ReferralType;
import ims.core.vo.lookups.SourceOfReferral;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.TaxonomyType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.lookups.LookupInstance;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.domain.AppFormForTrackingVoAssembler;
import ims.framework.enumerations.SortOrder;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.ocrr.configuration.domain.objects.Investigation;
import ims.ocrr.orderingresults.domain.objects.OcsOrderSession;
import ims.ocrr.orderingresults.domain.objects.OrderInvestigation;
import ims.ocrr.orderingresults.domain.objects.OrderedInvestigationStatus;
import ims.ocrr.orderingresults.vo.OrderInvestigationRefVo;
import ims.ocrr.vo.lookups.AuthorisationOrderStatus;
import ims.ocrr.vo.lookups.OcsDisplayFlag;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.pathways.configuration.domain.objects.RTTStatusPoint;
import ims.pathways.configuration.vo.RTTStatusPointRefVo;
import ims.pathways.configuration.vo.TargetRefVo;
import ims.pathways.domain.HL7PathwayIf;
import ims.pathways.domain.impl.HL7PathwayIfImpl;
import ims.pathways.domain.objects.PathwayClock;
import ims.pathways.domain.objects.PathwayRTTStatus;
import ims.pathways.domain.objects.PathwaysRTTClockImpact;
import ims.pathways.domain.objects.PatientEvent;
import ims.pathways.domain.objects.PatientJourneyStatus;
import ims.pathways.domain.objects.PatientPathwayJourney;
import ims.pathways.domain.objects.RTTStatusEventMap;
import ims.pathways.vo.EventLiteVo;
import ims.pathways.vo.JourneyTargetStatusVo;
import ims.pathways.vo.JourneyTargetStatusVoCollection;
import ims.pathways.vo.PathwayClockVo;
import ims.pathways.vo.PathwayClockVoCollection;
import ims.pathways.vo.PathwayHistoryVo;
import ims.pathways.vo.PathwayHistoryVoCollection;
import ims.pathways.vo.PathwayRTTStatusRefVo;
import ims.pathways.vo.PathwayRTTStatusVo;
import ims.pathways.vo.PathwayRTTStatusVoCollection;
import ims.pathways.vo.PatientEventVo;
import ims.pathways.vo.PatientJourneyStatusVo;
import ims.pathways.vo.PatientJourneyStatusVoCollection;
import ims.pathways.vo.PatientJourneyVo;
import ims.pathways.vo.PatientPathwayJourneyRefVo;
import ims.pathways.vo.PauseDetailsVo;
import ims.pathways.vo.PauseDetailsVoCollection;
import ims.pathways.vo.RTTStatusEventMapVo;
import ims.pathways.vo.TargetReadjustmentVo;
import ims.pathways.vo.TargetReadjustmentVoCollection;
import ims.pathways.vo.domain.PathwayRTTStatusVoAssembler;
import ims.pathways.vo.domain.PatientJourneyVoAssembler;
import ims.pathways.vo.domain.RTTStatusEventMapVoAssembler;
import ims.pathways.vo.domain.RTTStatusPointLiteVoAssembler;
import ims.pathways.vo.lookups.EventStatus;
import ims.pathways.vo.lookups.JourneyStatus;
import ims.pathways.vo.lookups.PatientTargetStatus;
import ims.pathways.vo.lookups.RTTClockImpactSource;
import ims.pathways.vo.lookups.RTTClockState;
import ims.scheduling.domain.BookAppointment;
import ims.scheduling.domain.OCSExternalEvents;
import ims.scheduling.domain.base.impl.BaseAppointmentOutcomeDialogImpl;
import ims.scheduling.domain.objects.AppointmentOutcomeAction;
import ims.scheduling.domain.objects.Appointment_Status;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.FutureAppointmentDetails;
import ims.scheduling.helper.CABRequests;
import ims.scheduling.helper.IPatientElectiveList;
import ims.scheduling.helper.IRecordRTTClockImpact;
import ims.scheduling.helper.IRequestForService;
import ims.scheduling.helper.IUndoEndOfTreatment;
import ims.scheduling.vo.AppointmentOutcomeActionRefVo;
import ims.scheduling.vo.AppointmentOutcomeActionVo;
import ims.scheduling.vo.AppointmentOutcomeAction_RIE_OutcomeVo;
import ims.scheduling.vo.Appointment_StatusForAppointmentOutcomeVo;
import ims.scheduling.vo.Appointment_StatusForAppointmentOutcomeVoCollection;
import ims.scheduling.vo.BookingAppointmentOutcomeVo;
import ims.scheduling.vo.BookingAppointment_RIE_OutcomeVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.FutureAppointmentDetailsRefVo;
import ims.scheduling.vo.FutureAppointmentDetailsVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.domain.AppointmentOutcomeActionVoAssembler;
import ims.scheduling.vo.domain.BookingAppointmentOutcomeVoAssembler;
import ims.scheduling.vo.domain.BookingAppointment_RIE_OutcomeVoAssembler;
import ims.scheduling.vo.domain.Booking_AppointmentVoAssembler;
import ims.scheduling.vo.lookups.AppointmentAction;
import ims.scheduling.vo.lookups.ApptOutcome;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.hibernate.StaleStateException;
import org.hibernate.exception.LockAcquisitionException;


public class AppointmentOutcomeDialogImpl extends BaseAppointmentOutcomeDialogImpl
{
	private static final long serialVersionUID = 1L;
	
	public static final Integer RIE_OUTCOME_SUCCESS = 0;
	public static final Integer RIE_OUTCOME_SUCCESS_NOT_LAST_RTT_STATUS = 1;
	
	public static final Integer UNDO_OUTCOME_SUCCESS = 0;
	public static final Integer UNDO_OUTCOME_SUCCESS_NOT_LAST_IMPACT = 1;
	
	private static final int GP_SOURCE_OF_REFERRAL_NAT_CODE = 10;
	private static final int OTHER_SOURCE_OF_REFERRAL_NAT_CODE = 12;
	
	private static final Integer RTT_CODE_ACTIVITY_NOT_APPLICABLE_RTT = 98;
	

	public BookingAppointmentOutcomeVo getBookingAppointment(Booking_AppointmentRefVo appointment)
	{
		// Check the 'appointment' parameter
		if (appointment == null || appointment.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("INVALID PARAMETER VALUE - Parameter 'appointment' is null or ID not provided in method 'getBookingAppointment()'.");
		
		BookingAppointmentOutcomeVo appointmentOutcome = BookingAppointmentOutcomeVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appointment));
		
		
		// If the Appointment Outcome doesn't have Outcome Actions recorded, return it as is
		if (appointmentOutcome.getOutcomeActions() == null)
			return appointmentOutcome;
		
		
		for (AppointmentOutcomeActionVo outcomeAction : appointmentOutcome.getOutcomeActions())
		{
			if (AppointmentAction.WAITING_LIST_ACTION.equals(outcomeAction.getAppointmentAction())
					|| AppointmentAction.BOOKED_LIST_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				PatientElectiveListAddLaterVo patientElectiveList = PatientElectiveListAddLaterVoAssembler.create(getPatientElectiveListCreatedByOutcomeAction(appointmentOutcome, outcomeAction));
				outcomeAction.setWaitingListAction(patientElectiveList);
			}
			
			else if (AppointmentAction.PLANNED_LIST_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				PatientElectiveListAddLaterVo patientElectiveList = PatientElectiveListAddLaterVoAssembler.create(getPatientElectiveListCreatedByOutcomeAction(appointmentOutcome, outcomeAction));
				outcomeAction.setPlannedListAction(patientElectiveList);
			}
			
			else if (AppointmentAction.REQUEST_FOR_SERVICE_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				StringBuilder query = new StringBuilder("SELECT linkedReferral FROM LinkedCatsReferral AS linkedReferral ");
				query.append(" LEFT JOIN linkedReferral.referral AS referral LEFT JOIN referral.creatingAppointment AS creatingAppointment ");
				query.append(" LEFT JOIN linkedReferral.referralRelationType AS relationType ");
				
				query.append(" WHERE ");
				
				ArrayList<String> paramNames = new ArrayList<String>();
				ArrayList<Object> paramValues = new ArrayList<Object>();
				
				query.append(" relationType.id = :RELATIONSHIP AND creatingAppointment.id = :APPOINTMENT ");
				
				paramNames.add("RELATIONSHIP");			paramValues.add(ReferralRelationType.REQUEST_FOR_SERVICE.getID());
				paramNames.add("APPOINTMENT");			paramValues.add(appointmentOutcome.getID_Booking_Appointment());
				
				
				LinkedCatsReferralForOutcomeVoCollection requestsForService = LinkedCatsReferralForOutcomeVoAssembler.createLinkedCatsReferralForOutcomeVoCollectionFromLinkedCatsReferral(getDomainFactory().find(query.toString(), paramNames, paramValues));
				outcomeAction.setRequestsForService(requestsForService);
			}
			
			if (AppointmentAction.TRANSFER_OF_CARE.equals(outcomeAction.getAppointmentAction()))
			{
				StringBuilder query = new StringBuilder("SELECT c1_1 FROM ");
				query.append(" CatsReferral as c1_1 left join c1_1.appointments as b1_1");
				query.append(" WHERE( (c1_1.isRIE = 0 OR c1_1.isRIE is null) and b1_1.id = :bookingApptID ) ");
				
				ArrayList<String> paramNames = new ArrayList<String>();
				ArrayList<Object> paramValues = new ArrayList<Object>();
				
				paramNames.add("bookingApptID");		paramValues.add(appointment.getID_Booking_Appointment());
					
				
				CatsReferral catsReferral = (CatsReferral) getDomainFactory().findFirst(query.toString(), paramNames, paramValues);
				
				CatsReferralForRequestServiceVo parentCats = CatsReferralForRequestServiceVoAssembler.create(catsReferral);
														
				CatsReferralForRequestServiceVo catsReferralChild = getChildReferralForTransferOfCareVo(parentCats);
				if (catsReferral != null)
				{
					outcomeAction.setTransferOfCare(catsReferralChild);
				}
			}
			
			// TODO: Code here for other Outcome Actions
		}
		
		return appointmentOutcome;

//		if (appointmentOutcome.getOutcomeActions() != null)
//		{
//			for (AppointmentOutcomeActionVo outcomeAction : appointmentOutcome.getOutcomeActions())
//			{
//				//wdev-19930
//				if( AppointmentAction.REQUEST_FOR_SERVICE_ACTION.equals(outcomeAction.getAppointmentAction()) )
//				{
//					
//					StringBuilder query = new StringBuilder("SELECT c1_1 FROM ");
//					query.append(" LinkedCatsReferral as l1_1 left join l1_1.referral as c1_1 left join c1_1.creatingAppointment as b1_1 left join l1_1.referralRelationType as l2_1 ");
//					query.append(" WHERE( (c1_1.isRIE = 0 OR c1_1.isRIE is null) and c1_1.creatingAppointment.id = :bookingApptID and l2_1.id = :ActionType ) ");
//					
//					ArrayList<String> paramNames = new ArrayList<String>();
//					ArrayList<Object> paramValues = new ArrayList<Object>();
//					
//					paramNames.add("bookingApptID");		paramValues.add(appointment.getID_Booking_Appointment());
//					paramNames.add("ActionType");			paramValues.add(ReferralRelationType.REQUEST_FOR_SERVICE.getID());
//						
//					
//					CatsReferral catsReferral = (CatsReferral) getDomainFactory().findFirst(query.toString(), paramNames, paramValues);
//					if( catsReferral != null)
//					{
//						// Check for Elective List added Now
//						//if (OutcomeAction.DONE_NOW.equals(outcomeAction.getOutcomeOfAction()))
//						//{
//							outcomeAction.setChildCatsReferral(CatsReferralForRequestServiceVoAssembler.create(catsReferral));
//						//}
//					}
//
//				}
//				//wdev-19933
//				if( AppointmentAction.TRANSFER_OF_CARE.equals(outcomeAction.getAppointmentAction()) )
//				{
//										
//					StringBuilder query = new StringBuilder("SELECT c1_1 FROM ");
//					query.append(" CatsReferral as c1_1 left join c1_1.appointments as b1_1");
//					query.append(" WHERE( (c1_1.isRIE = 0 OR c1_1.isRIE is null) and b1_1.id = :bookingApptID ) ");
//					
//					ArrayList<String> paramNames = new ArrayList<String>();
//					ArrayList<Object> paramValues = new ArrayList<Object>();
//					
//					paramNames.add("bookingApptID");		paramValues.add(appointment.getID_Booking_Appointment());
//					//paramNames.add("ActionType");			paramValues.add(ReferralRelationType.REQUEST_FOR_SERVICE.getID());
//						
//					
//					CatsReferral catsReferral = (CatsReferral) getDomainFactory().findFirst(query.toString(), paramNames, paramValues);
//					
//					CatsReferralForRequestServiceVo parentCats = CatsReferralForRequestServiceVoAssembler.create(catsReferral);
//															
//					CatsReferralForRequestServiceVo catsReferralChild = getChildReferralForTransferOfCareVo(parentCats);
//					if( catsReferral != null)
//					{
//						// Check for Elective List added Now
//						//if (OutcomeAction.DONE_NOW.equals(outcomeAction.getOutcomeOfAction()))
//						//{
//							//outcomeAction.setChildCatsReferralForTransferOfCare(CatsReferralForRequestServiceVoAssembler.create(catsReferral));
//							outcomeAction.setChildCatsReferralForTransferOfCare(catsReferralChild);
//					//	}
//					}
//				}
//				//-----------
//			}
//			
//			
//			
//		}
//		
//		
//		return appointmentOutcome;
	}

	//WDEV-18083
	public Boolean thereAreActivePatientElectiveListsForCurrentCatsReferral(CatsReferralRefVo catsRef)
	{
		if (catsRef == null || catsRef.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsRef is null");
		
		StringBuilder hqlBuilder = new StringBuilder("select pel from PatientElectiveList as pel left join pel.referral as cats left join pel.electiveListStatus as els left join els.electiveListStatus as status where cats.id=:CATS_ID and (status is null or status.id <> :STATUS)");
		List <?> list = getDomainFactory().find(hqlBuilder.toString(),new String[]{"CATS_ID","STATUS"},new Object[]{catsRef.getID_CatsReferral(),WaitingListStatus.REMOVED.getID()} );
		
		if (list == null || list.size() == 0)
			return false;
		
		return true;
	}


	public Boolean isCurrentPathwayClockActive(Booking_AppointmentRefVo bookAppointment)
	{
		if(bookAppointment == null || bookAppointment.getID_Booking_Appointment() == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		String query = "select catsClock from CatsReferral as cats left join cats.appointments as appts left join cats.journey as catsJourney left join catsJourney.currentClock as catsClock where appts.id = :BookAppointment";
		List<?> currentClockList = factory.find(query, new String[] {"BookAppointment"}, new Object[] {bookAppointment.getID_Booking_Appointment()});
		
		if(currentClockList == null || currentClockList.size() == 0 || currentClockList.get(0) == null)
			return false;
		
		if(currentClockList.get(0) instanceof PathwayClock)
		{
			PathwayClock currentClock = (PathwayClock) currentClockList.get(0);
			
			if(currentClock.getStopDate() != null)
				return false;
		}
		
		return true;
	}
	
	
	//wdev-19933
	private ReferralForTransferOfCareVo getReferralForPathwatJourney(ReferralForTransferOfCareVo record)
	{
		if( record == null)
			return null;
		ReferralForTransferOfCareVo tempReferral = new ReferralForTransferOfCareVo();
		tempReferral.setAuthoringCP(record.getAuthoringCP());
		tempReferral.setAuthoringDateTime(record.getAuthoringDateTime());
		tempReferral.setReferralType(record.getReferralType());
		tempReferral.setDetails(record.getDetails());
		//tempReferral.setClinicalContact(record.getClinicalContact());
		//tempReferral.setCareContext(record.getCareContext());
		tempReferral.setExtReferralKey(record.getExtReferralKey());
		tempReferral.setPatient(record.getPatient());
		tempReferral.setReferralReceivedDate(record.getReferralReceivedDate());
		tempReferral.setOriginalReferralDate(record.getOriginalReferralDate());
		tempReferral.setIsActive(record.getIsActive());
		tempReferral.setFirstApptDate(record.getFirstApptDate());
		tempReferral.setSourceOfReferral(record.getSourceOfReferral());
		tempReferral.setReferringGP(record.getReferringGP());
		tempReferral.setReferringClinician(record.getReferringClinician());
		tempReferral.setReferralPriority(record.getReferralPriority());
		tempReferral.setReferredTo(record.getReferredTo());
		tempReferral.setSpecialty(record.getSpecialty());
		tempReferral.setReferralDetails(record.getReferralDetails());
		tempReferral.setDateOfReferral(record.getDateOfReferral());
		tempReferral.setReferralLocation(record.getReferralLocation());
		tempReferral.setClockId(record.getClockId());
		
		return tempReferral;
	}
	
	private JourneyTargetStatusVoCollection getTargetStatus(JourneyTargetStatusVoCollection recColl)
	{
		if( recColl == null || recColl.size() == 0)
			return null;
		JourneyTargetStatusVoCollection tempColl = new JourneyTargetStatusVoCollection();
		
		for( JourneyTargetStatusVo targetStatus : recColl )
		{
			if( targetStatus != null )
			{
    			JourneyTargetStatusVo tempVo = new JourneyTargetStatusVo();
    			tempVo.setStatus(targetStatus.getStatus());
    			tempVo.setChangedBy(targetStatus.getChangedBy());
    			tempVo.setDate(targetStatus.getDate());
    			tempColl.add(tempVo);
			}
			
			
		}
		
		return tempColl;
		
	}
	
	private PauseDetailsVoCollection getPauseDetails(PauseDetailsVoCollection recordColl)
	{
		if( recordColl == null || recordColl.size() == 0)
			return null;
		PauseDetailsVoCollection tempColl = new PauseDetailsVoCollection();
		for( PauseDetailsVo pause : recordColl)
		{
			if( pause != null)
			{
				PauseDetailsVo tempPauseVo = new PauseDetailsVo();
				tempPauseVo.setPauseStart(pause.getPauseStart());
				tempPauseVo.setPauseStop(pause.getPauseStop());
				tempPauseVo.setActive(pause.getActive());
				tempColl.add(tempPauseVo);
			}
		}
		
		return tempColl;
	
	}
	private PathwayRTTStatusVoCollection getPathwayRttSTatus( PathwayRTTStatusVoCollection recordcoll)
	{
		if( recordcoll == null || recordcoll.size() == 0)
			return null;
		PathwayRTTStatusVoCollection tempColl = new PathwayRTTStatusVoCollection();
		for( PathwayRTTStatusVo rttStatus : recordcoll)
		{
			if( rttStatus != null)
			{
				PathwayRTTStatusVo tempStatusVo = new PathwayRTTStatusVo();
				tempStatusVo.setRTTStatus(rttStatus.getRTTStatus());
				tempStatusVo.setSetting(rttStatus.getSetting());
				tempStatusVo.setStatusBy(rttStatus.getStatusBy());
				tempStatusVo.setStatusDateTime(rttStatus.getStatusDateTime());
				tempColl.add(tempStatusVo);
			}
		}
		
		return tempColl;
	}	
	private PathwayClockForTransferOfCareVo getPathwayClock(PathwayClockForTransferOfCareVo record)
	{
		if (record == null)
			return null;
		
		PathwayClockForTransferOfCareVo tempVo = new PathwayClockForTransferOfCareVo();
		tempVo.setExtClockId(record.getExtClockId());
		tempVo.setExtClockName(record.getExtClockName());
		tempVo.setStartDate(record.getStartDate());
		tempVo.setStopDate(record.getStopDate());
		tempVo.setTargetClockEnd(record.getTargetClockEnd());
		
		if (record.getCurrentPause() == null)
			tempVo.setCurrentPause(null);
		else
		{
			PauseDetailsVo tempPauseVo = new PauseDetailsVo();
			tempPauseVo.setPauseStart(record.getCurrentPause().getPauseStart());
			tempPauseVo.setPauseStop(record.getCurrentPause().getPauseStop());
			tempPauseVo.setActive(record.getCurrentPause().getActive());
			tempVo.setCurrentPause(tempPauseVo);
			
		}
		tempVo.setPauseDetails(record.getPauseDetails());
		tempVo.setPauseDetails(getPauseDetails(record.getPauseDetails()));
		
		if (record.getCurrentRTTStatus() == null)
			tempVo.setCurrentRTTStatus(null);
		else
		{
			PathwayRTTStatusVo tempStatusVo = new PathwayRTTStatusVo();
			tempStatusVo.setRTTStatus(record.getCurrentRTTStatus().getRTTStatus());
			tempStatusVo.setSetting(record.getCurrentRTTStatus().getSetting());
			tempStatusVo.setStatusBy(record.getCurrentRTTStatus().getStatusBy());
			tempStatusVo.setStatusDateTime(record.getCurrentRTTStatus().getStatusDateTime());
			tempVo.setCurrentRTTStatus(tempStatusVo);
		}
		tempVo.setRTTStatusHistory(getPathwayRttSTatus(record.getRTTStatusHistory()));
		
		return tempVo;
	}
	
	private PatientEventForTransferOfCareVoCollection getEvents( /*PatientEventForTransferOfCareVoCollection recordcoll*/PatientJournayTargetForTransferOfCareVo pattarget, PatientJournayTargetForTransferOfCareVo newTargetTempVo, PatientPathwayJourneyForTransferOfCareVo patj,CatsReferralMasterVo parrentCatsReferral)
	{
		if( pattarget == null || pattarget.getEvents() == null || pattarget.getEvents().size() == 0)
			return null;
		PatientEventForTransferOfCareVoCollection tempColl = new PatientEventForTransferOfCareVoCollection();
		for( PatientEventForTransferOfCareVo eventP : pattarget.getEvents())
		{
			if( eventP != null )
			{
				
				
				
				PatientEventForTransferOfCareVo tempeventP = new PatientEventForTransferOfCareVo();
				tempeventP.setPatient(eventP.getPatient());
				tempeventP.setEvent(eventP.getEvent());
				tempeventP.setDescription(eventP.getDescription());
				tempeventP.setEventDateTime(eventP.getEventDateTime());
				tempeventP.setEventStatus(eventP.getEventStatus());
				tempeventP.setMessageId(eventP.getMessageId());
				tempeventP.setExternalEventId(eventP.getExternalEventId());
				tempeventP.setJourney(patj);
				tempeventP.setPatientTarget(newTargetTempVo);
				tempeventP.setExternalEvent(eventP.getExternalEvent());
				tempeventP.setRttExternalEvent(eventP.getRttExternalEvent());
				tempeventP.setClinicCode(eventP.getClinicCode());
				tempeventP.setSpecialty(eventP.getSpecialty());
				tempeventP.setConsultant(eventP.getConsultant());
				tempeventP.setScheduledDate(eventP.getScheduledDate());
				tempColl.add(tempeventP);
				
				
				//--
				if( parrentCatsReferral != null )
				{
					
					if( parrentCatsReferral.getJourneyIsNotNull() && parrentCatsReferral.getJourney().getLinkedCommentsIsNotNull())
					{
						for(int i = 0; i < parrentCatsReferral.getJourney().getLinkedComments().size();i++)
						{
							 PatientJourneyCommentForTransferOfCareVo partempVo = parrentCatsReferral.getJourney().getLinkedComments().get(i);
							 
							 PatientJourneyCommentForTransferOfCareVoCollection tempCollComm = patj.getLinkedComments();
							 if( tempCollComm == null)
								 tempCollComm = new PatientJourneyCommentForTransferOfCareVoCollection();
							 
							 if( partempVo.getLinkedEventIsNotNull() && partempVo.getLinkedEvent().equals(eventP) && !partempVo.getLinkedTargetIsNotNull())
							 {
								 //PatientJourneyCommentForTransferOfCareVoCollection tempCollComm = patj.getLinkedComments();
								 //if( tempCollComm == null)
								//	 tempCollComm = new PatientJourneyCommentForTransferOfCareVoCollection();
								 
								 
								 PatientJourneyCommentForTransferOfCareVo childVo = new PatientJourneyCommentForTransferOfCareVo();
								 
								 RecordingUserInformationVo recVo = new RecordingUserInformationVo();
								 recVo.setRecordingDateTime(partempVo.getRecordingInfoIsNotNull() ? partempVo.getRecordingInfo().getRecordingDateTime():null);
								 recVo.setRecordingUser(partempVo.getRecordingInfoIsNotNull() ? partempVo.getRecordingInfo().getRecordingUser():null);
								 childVo.setRecordingInfo(recVo);
								 childVo.setComment(partempVo.getComment());
								 childVo.setCommentLevel(partempVo.getCommentLevel());
								 childVo.setCorrected(partempVo.getCorrected());
								 
								 AuthoringInformationVo atutVo = new AuthoringInformationVo();
								 atutVo.setAuthoringDateTime(partempVo.getCorrectedAuthoringInformationIsNotNull() ? partempVo.getCorrectedAuthoringInformation().getAuthoringDateTime():null);
								 atutVo.setAuthoringHcp(partempVo.getCorrectedAuthoringInformationIsNotNull() ? partempVo.getCorrectedAuthoringInformation().getAuthoringHcp():null);
								 
								 childVo.setCorrectedAuthoringInformation(atutVo);
								 childVo.setCorrectionComments(partempVo.getCorrectionComments());
								 childVo.setLinkedEvent(tempeventP);
								 childVo.setLinkedTarget(null);
								 childVo.setReasonNoValidation(partempVo.getReasonNoValidation());
								 childVo.setReasonNoValidationDate(partempVo.getReasonNoValidationDate());
								 tempCollComm.add(childVo);
								 patj.setLinkedComments(tempCollComm);
										 
							 }
							 else if( partempVo.getLinkedEventIsNotNull() && partempVo.getLinkedEvent().equals(eventP) && partempVo.getLinkedTargetIsNotNull() && partempVo.getLinkedTarget().equals(pattarget))
							 {
								 //PatientJourneyCommentForTransferOfCareVoCollection tempCollComm = patj.getLinkedComments();
								 //if( tempCollComm == null)
								//	 tempCollComm = new PatientJourneyCommentForTransferOfCareVoCollection();
								 
								 
								 PatientJourneyCommentForTransferOfCareVo childVo = new PatientJourneyCommentForTransferOfCareVo();
								 
								 RecordingUserInformationVo recVo = new RecordingUserInformationVo();
								 recVo.setRecordingDateTime(partempVo.getRecordingInfoIsNotNull() ? partempVo.getRecordingInfo().getRecordingDateTime():null);
								 recVo.setRecordingUser(partempVo.getRecordingInfoIsNotNull() ? partempVo.getRecordingInfo().getRecordingUser():null);
								 childVo.setRecordingInfo(recVo);
								 childVo.setComment(partempVo.getComment());
								 childVo.setCommentLevel(partempVo.getCommentLevel());
								 childVo.setCorrected(partempVo.getCorrected());
								 
								 AuthoringInformationVo atutVo = new AuthoringInformationVo();
								 atutVo.setAuthoringDateTime(partempVo.getCorrectedAuthoringInformationIsNotNull() ? partempVo.getCorrectedAuthoringInformation().getAuthoringDateTime():null);
								 atutVo.setAuthoringHcp(partempVo.getCorrectedAuthoringInformationIsNotNull() ? partempVo.getCorrectedAuthoringInformation().getAuthoringHcp():null);
								 
								 childVo.setCorrectedAuthoringInformation(atutVo);
								 childVo.setCorrectionComments(partempVo.getCorrectionComments());
								 childVo.setLinkedEvent(tempeventP);
								 childVo.setLinkedTarget(newTargetTempVo);
								 childVo.setReasonNoValidation(partempVo.getReasonNoValidation());
								 childVo.setReasonNoValidationDate(partempVo.getReasonNoValidationDate());
								 tempCollComm.add(childVo);
								 patj.setLinkedComments(tempCollComm);
							 }
						}
					}
				}
				//----
			
			}
		}
		
		return tempColl;
	}
	private TargetReadjustmentVoCollection getTargetReadjustment( TargetReadjustmentVoCollection recordcoll)
	{
		if( recordcoll == null || recordcoll.size() == 0)
			return null;
		TargetReadjustmentVoCollection tempColl = new TargetReadjustmentVoCollection();
		for( TargetReadjustmentVo targRead : recordcoll)
		{
			if( targRead != null )
			{
				TargetReadjustmentVo tempVo = new TargetReadjustmentVo();
				tempVo.setNoOfDays(targRead.getNoOfDays());
				tempVo.setReason(targRead.getReason());
				tempVo.setTargetReadjustment(targRead.getTargetReadjustment());
				tempColl.add(tempVo);
				
				
			}
		}
		return tempColl;
	}
	private PatientJournayTargetForTransferOfCareVoCollection getPatientTargets(PatientJournayTargetForTransferOfCareVoCollection recColl,PatientPathwayJourneyForTransferOfCareVo patj, CatsReferralMasterVo parrentCatsReferral)
	{
		if( recColl == null || recColl.size() == 0)
			return null;
		
		PatientJournayTargetForTransferOfCareVoCollection tempColl = new PatientJournayTargetForTransferOfCareVoCollection();
		for(PatientJournayTargetForTransferOfCareVo pattarget : recColl)
		{
			if( pattarget != null )
			{
				
				
				PatientJournayTargetForTransferOfCareVo newTargetTempVo  = createPatientJournayTarget(pattarget,patj,parrentCatsReferral);
				tempColl.add(newTargetTempVo);
				
				
				
				//-------
				if( parrentCatsReferral.getJourneyIsNotNull() && parrentCatsReferral.getJourney().getLinkedCommentsIsNotNull())
				{
					for(int i = 0; i < parrentCatsReferral.getJourney().getLinkedComments().size();i++)
					{
						 PatientJourneyCommentForTransferOfCareVo partempVo = parrentCatsReferral.getJourney().getLinkedComments().get(i);
						 if( partempVo.getLinkedTargetIsNotNull() && partempVo.getLinkedTarget().equals(pattarget) && !partempVo.getLinkedEventIsNotNull() )
						 {
							 PatientJourneyCommentForTransferOfCareVoCollection tempCollComm = patj.getLinkedComments();
							 if( tempCollComm == null)
								 tempCollComm = new PatientJourneyCommentForTransferOfCareVoCollection();
							 
							 
							 PatientJourneyCommentForTransferOfCareVo childVo = new PatientJourneyCommentForTransferOfCareVo();
							 
							 RecordingUserInformationVo recVo = new RecordingUserInformationVo();
							 recVo.setRecordingDateTime(partempVo.getRecordingInfoIsNotNull() ? partempVo.getRecordingInfo().getRecordingDateTime():null);
							 recVo.setRecordingUser(partempVo.getRecordingInfoIsNotNull() ? partempVo.getRecordingInfo().getRecordingUser():null);
							 
							 childVo.setRecordingInfo(recVo);
							 childVo.setComment(partempVo.getComment());
							 childVo.setCommentLevel(partempVo.getCommentLevel());
							 childVo.setCorrected(partempVo.getCorrected());
							 
							 AuthoringInformationVo atutVo = new AuthoringInformationVo();
							 atutVo.setAuthoringDateTime(partempVo.getCorrectedAuthoringInformationIsNotNull() ? partempVo.getCorrectedAuthoringInformation().getAuthoringDateTime():null);
							 atutVo.setAuthoringHcp(partempVo.getCorrectedAuthoringInformationIsNotNull() ? partempVo.getCorrectedAuthoringInformation().getAuthoringHcp():null);
							 
							 childVo.setCorrectedAuthoringInformation(atutVo);
							 
							 childVo.setCorrectionComments(partempVo.getCorrectionComments());
							 childVo.setLinkedTarget(newTargetTempVo);
							 childVo.setReasonNoValidation(partempVo.getReasonNoValidation());
							 childVo.setReasonNoValidationDate(partempVo.getReasonNoValidationDate());
							 childVo.setLinkedEvent(null);
							 tempCollComm.add(childVo);
							 patj.setLinkedComments(tempCollComm);
									 
						 }
					}
				}
				//------------
			
			}
		}
		return tempColl;
	}
	//wdev-19933
	
	private PatientJournayTargetForTransferOfCareVo createPatientJournayTarget(PatientJournayTargetForTransferOfCareVo pattarget,PatientPathwayJourneyForTransferOfCareVo patj,CatsReferralMasterVo parrentCatsReferral)
	{
		if( pattarget == null )
			return null;
		
		PatientJournayTargetForTransferOfCareVo newTargetTempVo = new PatientJournayTargetForTransferOfCareVo();
		newTargetTempVo.setPathwayTarget(pattarget.getPathwayTarget());
		newTargetTempVo.setWeekNumber(pattarget.getWeekNumber());
		newTargetTempVo.setTargetDate(pattarget.getTargetDate());
		newTargetTempVo.setAchievedDate(pattarget.getAchievedDate());
		newTargetTempVo.setScheduledDate(pattarget.getScheduledDate());
		newTargetTempVo.setCancelledDate(pattarget.getCancelledDate());
		newTargetTempVo.setHasCancelledEvents(pattarget.getHasCancelledEvents());
		newTargetTempVo.setPathwayJourney(patj);
		newTargetTempVo.setAchievedVariance(pattarget.getAchievedVariance());
		newTargetTempVo.setTargetCalFromDate(pattarget.getTargetCalFromDate());
		newTargetTempVo.setHasReadjustments(pattarget.getHasReadjustments());
		
		if( pattarget.getCurrentStatus() == null)
			newTargetTempVo.setCurrentStatus(null);
		else
		{
			JourneyTargetStatusVo tempVo = new JourneyTargetStatusVo();
			tempVo.setStatus(pattarget.getCurrentStatus().getStatus());
			tempVo.setChangedBy(pattarget.getCurrentStatus().getChangedBy());
			tempVo.setDate(pattarget.getCurrentStatus().getDate());
			newTargetTempVo.setCurrentStatus(tempVo);
			
		}
		newTargetTempVo.setStatusHistory(getTargetStatus(pattarget.getStatusHistory()));
		

		newTargetTempVo.setJourneyClock(getPathwayClock(pattarget.getJourneyClock()));
		
		newTargetTempVo.setEvents(getEvents( pattarget, newTargetTempVo,  patj,parrentCatsReferral));
		newTargetTempVo.setReadjustments(getTargetReadjustment( pattarget.getReadjustments()));
		
		return newTargetTempVo;
	}
	private PatientJourneyStatusVoCollection getStatusHistory(PatientJourneyStatusVoCollection recordcoll)
	{
		if( recordcoll == null || recordcoll.size() == 0)
			return null;
		PatientJourneyStatusVoCollection tempColl = new PatientJourneyStatusVoCollection();
		for( PatientJourneyStatusVo statusP : recordcoll)
		{
			if( statusP != null)
			{
				PatientJourneyStatusVo tempPatJStVo = new PatientJourneyStatusVo();
				tempPatJStVo.setStatus(statusP.getStatus());
				tempPatJStVo.setDateTime(statusP.getDateTime());
				tempColl.add(tempPatJStVo);
			}
		}
		
		return tempColl;
		
	}
	private PathwayHistoryVoCollection getPathwayHistoryColl(PathwayHistoryVoCollection recordcoll)
	{
		if( recordcoll == null || recordcoll.size() == 0)
			return null;
		
		PathwayHistoryVoCollection tempColl = new PathwayHistoryVoCollection();
		for( PathwayHistoryVo pathhist : recordcoll)
		{
			if( pathhist != null)
			{
				PathwayHistoryVo tempVo = new PathwayHistoryVo();
				tempVo.setPathway(pathhist.getPathway());
				tempVo.setStartDate(pathhist.getStartDate());
				tempVo.setEndedOnDate(pathhist.getEndedOnDate());
				tempColl.add(tempVo);
				
			}
			
		}
		return tempColl;
	}
	
	
	private PatientPathwayJourneyForTransferOfCareVo copyPatientJourneyFromParentCatsReferral(CatsReferralMasterVo parrentCatsReferral)
	{
		if( parrentCatsReferral.getJourney() == null )
			return null;
		PatientPathwayJourneyForTransferOfCareVo tempJourney = new PatientPathwayJourneyForTransferOfCareVo();
		tempJourney.setPatient(parrentCatsReferral.getJourney().getPatient());
		tempJourney.setPathway(parrentCatsReferral.getJourney().getPathway());
		tempJourney.setStartDate(parrentCatsReferral.getJourney().getStartDate());
		tempJourney.setEndedOnDate(parrentCatsReferral.getJourney().getEndedOnDate());
		
		 // WDEV-23419  Include user Id as part of external referral key
		int userId=0;
		ims.framework.interfaces.IAppUser user = super.getLoggedInUser();
		if (user != null)
			userId = user.getUserId();
		tempJourney.setExtReferralKey("IMS_" + userId + "_" + new java.util.Date().getTime()); // WDEV-23419 Include UserId

		tempJourney.setIsCancerPathway(parrentCatsReferral.getJourney().getIsCancerPathway());
		tempJourney.setCancerPathwayDate(parrentCatsReferral.getJourney().getCancerPathwayDate());
		tempJourney.setPatientTargets(getPatientTargets(parrentCatsReferral.getJourney().getPatientTargets(),tempJourney,parrentCatsReferral));
		tempJourney.setReferral(getReferralForPathwatJourney(parrentCatsReferral.getJourney().getReferral()));
		
		if( parrentCatsReferral.getJourney().getCurrentStatus() == null )
			tempJourney.setCurrentStatus(null);
		else
		{
			PatientJourneyStatusVo tempPatJStVo = new PatientJourneyStatusVo();
			tempPatJStVo.setStatus(parrentCatsReferral.getJourney().getCurrentStatus().getStatus());
			tempPatJStVo.setDateTime(parrentCatsReferral.getJourney().getCurrentStatus().getDateTime());
			tempJourney.setCurrentStatus(tempPatJStVo);
			
		}
		
		tempJourney.setStatusHistory(getStatusHistory(parrentCatsReferral.getJourney().getStatusHistory()));
		
		// WDEV-23490
		// Fill in the Current Clock and Clock History in the journey clone
		tempJourney = cloneClockIntoNewJourney(tempJourney, parrentCatsReferral.getJourney().getCurrentClock(), parrentCatsReferral.getJourney().getClockHistory());
		
		tempJourney.setPathwayHistory(getPathwayHistoryColl(parrentCatsReferral.getJourney().getPathwayHistory()));
		tempJourney.setResponsibleConsultant(parrentCatsReferral.getJourney().getResponsibleConsultant());
		tempJourney.setLastValidationDate(parrentCatsReferral.getJourney().getLastValidationDate());
		tempJourney.setNextValidationDate(parrentCatsReferral.getJourney().getNextValidationDate());
		tempJourney.setPatientJourneyBreachReason(getPatientJourneyBreach( parrentCatsReferral.getJourney().getPatientJourneyBreachReason()));
		setLinkedCommentsWithoutEventAndTarget( parrentCatsReferral, tempJourney);
		
		
				
		return tempJourney;
	}
	
	private PatientPathwayJourneyForTransferOfCareVo cloneClockIntoNewJourney(PatientPathwayJourneyForTransferOfCareVo tempJourney, PathwayClockForTransferOfCareVo currentClock, PathwayClockForTransferOfCareVoCollection clockHistory)
	{
		if (clockHistory == null)
		{
			PathwayClockForTransferOfCareVo clockClone = getPathwayClock(currentClock);
			tempJourney.setCurrentClock(clockClone);
			
			tempJourney.setClockHistory(new PathwayClockForTransferOfCareVoCollection());
			tempJourney.getClockHistory().add(clockClone);
			
			return tempJourney;
		}
		

		// Create the clock history in the clone journey
		tempJourney.setClockHistory(new PathwayClockForTransferOfCareVoCollection());
		// For each clock in the clock history
		for (PathwayClockForTransferOfCareVo clock : clockHistory)
		{
			// Create a clock clone
			PathwayClockForTransferOfCareVo clockClone = getPathwayClock(clock);
			// Add the clock clone to the clone journey clock history
			tempJourney.getClockHistory().add(clockClone);
			// If the clock from history is the same as current clock in the original journey
			// then also set the clock clone to the clone journey
			if (clock!=null&&clock.getID_PathwayClock()!=null //http://jira/browse/WDEV-23517
					&&currentClock!=null&&currentClock.getID_PathwayClock()!=null
					&&clock.getID_PathwayClock().equals(currentClock.getID_PathwayClock()))
			{
				tempJourney.setCurrentClock(clockClone);
			}
		}
		
		// Returned the clone journey
		return tempJourney;
	}

	private  void setLinkedCommentsWithoutEventAndTarget( CatsReferralMasterVo parrentCatsReferral , PatientPathwayJourneyForTransferOfCareVo patj)
	{
		if( parrentCatsReferral == null || !parrentCatsReferral.getJourneyIsNotNull() || !parrentCatsReferral.getJourney().getLinkedCommentsIsNotNull() || patj == null)
			return;
		
		if( parrentCatsReferral.getJourneyIsNotNull() && parrentCatsReferral.getJourney().getLinkedCommentsIsNotNull())
		{
			for(int i = 0; i < parrentCatsReferral.getJourney().getLinkedComments().size();i++)
			{
				 PatientJourneyCommentForTransferOfCareVo partempVo = parrentCatsReferral.getJourney().getLinkedComments().get(i);
				 if( !partempVo.getLinkedTargetIsNotNull() &&  !partempVo.getLinkedEventIsNotNull() )
				 {
					 PatientJourneyCommentForTransferOfCareVoCollection tempCollComm = patj.getLinkedComments();
					 if( tempCollComm == null)
						 tempCollComm = new PatientJourneyCommentForTransferOfCareVoCollection();
					 
					 
					 PatientJourneyCommentForTransferOfCareVo childVo = new PatientJourneyCommentForTransferOfCareVo();
					 
					 RecordingUserInformationVo recVo = new RecordingUserInformationVo();
					 recVo.setRecordingDateTime(partempVo.getRecordingInfoIsNotNull() ? partempVo.getRecordingInfo().getRecordingDateTime():null);
					 recVo.setRecordingUser(partempVo.getRecordingInfoIsNotNull() ? partempVo.getRecordingInfo().getRecordingUser():null);
					 
					 childVo.setRecordingInfo(recVo);
					 childVo.setComment(partempVo.getComment());
					 childVo.setCommentLevel(partempVo.getCommentLevel());
					 childVo.setCorrected(partempVo.getCorrected());
					 
					 AuthoringInformationVo atutVo = new AuthoringInformationVo();
					 atutVo.setAuthoringDateTime(partempVo.getCorrectedAuthoringInformationIsNotNull() ? partempVo.getCorrectedAuthoringInformation().getAuthoringDateTime():null);
					 atutVo.setAuthoringHcp(partempVo.getCorrectedAuthoringInformationIsNotNull() ? partempVo.getCorrectedAuthoringInformation().getAuthoringHcp():null);
					 
					 childVo.setCorrectedAuthoringInformation(atutVo);
					 
					 childVo.setCorrectionComments(partempVo.getCorrectionComments());
					 childVo.setLinkedTarget(null);
					 childVo.setReasonNoValidation(partempVo.getReasonNoValidation());
					 childVo.setReasonNoValidationDate(partempVo.getReasonNoValidationDate());
					 childVo.setLinkedEvent(null);
					 tempCollComm.add(childVo);
					 patj.setLinkedComments(tempCollComm);
							 
				 }
			}
		}
		
		return;
		//------------
	}
	
	
	private PatientJourneyBreachForTransferOfCareVoCollection getPatientJourneyBreach( PatientJourneyBreachForTransferOfCareVoCollection parentColl)
	{
		if( parentColl == null || parentColl.size() == 0)
			return null;
		
		PatientJourneyBreachForTransferOfCareVoCollection tempColl = new PatientJourneyBreachForTransferOfCareVoCollection();
		for( PatientJourneyBreachForTransferOfCareVo breachparent: parentColl)
		{
			if( breachparent != null )
			{
				PatientJourneyBreachForTransferOfCareVo tempVo = new PatientJourneyBreachForTransferOfCareVo();
				tempVo.setBreachReason(breachparent.getBreachReason());
				tempVo.setBreachReasonComment(breachparent.getBreachReasonComment());
				tempVo.setBreachReasonDate(breachparent.getBreachReasonDate());
				tempVo.setBreachReasonRecordingMOS(breachparent.getBreachReasonRecordingMOS());
				tempVo.setCorrectionComments(breachparent.getCorrectionComments());
				if( breachparent.getCorrectionAuthoringInfoIsNotNull())
				{
					RecordingUserInformationVo recVo = new RecordingUserInformationVo();
					recVo.setRecordingDateTime(breachparent.getCorrectionAuthoringInfo().getRecordingDateTime());
					recVo.setRecordingUser(breachparent.getCorrectionAuthoringInfo().getRecordingUser());
					tempVo.setCorrectionAuthoringInfo(recVo);
				}
				tempVo.setCorrected(breachparent.getCorrected());
				
				tempColl.add(tempVo);
				
				
			}
		}
		
		return tempColl;
		
		
	}
	

	
	public void saveBookingAppointment(BookingAppointmentOutcomeVo appointment, PatientElectiveListDetailsToSaveVo patientElectiveListToSave, EventLiteVo firstDefinitiveTreatmentEvent, Boolean wasMarkedAsSeen, CatsReferralRefVo parrentCatsReferral, ims.scheduling.vo.enums.AppointmentOutcomeAction action) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException 
	{
		if (appointment == null)
			throw new CodingRuntimeException("appt is null in method saveBookingAppointment");
		if (!appointment.isValidated())
			throw new CodingRuntimeException("appt has not been validated in method saveBookingAppointment");
		

		// Remove the outcome actions that need to be removed & get the outcome actions to RIE
		removeOutcomeActions(appointment, parrentCatsReferral);	//wdev-19933
		
		
		DomainFactory factory = getDomainFactory();
		
		
		Booking_Appointment previousVersionOfAppt = (Booking_Appointment) factory.getDomainObject(Booking_Appointment.class, appointment.getID_Booking_Appointment());
		LookupInstance previousVersionOfOutcome = previousVersionOfAppt.getOutcome();
		boolean isOutcomeSavedForFirstTime = previousVersionOfOutcome == null && appointment.getOutcome() != null;
		
		@SuppressWarnings("rawtypes")
		HashMap domainMap = new HashMap();
		Booking_Appointment doAppt = BookingAppointmentOutcomeVoAssembler.extractBooking_Appointment(getDomainFactory(), appointment, domainMap);
		factory.save(doAppt);
		
		// WDEV-15944 Is it possible to create a pathway event based on this booking?
		if (ConfigFlag.DOM.INSTANTIATE_EVENT_FROM_SCHEDULING.getValue())
		{
			BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
			impl.instantiateEvent(Booking_AppointmentVoAssembler.create(doAppt), "A", "Recorded on Appointment Outcome Dialog");
		}

		// Get Appointment parent Cats Referral record (one might not exist)
		String query = "SELECT referral FROM CatsReferral AS referral LEFT JOIN referral.appointments AS appointment WHERE appointment.id = :APPOINTMENT_ID";
		CatsReferral parentReferral = (CatsReferral) factory.findFirst(query, "APPOINTMENT_ID", appointment.getID_Booking_Appointment());
		

		// Save the Elective Lists from 'Outcome Actions'
		BookingAppointmentOutcomeVo appointmentOutcome = BookingAppointmentOutcomeVoAssembler.create(doAppt);
		
		if (parentReferral != null)
		{

			boolean apppointmentMarkedAsDna = ims.scheduling.vo.enums.AppointmentOutcomeAction.DNA.equals(action) && Status_Reason.DNA.equals(appointment.getApptStatus());
			boolean apppointmentMarkedAsNotSeen = ims.scheduling.vo.enums.AppointmentOutcomeAction.NOT_SEEN.equals(action) && Status_Reason.NOT_SEEN.equals(appointment.getApptStatus());
			boolean undoOutcomeAndRetainActionsForApppointmentDnaOrNotSeen = (ims.scheduling.vo.enums.AppointmentOutcomeAction.EDIT_NO_RTT_IMPACT.equals(action) || ims.scheduling.vo.enums.AppointmentOutcomeAction.EDIT_RTT_IMPACT.equals(action)) && (Status_Reason.NOT_SEEN.equals(appointment.getApptStatus()) || Status_Reason.DNA.equals(appointment.getApptStatus()));

			if (apppointmentMarkedAsDna || apppointmentMarkedAsNotSeen || undoOutcomeAndRetainActionsForApppointmentDnaOrNotSeen)
			{
				if (ApptOutcome.DISCHARGED_BACK_TO_GP.equals(appointment.getOutcome()))
				{
					parentReferral.setHasDNAorNotSeenActivity(true); // WDEV-22376
					parentReferral.setConsultationActivityRequired(false);

					if (parentReferral.getCurrentStatus() != null && !getDomLookup(ReferralApptStatus.END_OF_CARE).equals(parentReferral.getCurrentStatus().getReferralStatus()))
					{
						parentReferral.setEndOfCareDate(doAppt.getAppointmentDate());
						Set<CATSReferralStatus> statusHistory = parentReferral.getStatusHistory();
						CATSReferralStatus currentStatus = new CATSReferralStatus();
						currentStatus.setReferralStatus(getDomLookup(ReferralApptStatus.END_OF_CARE));
						Object mos = getMosUser();
						MemberOfStaff doMos = null;

						if (mos instanceof MemberOfStaffLiteVo)
						{
							doMos = MemberOfStaffLiteVoAssembler.extractMemberOfStaff(getDomainFactory(), (MemberOfStaffLiteVo) mos);
						}

						currentStatus.setAuthoringUser(doMos);
						currentStatus.setStatusDateTime(new Date());
						parentReferral.setCurrentStatus(currentStatus);
						statusHistory.add(currentStatus);
					}

					factory.save(parentReferral);
				}
				else if (ApptOutcome.SEND_AGAIN.equals(appointment.getOutcome()))
				{
					if (Boolean.TRUE.equals(appointment.getFirstConsultationActivity())) //WDEV-22374
					{
						parentReferral.setConsultationActivityRequired(true);
						factory.save(parentReferral);
					}
					else //WDEV-22375
					{
						parentReferral.setHasRebookingSubsequentActivity(true);
						factory.save(parentReferral);
					}

				}

			}

			if(ConfigFlag.GEN.ICAB_ENABLED.getValue())
			{
				if(doAppt.getApptStatus() != null && doAppt.getApptStatus().equals(getDomLookup(Status_Reason.DNA)))
				{
					if(doAppt.isIsCABBooking() != null && doAppt.isIsCABBooking().booleanValue())
						CABRequests.sendRequestandUpdateReferences(factory, getDomLookup(ActionRequestType.NOTIFY_DNA), doAppt, "Appt DNA Requested from Appointment Outcome");	
				}
			}


			// Record Clock Impact of the AppointmentOutcome
			// Only do this if the outcome is saved for the first time OR the appointment is edited with 
			if (isOutcomeSavedForFirstTime || ims.scheduling.vo.enums.AppointmentOutcomeAction.EDIT_RTT_IMPACT.equals(action))
			{
				try
				{
					Class<?> referralImpl = Class.forName("ims.RefMan.domain.impl.ReferralDetailsImpl");
					IRecordRTTClockImpact clockImpactImpl = (IRecordRTTClockImpact) getDomainImpl(referralImpl);
					clockImpactImpl.recordAppointmentOutcomeClockImpact(appointmentOutcome, firstDefinitiveTreatmentEvent);
				}
				catch (ClassNotFoundException exception)
				{
					createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Class 'ReferralDetailsImpl' was not found when attempting to record RTT Clock Impact of the AppointmentOutcome. This functionality might not be available in the application.");
				}
			}
		}
		
		
		
		for (AppointmentOutcomeActionVo outcomeAction : appointment.getOutcomeActions())
		{
			AppointmentOutcomeActionRefVo savedAppointmentOutcomeAction = getSavedAppointmentOutcomeAction(appointmentOutcome, outcomeAction);
			
			if (AppointmentAction.WAITING_LIST_ACTION.equals(outcomeAction.getAppointmentAction())
					|| AppointmentAction.BOOKED_LIST_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				try
				{
					outcomeAction.getWaitingListAction().setAppointmentOutcomeAction(savedAppointmentOutcomeAction);
					
					Class<?> patientElectiveListImpl = Class.forName("ims.RefMan.domain.impl.ElectiveListAddLaterDialogImpl");
					IPatientElectiveList patientElectiveList = (IPatientElectiveList) getDomainImpl(patientElectiveListImpl);
					patientElectiveList.saveRecord(outcomeAction.getWaitingListAction());
				}
				catch (ClassNotFoundException e)
				{
					createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Class 'ElectiveListAddLaterDialogImpl' was not found when attempting to record PatientElectiveList of the AppointmentOutcome. This functionality might not be available in the application.");				
				}
			}
			
			if (AppointmentAction.PLANNED_LIST_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				try
				{
					outcomeAction.getPlannedListAction().setAppointmentOutcomeAction(savedAppointmentOutcomeAction);
					
					Class<?> patientElectiveListImpl = Class.forName("ims.RefMan.domain.impl.ElectiveListAddLaterDialogImpl");
					IPatientElectiveList patientElectiveList = (IPatientElectiveList) getDomainImpl(patientElectiveListImpl);
					patientElectiveList.saveRecord(outcomeAction.getPlannedListAction());
				}
				catch (ClassNotFoundException e)
				{
					createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Class 'ElectiveListAddLaterDialogImpl' was not found when attempting to record PatientElectiveList of the AppointmentOutcome. This functionality might not be available in the application.");
				}
			}
			
			if (AppointmentAction.REQUEST_FOR_SERVICE_ACTION.equals(outcomeAction.getAppointmentAction()))
			{
				try
				{
					LinkedCatsReferralForOutcomeVoCollection requestsForService = outcomeAction.getRequestsForService();
					requestsForService.validate();
					
					CareSpellForRequestServiceShortVo careSpell = getCareSpellForReferral(new CatsReferralRefVo(parentReferral.getId(), parentReferral.getVersion()));

					Class<?> referralImpl = Class.forName("ims.RefMan.domain.impl.CatsReferralRequestServiceDlgImpl");
					IRequestForService clockImpactImpl = (IRequestForService) getDomainImpl(referralImpl);
					clockImpactImpl.saveLinkedReferralsForServiceRequest(requestsForService, new CatsReferralRefVo(parentReferral.getId(), parentReferral.getVersion()), careSpell);
				}
				catch (ClassNotFoundException exception)
				{
					createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Class 'CatsReferralRequestServiceDlgImpl' was not found when attempting to record Request for Service of the AppointmentOutcome. This functionality might not be available in the application.");
				}
			}
			
			if (AppointmentAction.TRANSFER_OF_CARE.equals(outcomeAction.getAppointmentAction()))
			{
				if (parentReferral != null )
				{
    				CatsReferralMasterVo parrentCatsRef = getMasterCatsReferral(new CatsReferralRefVo(parentReferral.getId(), parentReferral.getVersion()));

    				if (outcomeAction.getTransferOfCare() != null && outcomeAction.getTransferOfCare().getID_CatsReferral() == null)
    				{
    					// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
    					// When 'Transfer of Care' is performed as part of the 'Appointment Outcome' process use the Appointment Outcome Date Time
    					Date eventDateTime = appointmentOutcome.getOutcomeDateTime().getJavaDate();

    					CareSpellForRequestServiceShortVo careSpellForReferral = getCareSpellForReferral(new CatsReferralRefVo(parentReferral.getId(), parentReferral.getVersion()));
    					if (careSpellForReferral.getEpisodes() == null)
    						careSpellForReferral.setEpisodes(new EpisodeOfCareForRequestServiceShortVoCollection());
    					careSpellForReferral.getEpisodes().add(outcomeAction.getTransferOfCare().getEpisodeOfCare());

    					// These lines are needed to ensure the same VO (the exact instantiation) are being sent to save function
    					// have been recreated as the Hash Code for the VOs is changed at this point (not sure where it was changed previously)
    					outcomeAction.getTransferOfCare().getEpisodeOfCare().setCareSpell(careSpellForReferral);
    					outcomeAction.getTransferOfCare().getEpisodeOfCare().getCareContexts().get(0).setEpisodeOfCare(outcomeAction.getTransferOfCare().getEpisodeOfCare());
    					outcomeAction.getTransferOfCare().setCareContext(outcomeAction.getTransferOfCare().getEpisodeOfCare().getCareContexts().get(0));

    					// CareSpellForRequestServiceShortVo updatedCarespell = outcomeAction.getTransferOfCare().getCareSpell(); // getUpdatedCareSpell(outcomeAction.getTransferOfCare().getCareContext().getEpisodeOfCare().getCareSpell(), factory);		//wdev-20922

    					saveChildCatsReferralForTransferOfCare(factory, appointment, parrentCatsRef, outcomeAction.getTransferOfCare(), careSpellForReferral, eventDateTime);
    				
    					// Update the parent Referral Journey to RTT Status of 98
    					CatsReferral domReferral = (CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, parrentCatsRef.getID_CatsReferral());
    					
						updateRTTStatus(domReferral, RTT_CODE_ACTIVITY_NOT_APPLICABLE_RTT, RTTClockImpactSource.REFERRAL_TRANSFER_OF_CARE, false, false, true, eventDateTime);
    					
    					endReferralPathwayJourney(domReferral, true);
    				}
    				else
    				{
    					CatsReferral domTransferOfCare = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, outcomeAction.getTransferOfCare());
    					factory.save(domTransferOfCare);
    				}
				}
			}
		}

		
		// THIS WAS MOVED IN THE /RefMan/src/ims/RefMan/domain/impl/ReferralDetailsImpl.java
//		Integer referralClockId = null;
//		if(parentReferral!=null&&parentReferral.getJourney()!=null&&parentReferral.getJourney().getCurrentClock()!=null&&parentReferral.getJourney().getCurrentClock().getId()!=null)
//			referralClockId = parentReferral.getJourney().getCurrentClock().getId();
//		Integer appointmentClockId=null;
//		if(doAppt!=null&&doAppt.getPathwayClock()!=null&&doAppt.getPathwayClock().getId()!=null)
//			appointmentClockId = doAppt.getPathwayClock().getId();
//		
//		if(referralClockId!=null &&appointmentClockId!=null&&referralClockId.equals(appointmentClockId))
//		{
//			//http://jira/browse/WDEV-21154 Stop the clock with status 33 
//			stopClock(parentReferral,doAppt.getAppointmentDate(), 33);
//			factory.save(parentReferral);
//		}
		
	}

	//wdev-19933
	private void saveChildCatsReferralForTransferOfCare(
			DomainFactory factory,
			BookingAppointmentOutcomeVo appointment,
			CatsReferralMasterVo parrentCatsReferral,
			CatsReferralForRequestServiceVo catsReferralForTransferOfCare,
			CareSpellForRequestServiceShortVo careSpellForReferral, Date eventDateTime) throws DomainInterfaceException, StaleObjectException
	{
		catsReferralForTransferOfCare.setCreatingAppointment(appointment);
		catsReferralForTransferOfCare.setCurrentRTTStatus(getParentCurentRTTSTatus(parrentCatsReferral.getCurrentRTTStatus()));
		
		if( parrentCatsReferral != null && Boolean.TRUE.equals(parrentCatsReferral.getRTTClockImpact()) 
				&& catsReferralForTransferOfCare.getReferralDetailsIsNotNull() 
				&& catsReferralForTransferOfCare.getReferralDetails().getServiceIsNotNull() 
				&& Boolean.TRUE.equals(catsReferralForTransferOfCare.getReferralDetails().getService().getIsSubjectToRTTClock()))
		{
			catsReferralForTransferOfCare.setRTTClockImpact(Boolean.TRUE);
		}
	
		CatsReferral domCatsReferral = null;
		HashMap hasMap = new HashMap();
		CatsReferralForRequestServiceVo ChildCatsReferralVo = null;
		//catsReferralForTransferOfCare = setgetPathwayID(catsReferralForTransferOfCare,domCatsReferral,hasMap,factory);
		
		boolean diagnosticReferral = catsReferralForTransferOfCare.getContract() != null && ReferralManagementContractType.DIAGNOSTIC.equals(catsReferralForTransferOfCare.getContract().getContractType());
		
		
		CareSpell domCareSpell = CareSpellForRequestServiceShortVoAssembler.extractCareSpell(factory, careSpellForReferral, hasMap);
		factory.save(domCareSpell);
		catsReferralForTransferOfCare.validate();
		domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, catsReferralForTransferOfCare, hasMap);
		factory.save(domCatsReferral);
		
		catsReferralForTransferOfCare = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
		
		//if( catsReferralForTransferOfCare.getCareContext().getEpisodeOfCareIsNotNull()&&updatedEpisode!=null) //http://jira/browse/WDEV-20263
		
//		if( catsReferralForTransferOfCare.getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() && updatedCarespell != null)	//wdev-20922
//		{
//			//check if episode of care was updated
//			//EpisodeOfCareForRequestServiceShortVo  updatedEpisode = getUpdatedEpsiodeOfCare(outcomeAction.getChildCatsReferralForTransferOfCare().getCareContext().getEpisodeOfCare(),factory);
//			if( catsReferralForTransferOfCare.getCareContext().getEpisodeOfCare().getCareSpell().getVersion_CareSpell() != updatedCarespell.getVersion_CareSpell() )		//wdev-20922
//			{
//				
//				catsReferralForTransferOfCare.getCareContext().getEpisodeOfCare().setCareSpell(updatedCarespell);
//			}
//				
//		}
		PatientPathwayJourneyForTransferOfCareVo patJournay = null;
		
		if( !parrentCatsReferral.getJourneyIsNotNull() )
		{
			if(     catsReferralForTransferOfCare.getReferralDetailsIsNotNull() 
					&& catsReferralForTransferOfCare.getReferralDetails().getServiceIsNotNull() 
					&& parrentCatsReferral.getReferralDetailsIsNotNull() && parrentCatsReferral.getReferralDetails().getServiceIsNotNull()
					&& Boolean.TRUE.equals(catsReferralForTransferOfCare.getReferralDetails().getService().getIsSubjectToRTTClock())
					&& !Boolean.TRUE.equals(parrentCatsReferral.getReferralDetails().getService().getIsSubjectToRTTClock()))
			{
				catsReferralForTransferOfCare.setRTTClockImpact(Boolean.TRUE);
				ChildCatsReferralVo = saveReferraDetails(catsReferralForTransferOfCare, diagnosticReferral,true,true,parrentCatsReferral, eventDateTime);		//save cats referral and create pathway journey, wdev-22513
				
				
			}
			else
			{
				ChildCatsReferralVo = saveReferraDetails(catsReferralForTransferOfCare, diagnosticReferral,false,false,parrentCatsReferral, eventDateTime);	//save cats referral without create pathway journey, wdev-22513
			}
			
								
			// Add episode of care in care spell wdev-20922
//			if( ChildCatsReferralVo != null && ChildCatsReferralVo.getCareContextIsNotNull() && ChildCatsReferralVo.getCareContext().getEpisodeOfCareIsNotNull() && ChildCatsReferralVo != null && ChildCatsReferralVo.getCareContextIsNotNull() && ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().getEpisodes() == null )
//				ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().setEpisodes( new EpisodeOfCareForRequestServiceShortVoCollection());				//wdev-20922
//				
//			ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().getEpisodes().add(ChildCatsReferralVo.getCareContext().getEpisodeOfCare());
			ChildCatsReferralVo.validate();
			domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, ChildCatsReferralVo);	
			factory.save(domCatsReferral);	
			
			//	-------------------------------
			
			
			
			//ChildCatsReferralVo = setgetPathwayID(ChildCatsReferralVo,domCatsReferral,hasMap,factory);					//set ParhawyId
			//ChildCatsReferralVo.validate();
			//domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, ChildCatsReferralVo);	
			//factory.save(domCatsReferral);																				//save cats Referral with PathawyId	
		}
		else 	//if parent cats referral has Patient Journey - > copy the parent Patient Journey 
		{
			
			
			ChildCatsReferralVo = saveReferraDetails(catsReferralForTransferOfCare, diagnosticReferral , false,false,parrentCatsReferral, eventDateTime);		//save cats referral without patient journey, wdev-22513
			patJournay = copyPatientJourneyFromParentCatsReferral(parrentCatsReferral);
			//wdev-22513
			if( patJournay.getReferralIsNotNull() && parrentCatsReferral.getPathwayIDIsNotNull())
			{
				patJournay.getReferral().setClockId(parrentCatsReferral.getPathwayID());
				
			}
			if( patJournay.getCurrentClockIsNotNull() && parrentCatsReferral.getPathwayIDIsNotNull())
			{
				patJournay.getCurrentClock().setExtClockId(parrentCatsReferral.getPathwayID());
			}
			
			//-------
			patJournay.validate();
			PatientPathwayJourney doPatientPathwayJourney = PatientPathwayJourneyForTransferOfCareVoAssembler.extractPatientPathwayJourney(factory, patJournay);
 //MNhttp://jira/browse/WDEV-20263 changed save to saveNoFlush to avoid SOE
			factory.saveNoFlush(doPatientPathwayJourney);	
			patJournay  = PatientPathwayJourneyForTransferOfCareVoAssembler.create(doPatientPathwayJourney);
			
			if( patJournay.getCurrentClockIsNotNull() && patJournay.getCurrentClock().getCurrentRTTStatusIsNotNull())
				ChildCatsReferralVo.setCurrentRTTStatus(patJournay.getCurrentClock().getCurrentRTTStatus());
			else
				ChildCatsReferralVo.setCurrentRTTStatus(copyRTTStatus(parrentCatsReferral.getCurrentRTTStatus()));
			
			
			
			if( ChildCatsReferralVo.getReferralDetailsIsNotNull() 
			&& ChildCatsReferralVo.getReferralDetails().getServiceIsNotNull() 
			&& parrentCatsReferral.getReferralDetailsIsNotNull() && parrentCatsReferral.getReferralDetails().getServiceIsNotNull()
			&& Boolean.TRUE.equals(ChildCatsReferralVo.getReferralDetails().getService().getIsSubjectToRTTClock())
			&& !Boolean.TRUE.equals(parrentCatsReferral.getReferralDetails().getService().getIsSubjectToRTTClock()))
			{
				//if( Boolean.TRUE.equals(catsReferralForTransferOfCare.getRTTClockImpact()) && patJournay.getCurrentClock() == null)		//check if the copied Patient Journey doesn't has a clock
				//{
				ChildCatsReferralVo.setRTTClockImpact(Boolean.TRUE);
				
						
				
				PathwayClockForTransferOfCareVo tempVo = new PathwayClockForTransferOfCareVo();
				tempVo.setStartDate(ChildCatsReferralVo.getReferralDetails().getDateOfReferral());
				
				if( ChildCatsReferralVo != null && ChildCatsReferralVo.getPathwayIDIsNotNull() && !ChildCatsReferralVo.getPathwayID().equals(""))
					tempVo.setExtClockId(ChildCatsReferralVo.getPathwayID());
				else
					tempVo.setExtClockId(parrentCatsReferral.getPathwayID());		//wdev-22513
				
				tempVo.setExtClockName("MaximsClock_1");
				
				patJournay.setCurrentClock(tempVo);
				PathwayClockForTransferOfCareVoCollection tempCollClok = patJournay.getClockHistory();
				if( tempCollClok == null )
					tempCollClok = new PathwayClockForTransferOfCareVoCollection();
					
				tempCollClok.add(tempVo);
				patJournay.setClockHistory(tempCollClok);
				
				ChildCatsReferralVo.setCurrentRTTStatus(getRTTStatusWithNationalCode12(patJournay, new DateTime(eventDateTime)));
				
				patJournay.validate();
				doPatientPathwayJourney = PatientPathwayJourneyForTransferOfCareVoAssembler.extractPatientPathwayJourney(factory, patJournay);
				factory.save(doPatientPathwayJourney);	
				patJournay = PatientPathwayJourneyForTransferOfCareVoAssembler.create(doPatientPathwayJourney);
				//ChildCatsReferralVo = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
				
				
				//}
			}
			
			// Add episode of care in care spell wdev-20922
//			if( ChildCatsReferralVo != null && ChildCatsReferralVo.getCareContextIsNotNull() && ChildCatsReferralVo.getCareContext().getEpisodeOfCareIsNotNull() && ChildCatsReferralVo != null && ChildCatsReferralVo.getCareContextIsNotNull() && ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().getEpisodes() == null )
//				ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().setEpisodes( new EpisodeOfCareForRequestServiceShortVoCollection());				//wdev-20922
//				
//			ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().getEpisodes().add(ChildCatsReferralVo.getCareContext().getEpisodeOfCare());
			//------------------------
			
			ChildCatsReferralVo.setJourney(patJournay);
			
			ChildCatsReferralVo.validate();
			domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, ChildCatsReferralVo);	
			factory.save(domCatsReferral);	
			ChildCatsReferralVo = CatsReferralForRequestServiceVoAssembler.create((CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, ChildCatsReferralVo.getID_CatsReferral()));
		}

	
		if (parrentCatsReferral != null)
		{
			CatsReferral domParrentCatsReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, parrentCatsReferral.getID_CatsReferral());
			
			domParrentCatsReferral.setRTTClockImpact(Boolean.FALSE);
			
			CATSReferralStatus status = new CATSReferralStatus();
			status.setAuthoringUser((MemberOfStaff)factory.getDomainObject((MemberOfStaffRefVo)getMosUser()));
			status.setStatusDateTime(new Date());
			status.setReferralStatus(getDomLookup(ReferralApptStatus.TRANSFERRED));
			
			domParrentCatsReferral.setCurrentStatus(status);
			domParrentCatsReferral.getStatusHistory().add(status);
			
			LinkedCatsReferral linkedCatsReferral = new LinkedCatsReferral();
			linkedCatsReferral.setReferral(domCatsReferral);
			linkedCatsReferral.setReferralRelationType(getDomLookup(ReferralRelationType.TRANSFER_OF_CARE));
			domParrentCatsReferral.getLinkedReferrals().add(linkedCatsReferral);
			
			factory.save(domParrentCatsReferral);
			parrentCatsReferral = CatsReferralMasterVoAssembler.create(domParrentCatsReferral);
			
			
//			parrentCatsReferral = getMasterCatsReferral(parrentCatsReferral);
//			
//			
//			parrentCatsReferral.setRTTClockImpact(Boolean.FALSE);
//			
//			CatsReferralStatusVoCollection tempSHColl = parrentCatsReferral.getStatusHistory();
//			if( tempSHColl == null )
//				tempSHColl = new CatsReferralStatusVoCollection();
//			
//			CatsReferralStatusVo status = new CatsReferralStatusVo();
//			status.setAuthoringUser((MemberOfStaffRefVo)getMosUser());
//			status.setStatusDateTime(new DateTime());
//			status.setReferralStatus(ReferralApptStatus.TRANSFERRED);			//Should be Transferred
//
//			parrentCatsReferral.setCurrentStatus(status);
//			if (parrentCatsReferral.getStatusHistory() == null) parrentCatsReferral.setStatusHistory(new CatsReferralStatusVoCollection());
//			parrentCatsReferral.getStatusHistory().add(status);
//			
//			tempSHColl.add(voStatus);
//			
//			parrentCatsReferral.setStatusHistory(tempSHColl);
//
//			LinkedCatsReferralForOutcomeVoCollection tempLinkColl = parrentCatsReferral.getLinkedReferrals(); 
//			if( tempLinkColl == null )
//				tempLinkColl = new LinkedCatsReferralForOutcomeVoCollection();
//			
//			LinkedCatsReferralForOutcomeVo tempOutVo = new LinkedCatsReferralForOutcomeVo();
//			tempOutVo.setReferral(ChildCatsReferralVo);
//			tempOutVo.setReferralRelationType(ReferralRelationType.TRANSFER_OF_CARE);
//			tempLinkColl.add(tempOutVo);
//			parrentCatsReferral.setLinkedReferrals(tempLinkColl);
//			if (parrentCatsReferral.getLinkedReferrals() == null) parrentCatsReferral.setLinkedReferrals(new LinkedCatsReferralForOutcomeVoCollection());
//			parrentCatsReferral.getLinkedReferrals().add(tempOutVo);
//
//MN  comment out the following for SOE WDEV-21149 as a separate check-in and test 			
//			CatsReferral doCatsReferral = CatsReferralMasterVoAssembler.extractCatsReferral(factory, parrentCatsReferral);
//			factory.save(doCatsReferral);
//			parrentCatsReferral = CatsReferralMasterVoAssembler.create(doCatsReferral);
		}
		
		if( patJournay != null )
		{
				
			//copy all events of parent's patient journey
			PatientEventForTransferOfCareVoCollection parentEventColl  = new PatientEventForTransferOfCareVoCollection();
			if( parrentCatsReferral != null )
			{
				if( parrentCatsReferral.getJourneyIsNotNull() && parrentCatsReferral.getJourney().getPatientTargetsIsNotNull() )
				{
					for( int b = 0; b < parrentCatsReferral.getJourney().getPatientTargets().size();b++)
					{
						PatientJournayTargetForTransferOfCareVo  patTargetVo = parrentCatsReferral.getJourney().getPatientTargets().get(b);
						if( patTargetVo !=  null && patTargetVo.getEventsIsNotNull()  )
						{
							for( int z = 0 ; z < patTargetVo.getEvents().size();z++)
							{
								PatientEventForTransferOfCareVo patEvent  = patTargetVo.getEvents().get(z);
								parentEventColl.add(patEvent);
							}
						}
					}
				}
			}
			
			
			PatientEventForTransferOfCareVoCollection eventColl = createOtherNewPatientEvents(getPatientEventEvents(parrentCatsReferral.getJourney()), patJournay,parentEventColl);
			if( eventColl != null && eventColl.size() > 0)
			{
    			for(PatientEventForTransferOfCareVo patevent : eventColl)
    			{
    				patevent.validate();
    				PatientEvent doPatientEvent = PatientEventForTransferOfCareVoAssembler.extractPatientEvent(factory, patevent);
    				factory.save(doPatientEvent);
    			}
			}
		}
	}
	//wdev-19933
//	private void saveChildCatsReferralForServiceRequest(CatsReferralForRequestServiceVo  catsReferralForService, DomainFactory factory,BookingAppointmentOutcomeVo appointment,CatsReferralMasterVo parrentCatsReferral , CareSpellForRequestServiceShortVo updatedCarespell  ) throws DomainInterfaceException, StaleObjectException
//	{
//		catsReferralForService.setCreatingAppointment(appointment);
//		
//		//check if episode of care was updated
//		//if( catsReferralForService.getCareContext().getEpisodeOfCareIsNotNull()&&updatedEpisode!=null) //http://jira/browse/WDEV-20263
//		
//		if( catsReferralForService.getCareContext().getEpisodeOfCare().getCareSpellIsNotNull() && updatedCarespell != null )		//wdev-20922
//		{
//			
//			if( catsReferralForService.getCareContext().getEpisodeOfCare().getCareSpell().getVersion_CareSpell() != updatedCarespell.getVersion_CareSpell() )
//			{
//				
//				catsReferralForService.getCareContext().getEpisodeOfCare().setCareSpell(updatedCarespell);
//			}
//				
//		}
//		
//		
//		catsReferralForService.validate();
//		
//		CatsReferral domCatsReferral = null;
//		HashMap hasMap = new HashMap();
//		CatsReferralForRequestServiceVo ChildCatsReferralVo = null;
//		if( parrentCatsReferral != null)
//		{
//			if( parrentCatsReferral.getJourneyIsNotNull() )
//			{
//				 ChildCatsReferralVo = saveCatsReferral(catsReferralForService,true,false);				//save cats referral with creation of Patient Journey
//				
//				
//				
//				//PatientPathwayJourneyForTransferOfCareVo patJournay = parrentCatsReferral.getJourney();						//copy patient journey from parent cats referral
//				
//				//catsReferralForService.setJourney(patJournay);
//				//catsReferralForService.validate();
//				//ChildCatsReferralVo = saveCatsReferral(catsReferralForService, false);				//save cats referral without creating a new patient journey
//		
//			}
//			else
//			{
//				ChildCatsReferralVo = saveCatsReferral(catsReferralForService,false,false);				//save cats referral without creation of Patient Journey
//							
//				/* catsReferralForService = setgetPathwayID(catsReferralForService,domCatsReferral,hasMap,factory);
//				catsReferralForService.validate();
//				domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, catsReferralForService);
//				factory.save(domCatsReferral);
//				ChildCatsReferralVo = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral); */
//
//			}
//			
//			
//			// Add episode of care in care spell wdev-20922
//			if( ChildCatsReferralVo != null && ChildCatsReferralVo.getCareContextIsNotNull() && ChildCatsReferralVo.getCareContext().getEpisodeOfCareIsNotNull() && ChildCatsReferralVo != null && ChildCatsReferralVo.getCareContextIsNotNull() && ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().getEpisodes() == null )
//				ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().setEpisodes( new EpisodeOfCareForRequestServiceShortVoCollection());				//wdev-20922
//				
//			ChildCatsReferralVo.getCareContext().getEpisodeOfCare().getCareSpell().getEpisodes().add(ChildCatsReferralVo.getCareContext().getEpisodeOfCare());
//			//	-------------------------------
//			
//			ChildCatsReferralVo = setgetPathwayID(ChildCatsReferralVo,domCatsReferral,hasMap,factory);
//			ChildCatsReferralVo.setRTTClockImpact(Boolean.FALSE);
//			ChildCatsReferralVo.validate();
//			domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, ChildCatsReferralVo);
//			factory.save(domCatsReferral);
//			ChildCatsReferralVo = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
//
//			
//		
//			parrentCatsReferral = getMasterCatsReferral(parrentCatsReferral);
//			
//			LinkedCatsReferralForOutcomeVoCollection tempLinkColl = parrentCatsReferral.getLinkedReferrals();
//			
//			if( tempLinkColl == null)
//				tempLinkColl = new LinkedCatsReferralForOutcomeVoCollection();
//			
//			
//			
//			LinkedCatsReferralForOutcomeVo tempOutVo = new LinkedCatsReferralForOutcomeVo();
//			tempOutVo.setReferral(ChildCatsReferralVo);
//			tempOutVo.setReferralRelationType(ReferralRelationType.REQUEST_FOR_SERVICE);
//			
//			tempLinkColl.add(tempOutVo);
//			parrentCatsReferral.setLinkedReferrals(tempLinkColl);
//			parrentCatsReferral.validate();
//			CatsReferral doCatsReferral = CatsReferralMasterVoAssembler.extractCatsReferral(factory, parrentCatsReferral);
//			factory.save(doCatsReferral);
//			
//		}
//	}
	
	private PatientEventForTransferOfCareVoCollection createOtherNewPatientEvents( PatientEventForTransferOfCareVoCollection recordcoll, PatientPathwayJourneyForTransferOfCareVo patj,PatientEventForTransferOfCareVoCollection parentEventColl)
	{
		if( recordcoll == null || recordcoll.size() == 0)
			return null;
		PatientEventForTransferOfCareVoCollection tempColl = new PatientEventForTransferOfCareVoCollection();
		for( PatientEventForTransferOfCareVo eventP : recordcoll)
		{
			if( eventP != null )
			{
				
				if( parentEventColl != null && parentEventColl.size() > 0 && parentEventColl.contains(eventP))
				{
					
				}
				else
				{
    				PatientEventForTransferOfCareVo tempeventP = new PatientEventForTransferOfCareVo();
    				tempeventP.setPatient(eventP.getPatient());
    				tempeventP.setEvent(eventP.getEvent());
    				tempeventP.setDescription(eventP.getDescription());
    				tempeventP.setEventDateTime(eventP.getEventDateTime());
    				tempeventP.setEventStatus(eventP.getEventStatus());
    				tempeventP.setMessageId(eventP.getMessageId());
    				tempeventP.setExternalEventId(eventP.getExternalEventId());
    				tempeventP.setJourney(patj);
    				tempeventP.setPatientTarget(createPatientJournayTarget(eventP.getPatientTarget(),patj,null));
    				tempeventP.setExternalEvent(eventP.getExternalEvent());
    				tempeventP.setRttExternalEvent(eventP.getRttExternalEvent());
    				tempeventP.setClinicCode(eventP.getClinicCode());
    				tempeventP.setSpecialty(eventP.getSpecialty());
    				tempeventP.setConsultant(eventP.getConsultant());
    				tempeventP.setScheduledDate(eventP.getScheduledDate());
    				tempColl.add(tempeventP);
				}
			
			}
		}
		
		return tempColl;
	}
	//wdev-19933
	private PatientEventForTransferOfCareVoCollection getPatientEventEvents(PatientPathwayJourneyForTransferOfCareVo patj)
	{
		if( patj == null )
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		String hql = "select p1_1 	from PatientEvent as p1_1 left join p1_1.journey as p2_1 where (p2_1.id ="+patj.getID_PatientPathwayJourney() +" and ( p1_1.isRIE = 0 or p1_1.isRIE is null ) )"; 
	
		List events = factory.find(hql);
		if(events != null && events.size() > 0)
			return PatientEventForTransferOfCareVoAssembler.createPatientEventForTransferOfCareVoCollectionFromPatientEvent(events);
		
		return null;
	}
	
	
	//wdev-19933
	private PathwayRTTStatusVo getParentCurentRTTSTatus(PathwayRTTStatusVo record)
	{
		if( record == null)
			return null;
		
		PathwayRTTStatusVo tempVo = new PathwayRTTStatusVo();
		tempVo.setSetting(record.getSetting());
		tempVo.setStatusBy(record.getStatusBy());
		tempVo.setStatusDateTime(record.getStatusDateTime());
		tempVo.setRTTStatus(record.getRTTStatus());
		return tempVo;
		
	}
	//------------
	
	//wdev-19930
	
	private CatsReferralForRequestServiceVo setgetPathwayID(CatsReferralForRequestServiceVo record,CatsReferral domCatsReferral,HashMap hasMap,DomainFactory factory, CatsReferralMasterVo parentcatsReferral)
	{
		if (record.getPathwayID() == null)
		{
			if (record.getID_CatsReferral() == null)//wdev-18550
			{
				domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, record, hasMap);
				record = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
			}

			
			if (record.getID_CatsReferral() != null)
			{
				if( parentcatsReferral != null && parentcatsReferral.getPathwayIDIsNotNull())	//wdev-22513 
				{
					record.setPathwayID(parentcatsReferral.getPathwayID());
				}
				else
				{
				String orgCode = "";
				String szZeros = "";
				String allZeros = "00000000000000000000";//20 chars

				if (record.getReferralDetails() != null
						&& record.getReferralDetails().getReferrerType() != null)
				{
					if(record.getReferralDetails().getReferrerType().equals(SourceOfReferral.TRANSFER) && record.getReferralTransfer() != null && record.getReferralTransfer().getOTherOrganisationCode() != null)
					{
						//WDEV-19698
						String extCode = getLookupService().getRemoteLookup(record.getReferralTransfer().getOTherOrganisationCode().getID(), "MAXIMS");;
						orgCode =extCode!=null ? extCode : "" ;
					}
					else
						orgCode = record.getReferralDetails().getPCT();
				}

				//WDEV-18816
				if (orgCode != null && orgCode.length() <= allZeros.length())		//wdev-20417
					szZeros = allZeros.subSequence(0, allZeros.length() - orgCode.length()).toString();

				if (szZeros.length() < record.getID_CatsReferral().toString().length())
					szZeros = "";
				else
					szZeros = szZeros.subSequence(0, szZeros.length() - record.getID_CatsReferral().toString().length()).toString();

				String pathwayId = (orgCode != null ? orgCode:"") + szZeros + record.getID_CatsReferral().toString();	//wdev-20417

				record.setPathwayID(pathwayId.length() > 20 ? pathwayId.subSequence(0, 19).toString(): pathwayId);
				}
			}
		}
		return record;

	}
	
	//---------
	//wdev-22513
	private CatsReferralForRequestServiceVo saveReferraDetails(CatsReferralForRequestServiceVo record, Boolean bDiagnosticReferral, Boolean createPatientJounrey , boolean onlyNational12, CatsReferralMasterVo parentCatsReferral, Date eventDateTime) throws StaleObjectException, DomainInterfaceException
	{
		boolean isNewCatsReferral = record.getID_CatsReferral() == null;
		DomainFactory factory = getDomainFactory();

		// WDEV-18452 - before save of the catsReferral, I need to hold onto the original Urgency value
		LookupInstance prevReferralUrgency=null;
		LookupInstance prevCancerTypeLookInst=null; //WDEV-19700
		
		if (!isNewCatsReferral)
		{
			CatsReferral domCatsRef = (CatsReferral)factory.getDomainObject(CatsReferral.class, record.getID_CatsReferral());
			prevReferralUrgency = domCatsRef.getUrgency();
			
			prevCancerTypeLookInst=domCatsRef.getCancerType();//WDEV-19700	
		}


		//wdev-18432
		//12. On saving the Referral, If PathwayID is entered in the Referral Transfer Object, this will be saved as the PathwayID in the CatsReferral as well as the ExtClockId in the 
		//PathwayClock. If this is not entered, the PathwayId will be the CatsReferralId formatted prepended with ORG Code. The field size is 20 characters and will be formatted with 3 
		//characters containing the organisation code followed by 0 padded CatsReferral Id. 
		//e.g. OrganisationCode = MK1, CatsReferral.id = 3421 - PathwayID = MK100000000000003421 

		CatsReferral domCatsReferral = null;
		HashMap hasMap = new HashMap();
		record = setgetPathwayID(record,domCatsReferral,hasMap,factory,parentCatsReferral);	//wdev-19933,wdev-22513
			
		//WDEV-7471
		boolean isCreateOrder = true;
		
		if( Boolean.TRUE.equals(createPatientJounrey))	//wdev-19933
		{
    		//WDEV-19508
    		if (!Boolean.TRUE.equals(record.getIsCAB())) 
    		{
        		// Save PatientJourney for this referral
        		PatientPathwayJourney journey = createJourney(factory, record);
        		domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, record, hasMap);
        		domCatsReferral.setJourney(journey);
        		
        		isCreateOrder = domCatsReferral.getId() == null;
        		
        		PathwayRTTStatus rttStatus = null;
        		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && isNewCatsReferral && Boolean.TRUE.equals(record.getRTTClockImpact()))
        		{
        			rttStatus = createPathwayRTTStatus(domCatsReferral,onlyNational12, eventDateTime);
        			domCatsReferral.setCurrentRTTStatus(rttStatus);
        		}
        		
        		factory.save(domCatsReferral);
        		record = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
        		
        		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && rttStatus != null && isNewCatsReferral && Boolean.TRUE.equals(record.getRTTClockImpact()))
        		{
        			createPatientEvent(record, domCatsReferral, rttStatus);
        		}
    		}
    		else if (!isNewCatsReferral && ReferralApptStatus.REFERRAL_ACCEPTED.equals(record.getCurrentStatus().getReferralStatus())&& Boolean.TRUE.equals(record.getIsCAB()) && Boolean.TRUE.equals(record.getRTTClockImpact()) && isNonDiagnosticAppointment(record))
    		{
    			// Save PatientJourney for this referral on Accept
        		PatientPathwayJourney journey = createJourney(factory, record);
        		
        		domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, record);
        		domCatsReferral.setJourney(journey);
        		
        		isCreateOrder = domCatsReferral.getId() == null;
        		
        		PathwayRTTStatus rttStatus = null;
        		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue())
        		{
        			rttStatus = createPathwayRTTStatus(domCatsReferral,onlyNational12, eventDateTime);
        			domCatsReferral.setCurrentRTTStatus(rttStatus);
        		}
        		
        		factory.save(domCatsReferral);
        		record = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
        		
        		if(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue() && rttStatus != null)
        		{
        			createPatientEvent(record, domCatsReferral, rttStatus);
        		}
    		}
    		else
    		{
    			domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, record);
    			isCreateOrder = domCatsReferral.getId() == null;
    			factory.save(domCatsReferral);
    			record = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
    		}
		}
		else
		{
			domCatsReferral = CatsReferralForRequestServiceVoAssembler.extractCatsReferral(factory, record);
			isCreateOrder = domCatsReferral.getId() == null;
			factory.save(domCatsReferral);
			record = CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
		}
	
		//WDEV-7471
		if(bDiagnosticReferral)
		{
			pukkaJMessaging(domCatsReferral, isCreateOrder);
			
		}
		
		// WDEV-18548
		try 
		{
			ReferralUrgency prevUrgency=null;
			if (prevReferralUrgency != null)
				prevUrgency = new ReferralUrgency(prevReferralUrgency.getId());
			
			//WDEV-19700
			CancerType prevCancerType=null;
			if (prevCancerTypeLookInst != null)
				prevCancerType = new CancerType(prevCancerTypeLookInst.getId());
			
			// If this is an insert the vo won't have the id
			if (!record.getID_CatsReferralIsNotNull())
				record.setID_CatsReferral(domCatsReferral.getId());
			check62dayTarget(record, prevUrgency, prevCancerType);//WDEV-19700
		}
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();  // This is already system logged
		}
		
		
		return CatsReferralForRequestServiceVoAssembler.create(domCatsReferral);
	}
	/**
	 * WDEV-18452, WDEV-18548
	 * We have created the patient journey, we now need to check the urgency of the referral
	 * if it is Two Week Wait or Consultant Upgrade, we want to instantiate the event that will
	 * bring the 62 day target into scope
	 * @param referral
	 * @param prevReferralUrgency 
	 * @param journey
	 * @param hl7Impl 
	 * @throws StaleObjectException 
	 * @throws DomainInterfaceException 
	 */
	public void check62dayTarget(CatsReferralForRequestServiceVo referral, ReferralUrgency prevReferralUrgency, CancerType prevCancerType) throws DomainInterfaceException, StaleObjectException  //WDEV-19700 
	{
		// Only create the patient journey if the flag specified to do this.
		if (!ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
			return;
	
		DomainFactory factory = getDomainFactory();
					
		if (referral != null && (referral.getUrgency() == null || (referral.getUrgencyIsNotNull() 
				&& !referral.getUrgency().equals(ReferralUrgency.CONSULTANT_UPGRADE)
				&& !referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT)
				&& !referral.getUrgency().equals(ReferralUrgency.NATIONAL_SCREENING)))) //WDEV-19700
		{
			// We may be looking at a downgrade, so if previous is one of these we also want to check below
			if (prevReferralUrgency != null 
					&& prevReferralUrgency.getId() != ReferralUrgency.CONSULTANT_UPGRADE.getId()
					&& prevReferralUrgency.getId() != ReferralUrgency.TWO_WEEK_WAIT.getId()
					&& prevReferralUrgency.getId() != ReferralUrgency.NATIONAL_SCREENING.getId()) //WDEV-19700
			return;
			
			//if (prevReferralUrgency == null || referral.getUrgency() ==  null)
				//return;
		}
		
		// Only perform the following checks if the urgency value has changed
		//if (prevReferralUrgency != null && prevReferralUrgency.getId() == referral.getUrgency().getId())
			//return;
			
		//WDEV-19700
		// Only perform the following checks if changing the target
		if (prevCancerType != null && referral.getCancerType()!=null && getPASTargetByCancerType(prevCancerType).equals(getPASTargetByCancerType(referral.getCancerType())))
			return;

		// Get the Patient Journey from referral
		CatsReferral domReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, referral.getID_CatsReferral());
		
		HL7PathwayIf hl7Impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
			
		PatientEventVo patientEvent = new PatientEventVo();
		patientEvent.setEventDateTime(new DateTime());
		
		String eventTargetPASMapping=null;
		TargetRefVo target = null; //WDEV-19700
		
		if (referral != null && referral.getUrgencyIsNotNull() && referral.getUrgency().equals(ReferralUrgency.CONSULTANT_UPGRADE))
		{
			// Find the event that needs to be instantiated - PAS mapping of type CONS is required for Consultant Upgrade
			try 
			{
				ims.pathways.vo.EventVo pthwEvent = hl7Impl.getEventByTaxonomyMap(TaxonomyType.PAS, "CONS");
				if (pthwEvent == null)
					return;
				patientEvent.setEvent(pthwEvent);
				patientEvent.setEventDateTime(new DateTime(referral.getConsUpgradeDate()));
			}
			catch (DomainInterfaceException e) 
			{
				super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Consultant Upgrade - Pas mapping = CONS");
				return;
			}
		}
		else if (referral != null && referral.getUrgencyIsNotNull() && (referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT) || ReferralUrgency.NATIONAL_SCREENING.equals(referral.getUrgency()))) // WDEV-19700
		{
			// Find the event that needs to be instantiated - PAS mapping of type TWO is required for Two Week Wait
			try 
			{
				CancerTypeItemConfigVo cancerTypeItemConfig = getCancerTypeItemConfig(referral.getCancerType());
				
				// If there is already an active PatientEvent for Consultant Upgrade type and 62 day target is in scope, we do not want to instantiate this one
				//TargetRefVo target = null; WDEV-19700

				if (cancerTypeItemConfig != null && Boolean.TRUE.equals(cancerTypeItemConfig.getDay31Target()))
				{
					target = hl7Impl.getTargetByTaxonomyMap(TaxonomyType.PAS, "31D");
					eventTargetPASMapping="31D";
				}
				else if (cancerTypeItemConfig != null && Boolean.TRUE.equals(cancerTypeItemConfig.getDay62Target()))
				{
					target = hl7Impl.getTargetByTaxonomyMap(TaxonomyType.PAS, "62D");
					eventTargetPASMapping="62D";
				}
				
				StringBuffer hql = new StringBuffer(" select pev from PatientEvent pev join pev.event ev join ev.taxonomyMaps tx ");
				
				if (target != null)
				{
					hql.append(" join pev.patientTarget pjt ");
				}
				
				hql.append(" where pev.journey = :journey and pev.eventStatus.id = :status " +
								" and ev.status.id = :evstatus and tx.taxonomyName = :taxType and tx.taxonomyCode = :taxCode");
				ArrayList<String> labels = new ArrayList<String>();
				ArrayList<Object> values = new ArrayList<Object>();
				labels.add("journey");
				labels.add("status");
				labels.add("evstatus");
				labels.add("taxType");
				labels.add("taxCode");
				values.add(domReferral.getJourney());
				values.add(EventStatus.ACTIVE.getId());
				values.add(PreActiveActiveInactiveStatus.ACTIVE.getId());
				values.add(getDomLookup(TaxonomyType.PAS));
				values.add("CONS");
				
				if (target != null)
				{
					hql.append(" and pjt.pathwayTarget.target.id = :target and pjt.currentStatus.status.id = :inscope ");
					labels.add("target");
					labels.add("inscope");
					values.add(target.getID_Target());
					values.add(PatientTargetStatus.INSCOPE.getId());
				}
				
				List lst = factory.find(hql.toString(), labels, values);
				if (lst != null && lst.size() > 1)
				{
					//WDEV-19700
					if (referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT))
					{
						super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "TwoWeekWait will not be instantiated as PatientEvent already found for Consultant Upgrade");
					}
					else if ( ReferralUrgency.NATIONAL_SCREENING.equals(referral.getUrgency()))
					{
						super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "National Screening will not be instantiated as PatientEvent already found for Consultant Upgrade");
					}
					return;
				}
				
				//WDEV-19700
				ims.pathways.vo.EventVo pthwEvent = null;
				
				if (referral.getUrgency().equals(ReferralUrgency.TWO_WEEK_WAIT))
				{
					pthwEvent = hl7Impl.getEventByTaxonomyMap(TaxonomyType.PAS, "TWO");
					if (pthwEvent == null)
					{
						super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Two Week Wait - Pas mapping = TWO");
						return;
					}
				}
				else if ( ReferralUrgency.NATIONAL_SCREENING.equals(referral.getUrgency()))
				{
					pthwEvent = hl7Impl.getEventByTaxonomyMap(TaxonomyType.PAS, "NSC");
					if (pthwEvent == null)
					{
						super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for National Screening - Pas mapping = NSC");
						return;
					}
				}
			
				patientEvent.setEvent(pthwEvent);
				patientEvent.setEventDateTime(new DateTime(referral.getReferralDetails().getDateReferralReceived()));
				
			}
			catch (DomainInterfaceException e) 
			{
				super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Two Week Wait - Pas mapping = TWO " + e.getMessage());
				return;
			}
		}
		else if (referral != null && referral.getUrgencyIsNotNull())
		{
			//WDEV-20783 - "if" statement below was missing in this method
			// WDEV-20575 - A downgrade only takes place if previous urgency was two week wait!
			if (prevReferralUrgency != null && ReferralUrgency.TWO_WEEK_WAIT.getID() == prevReferralUrgency.getId()
					&& ReferralUrgency.TWO_WEEK_WAIT.getId() != referral.getUrgency().getId())
			{
				// Downgrade - Check the Event that needs to be instantiated - PAS mapping of type DGD required
				try 
				{
					ims.pathways.vo.EventVo pthwEvent = hl7Impl.getEventByTaxonomyMap(TaxonomyType.PAS, "DGD");
					if (pthwEvent == null)
					{
						super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Downgrade from TwoWeekWait or National Screening or Consultant Upgrade - Pas mapping = DGD"); //WDEV-19700
						return;
					}
					patientEvent.setEvent(pthwEvent);
				}
				catch (DomainInterfaceException e) 
				{
					super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, "Event was not found for Downgrade from TwoWeekWait or National Screening or Consultant Upgrade - Pas mapping = DGD " + e.getMessage()); //WDEV-19700
					return;
				}
			}
		}
		
		//WDEV-19700 if prevurgency is equal to current urgency and cancerType is changed to instantiate a target that is different to its previous target, add target without an event
		if (prevReferralUrgency != null && referral.getUrgency()!=null && prevReferralUrgency.getId() == referral.getUrgency().getId() //WDEV-20026
			&& prevCancerType != null && referral.getCancerType()!=null && !getPASTargetByCancerType(prevCancerType).equals(getPASTargetByCancerType(referral.getCancerType()))	)
		{
			try 
			{
				if (target != null)
					hl7Impl.bringTargetIntoScopeWithoutEvent(target, new PatientPathwayJourneyRefVo(domReferral.getJourney().getId(), domReferral.getJourney().getVersion()), new ims.framework.utils.Date());
				
			}
			catch (DomainInterfaceException e) 
			{
				super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.WARNING, e.getMessage());
			}
			return;
		}
		
		
		patientEvent.setJourney(PatientJourneyVoAssembler.create(domReferral.getJourney()));
		patientEvent.setPatient(referral.getPatient());
		patientEvent.setEventStatus(EventStatus.ACTIVE);

		if(patientEvent.getEvent() == null)// temporary	WDEV-19887 -  this should be fixed in WDEV-19700
			return;
		
		hl7Impl.instantiatePatientEvent(patientEvent, eventTargetPASMapping); //WDEV-19700
	
	}
	//WDEV-19700
	private String getPASTargetByCancerType(CancerType prevCancerType)
	{
		if (prevCancerType==null)
			return null;
		
		CancerTypeItemConfigVo cancerTypeItemConfig = getCancerTypeItemConfig(prevCancerType);
		
		if (cancerTypeItemConfig != null && Boolean.TRUE.equals(cancerTypeItemConfig.getDay31Target()))
		{
			return "31D";
		}
		else if (cancerTypeItemConfig != null && Boolean.TRUE.equals(cancerTypeItemConfig.getDay62Target()))
		{
			return "62D";
		}
		
		return null;
	}
	// WDEV-19700
	private CancerTypeItemConfigVo getCancerTypeItemConfig(CancerType cancerType)
	{
		if (cancerType==null)
			return null;
		
		//CancerTypeConfig impl = (CancerTypeConfig) getDomainImpl(CancerTypeConfigImpl.class);
		CancerTypeConfigVo cancerTypeConfig = getCancerTypeConfig();

		if (cancerTypeConfig == null || cancerTypeConfig.getCancerItemConfig() == null || cancerTypeConfig.getCancerItemConfig().size() == 0)
			return null;

		for (int i = 0; i < cancerTypeConfig.getCancerItemConfig().size(); i++)
		{
			if (cancerType.equals(cancerTypeConfig.getCancerItemConfig().get(i).getCancerType()))
				return cancerTypeConfig.getCancerItemConfig().get(i);
		}
		return null;
	}
	public CancerTypeConfigVo getCancerTypeConfig()
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();

		hql.append("from CancerTypeConfig");

		List<?> list = factory.find(hql.toString());

		if (list != null && list.size() > 0)
			return CancerTypeConfigVoAssembler.create( (ims.RefMan.domain.objects.CancerTypeConfig) (list).get(0));

		return null;
	}
	

	//WDEV-7441 - 1.
	public void pukkaJMessaging(CatsReferral doCatsReferral, Boolean isCreateOrder) throws StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		if(isCreateOrder)			
		{
			//BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
			Object[] orderInvAndOrder = createOrder(doCatsReferral, null);
			if(orderInvAndOrder != null)
			{
				OcsOrderSession doOcsOrder = (OcsOrderSession) orderInvAndOrder[1];
				OrderInvestigation doOrderInv = (OrderInvestigation) orderInvAndOrder[0];
				Booking_Appointment doBookedAppt = getBookedAppointment(doCatsReferral);
				if(doBookedAppt != null)
				{
					OrderInvAppt ordInvAppt = new OrderInvAppt();
					ordInvAppt.setOrderInvestigation(doOrderInv);
					ordInvAppt.setAppointment(doBookedAppt);
					ordInvAppt.getOrderInvestigation().setAppointmentDate(doBookedAppt.getAppointmentDate());
					ordInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
					doCatsReferral.getOrderInvAppts().add(ordInvAppt);
				}				
				doCatsReferral.getInvestigationOrders().add(doOcsOrder);
				doCatsReferral.setHasInvestigations(true);
				factory.save(doCatsReferral);
				
				//send message to PukkaJ
				if(doBookedAppt != null)
				{
					OCSExternalEvents implE = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
					implE.generateNewOrderEvent(new Booking_AppointmentRefVo(doBookedAppt.getId(), doBookedAppt.getVersion()) , new OrderInvestigationRefVo(doOrderInv.getId(), doOrderInv.getVersion()));
				}
			}
		}
		else
		{
			//check if bookedAppt exists
			Booking_Appointment doBookedAppt = getBookedAppointment(doCatsReferral);
			//if there is no investigations for referral
			if(doCatsReferral.getInvestigationOrders().size() == 0)
			{
				//BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
				//create one investigation
				Object[] orderInvAndOrder = createOrder(doCatsReferral, null);
				
				if (orderInvAndOrder != null)
				{
					OrderInvestigation doOrderInv = (OrderInvestigation) orderInvAndOrder[0];
					OcsOrderSession doOcsOrder = (OcsOrderSession) orderInvAndOrder[1];

					if(doBookedAppt != null)
					{
						OrderInvAppt ordInvAppt = new OrderInvAppt();
						ordInvAppt.setOrderInvestigation(doOrderInv);
						ordInvAppt.setAppointment(doBookedAppt);
						ordInvAppt.getOrderInvestigation().setAppointmentDate(doBookedAppt.getAppointmentDate());
						ordInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
						doCatsReferral.getOrderInvAppts().add(ordInvAppt);
					}
					doCatsReferral.getInvestigationOrders().add(doOcsOrder);
					doCatsReferral.setHasInvestigations(true);
					getDomainFactory().save(doCatsReferral);

					//send message to PukkaJ
					if(doBookedAppt != null)
					{
						OCSExternalEvents implE = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
						implE.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doBookedAppt.getId(), doBookedAppt.getVersion()) , new OrderInvestigationRefVo(doOrderInv.getId(), doOrderInv.getVersion()));
					}
				}
				
			}
			//if we reach here there is an investigation and an appointment but they were never linked because maybe the sdslookup failed
			//ie. the webservice method in BookAppointment - processAppointmentForPukkaJ was never called - this code is specific to C&B appointments and a manual(maxims) order
			else if(doCatsReferral.getOrderInvAppts().size() == 0 && doBookedAppt != null && doBookedAppt.isIsCABBooking() != null && doBookedAppt.isIsCABBooking())
			{
				OrderInvestigation doOrderInv = null;
				if(doCatsReferral.getInvestigationOrders().size() > 0)
				{
					Iterator itO = doCatsReferral.getInvestigationOrders().iterator();
					if(itO.hasNext())
					{
						OcsOrderSession doOcsOrder = (OcsOrderSession) itO.next();
						Iterator itI = doOcsOrder.getInvestigations().iterator();
						if(itI.hasNext())
							doOrderInv  = (OrderInvestigation) itI.next();
					}
						
				}
					
				OrderInvAppt ordInvAppt = new OrderInvAppt();
				ordInvAppt.setOrderInvestigation(doOrderInv);
				ordInvAppt.setAppointment(doBookedAppt);
				ordInvAppt.getOrderInvestigation().setAppointmentDate(doBookedAppt.getAppointmentDate());
				ordInvAppt.setStatus(getDomLookup(PollStatus.CANCELNOTPROCESSED));
				doCatsReferral.getOrderInvAppts().add(ordInvAppt);
				
				getDomainFactory().save(doCatsReferral);
				
				//send message to PukkaJ
				OCSExternalEvents implE = (OCSExternalEvents) getDomainImpl(OCSExternalEventsImpl.class);
				implE.generateOrderUpdateEvent(new Booking_AppointmentRefVo(doBookedAppt.getId(), doBookedAppt.getVersion()) , new OrderInvestigationRefVo(doOrderInv.getId(), doOrderInv.getVersion()));
			}					
		}
	}
	/**
	 * get a list of default investigations run for the Referral service and
	 * automatically create an order and link the appt if supplied
	 * 
	 * @param doCatsReferral
	 * @param doNewAppt
	 * @return an object array containing the OrderInvestigation and the Order
	 */
	public Object[] createOrder(CatsReferral doCatsReferral, Booking_Appointment doNewAppt) throws StaleObjectException
	{
		if (doCatsReferral == null)
			throw new CodingRuntimeException("doCatsReferral is null in method createOrder");

		Set orderInvestigations = null;

		String invMapping = null;
		if (doCatsReferral.getReferralDetails() != null && doCatsReferral.getReferralDetails().getService() != null)
		{
			if (doCatsReferral.getReferralDetails().getService().getTaxonomyMap() != null)
			{
				Iterator itTax = doCatsReferral.getReferralDetails().getService().getTaxonomyMap().iterator();
				while (itTax.hasNext())
				{
					NonUniqueTaxonomyMap doTaxMap = (NonUniqueTaxonomyMap) itTax.next();  // WDEV-20676 changed to non-unique
					if (doTaxMap.getTaxonomyName().equals(getDomLookup(TaxonomyType.INVESTIGATION)))
					{
						invMapping = doTaxMap.getTaxonomyCode();
						break;
					}
				}
			}
		}

		if (invMapping != null)
		{
			List invs = getDomainFactory().find("from Investigation inv where upper(inv.providerInvCode) = '" + invMapping.toUpperCase() + "'");
			if (invs != null && invs.size() > 0)
			{
				OcsOrderSession doOcsOrder = new OcsOrderSession();
				doOcsOrder.setPatient(doCatsReferral.getPatient());
				doOcsOrder.setClinicalTrial(false);
				doOcsOrder.setAuthorisationOrderStatus(getDomLookup(AuthorisationOrderStatus.AUTHORISED));
				if(doCatsReferral.getReferralDetails() != null)
					doOcsOrder.setResponsibleGp(doCatsReferral.getReferralDetails().getGPName());
				
				orderInvestigations = createOrderInvestigations(invs, doNewAppt, doOcsOrder);
				doOcsOrder.setInvestigations(orderInvestigations);
				doOcsOrder.setWasProcessed(false);
				
				getDomainFactory().save(doOcsOrder);
				return new Object[]{(OrderInvestigation) orderInvestigations.iterator().next(), doOcsOrder};
			}
		}
		return null;
	}
	private Set createOrderInvestigations(List invs, Booking_Appointment doNewAppt, OcsOrderSession doOcsOrder)
	{
		Set orderInvs = new HashSet();
		Iterator it = invs.iterator();
		while (it.hasNext())
		{
			Investigation doInv = (Investigation) it.next();
			OrderInvestigation doOrderInv = new OrderInvestigation();
			doOrderInv.setInvestigation(doInv);
			doOrderInv.setAppointmentDate(doNewAppt != null ? doNewAppt.getAppointmentDate() : null);
			doOrderInv.setOrderDetails(doOcsOrder);

			OrderedInvestigationStatus status = new OrderedInvestigationStatus();
			status.setOrdInvStatus(getDomLookup(OrderInvStatus.ORDERED));
			status.setChangeDateTime(new java.util.Date());
			status.setProcessedDateTime(new java.util.Date());
			status.setChangeUser("ICAB");
			doOrderInv.setOrdInvCurrentStatus(status);
			doOrderInv.getOrdInvStatusHistory().add(status);

			doOrderInv.setWasOrdered(true);
			doOrderInv.setDisplayDateTime(new DateTime().getJavaDate());
			doOrderInv.setDisplayTimeSupplied(true);
			doOrderInv.setDisplayFlag(getDomLookup(OcsDisplayFlag.REQUESTED));
			doOrderInv.setOrdInvSeq(new Integer(0));
			doOrderInv.setWasProcessed(false);

			orderInvs.add(doOrderInv);
		}

		return orderInvs;
	}

	private Booking_Appointment getBookedAppointment(CatsReferral doCatsReferral)
	{
		Booking_Appointment doBookedAppt = null;
		if(doCatsReferral.getAppointments().size() > 0)
		{
			Iterator it = doCatsReferral.getAppointments().iterator();
			while(it.hasNext())
			{
				Booking_Appointment doAppt = (Booking_Appointment) it.next();
				if(doAppt.getApptStatus() != null && doAppt.getApptStatus().equals( getDomLookup(Status_Reason.BOOKED)))
				{
					doBookedAppt = doAppt;
					break;	
				}
						
			}
		}
		return doBookedAppt;
	}

	
	//WDEV-19508
	private boolean isNonDiagnosticAppointment(CatsReferralForRequestServiceVo record)
	{
		if(record != null && record.getDOS() != null && record.getDOS().getContract() != null && record.getDOS().getContract().getContractType() != null)
		{
			if(ReferralManagementContractType.DIAGNOSTIC.getID() == record.getDOS().getContract().getContractType().getId())
				return false;
		}
		
		return true;
	}
	
	private PatientPathwayJourney createJourney(DomainFactory factory, CatsReferralForRequestServiceVo referral) 
	{
		// Only create the patient journey if the flag specified to do this.
		// WDEV-18483 - the patient journey gets created regardless of Elective List flag value
		//if (!ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
		//	return null;
		
		// If a patientjourney already exists for the referral, then don't create a new one
		if (referral != null && referral.getID_CatsReferralIsNotNull())
		{
			CatsReferral domReferral = (CatsReferral) factory.getDomainObject(CatsReferral.class, referral.getID_CatsReferral());
			if (domReferral != null && domReferral.getJourney() != null)
				return domReferral.getJourney();
		}
		
		PatientJourneyVo journey = new PatientJourneyVo();
				
		
		HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
		try 
		{
			// Create the holding referral first
			Referral domReferral = new Referral();
			domReferral.setAuthoringDateTime(new java.util.Date());			
			//WDEV-18395
			if (referral.getPathwayID()!=null && !referral.getPathwayID().equals(""))
				domReferral.setClockId(referral.getPathwayID());
			else
				domReferral.setClockId("MAXIMS_1");
			domReferral.setReferralType(factory.getLookupInstance(ReferralType.INTERNAL.getId()));

			 // WDEV-23419  Include user Id as part of external referral key
			int userId=0;
			ims.framework.interfaces.IAppUser user = super.getLoggedInUser();
			if (user != null)
				userId = user.getUserId();
			domReferral.setExtReferralKey("IMS_" + userId + "_" + new java.util.Date().getTime()); // WDEV-23419 Include UserId
			
			domReferral.setPatient((ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, referral.getPatient().getID_Patient()));
			
			// New Patient - need to save it
			if (referral.getPatientIsNotNull() && !referral.getPatient().getID_PatientIsNotNull())
			{
				//ims.core.patient.domain.objects.Patient domPatient = PatientAssembler.extractPatient(factory, referral.getPatient());
				ims.core.patient.domain.objects.Patient domPatient = (ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, referral.getPatient().getID_Patient());
				factory.save(domPatient);
				domReferral.setPatient(domPatient);
				Patient voPatient = PatientAssembler.create(domPatient);
				journey.setPatient(voPatient);
			}
			else
			{
				ims.core.patient.domain.objects.Patient domPatient = (ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, referral.getPatient().getID_Patient());
				Patient voPatient = PatientAssembler.create(domPatient);
				domReferral.setPatient(domPatient);
				voPatient = PatientAssembler.create(domPatient);
				journey.setPatient( voPatient );

			}
			factory.save(domReferral);
						
			journey.setReferral(new ReferralRefVo(domReferral.getId(), domReferral.getVersion()));
			
			if (referral.getReferralDetailsIsNotNull())
			{
				journey.setStartDate(referral.getReferralDetails().getDateOfReferral());
			}
			
			journey.setExtReferralKey(domReferral.getExtReferralKey());
						
			if(Boolean.TRUE.equals(referral.getRTTClockImpact()))
			{
    			PathwayClockVo clock = new PathwayClockVo();
    			clock.setExtClockId(domReferral.getClockId());
    			clock.setExtClockName("MaximsClock_1");
    			clock.setStartDate(journey.getStartDate());
    			clock.setTargetClockEnd(getTargetClockEnd(clock.getStartDate(), referral));
    			journey.setCurrentClock(clock);
    			if (!journey.getClockHistoryIsNotNull())
    				journey.setClockHistory(new PathwayClockVoCollection());
    			journey.getClockHistory().add(clock);
			}
			
			// Services specialty - if not set then use Emergency
			if (referral.getReferralDetailsIsNotNull() && referral.getReferralDetails().getServiceIsNotNull() && referral.getReferralDetails().getService().getSpecialtyIsNotNull())
				journey = impl.createPatientJourney(journey, null, referral.getReferralDetails().getService().getSpecialty(), null,null);			
			else	
				journey = impl.createPatientJourney(journey, null, Specialty.EMERGENCY, null,null);
			
			return PatientJourneyVoAssembler.extractPatientPathwayJourney(factory, journey);
		} 
		catch (DomainInterfaceException e) 
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Domain Interface Exception occurred creating patient journey - " + e.getMessage());
			return null;
		} 
		catch (StaleObjectException e) 
		{
			super.createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.ERROR, "Stale Object Exception occurred creating patient journey - " + e.getMessage());
			return null;
		}
		
		
		
	}
	private ims.framework.utils.Date getTargetClockEnd(ims.framework.utils.Date date, CatsReferralForRequestServiceVo referral)
	{
		ims.framework.utils.Date startDate = date.copy();

		int daysToRttBreachDate = 0;

		if (referral != null && referral.getReferralDetails() != null)
		{
			
			ContractServiceLocationsConfigVo contrServiceLocationConf = getContractServiceLocConf(referral.getContract(), referral.getReferralDetails().getService());

			if (contrServiceLocationConf != null && contrServiceLocationConf.getDaysToRTTBreachDate() != null)
			{
				daysToRttBreachDate = contrServiceLocationConf.getDaysToRTTBreachDate();
			}
			else if (referral.getContract() != null)
			{
				daysToRttBreachDate = referral.getContract().getDaysToRTTBreachDate();
			}
		}

		return startDate.addDay(daysToRttBreachDate);
	}

	private ContractServiceLocationsConfigVo getContractServiceLocConf(ContractConfigRefVo contractRef, ServiceRefVo serviceRef)
	{
		if (contractRef == null || serviceRef == null)
		{
			return null;
		}
		
		String sql="select serviceLoc from ContractConfig as contractConf left join contractConf.serviceLocations as serviceLoc where contractConf.id = :ContractID and serviceLoc.service.id = :ServiceID" ;
		
		List <?>  listServiceLoc=getDomainFactory().find(sql,new String[]{"ContractID", "ServiceID"}, new Object[]{contractRef.getID_ContractConfig(), serviceRef.getID_Service()}) ;
		
		if (listServiceLoc != null && listServiceLoc.size() > 0)
			return ContractServiceLocationsConfigVoAssembler.create((ContractServiceLocationsConfig)listServiceLoc.get(0));
		
		return null;
	}
	
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private PathwayRTTStatus createPathwayRTTStatus(CatsReferral record, boolean onlyNational12, Date eventDateTime) throws DomainInterfaceException
	{
		if(!ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue())
			return null;
		
		if(record == null)
			return null;
		
		int nationalCode = OTHER_SOURCE_OF_REFERRAL_NAT_CODE;
		
		if( onlyNational12 == false)
		{
    		if(record.getReferralDetails() != null && record.getReferralDetails().getReferrerType() != null && SourceOfReferral.GP.getID() == record.getReferralDetails().getReferrerType().getId())
    		{
    			nationalCode = GP_SOURCE_OF_REFERRAL_NAT_CODE;
    		}
		}
		
		RTTStatusPoint rttStatusPoint = getRTTStatusPoint(nationalCode);
		
		//WDEV-19383
		if (rttStatusPoint == null)
			throw new DomainInterfaceException("No RTT Status Point was found for National Code: " + nationalCode);
		
		Object mos = getMosUser();
		MemberOfStaff doMos = null;
		
		if(mos instanceof MemberOfStaffLiteVo)
		{
			doMos = MemberOfStaffLiteVoAssembler.extractMemberOfStaff(getDomainFactory(), (MemberOfStaffLiteVo) mos);
		}
		
		PathwayRTTStatus pathwayRTTStatus = new PathwayRTTStatus();
		pathwayRTTStatus.setRTTStatus(rttStatusPoint);
		pathwayRTTStatus.setStatusBy(doMos);
		pathwayRTTStatus.setStatusDateTime(eventDateTime);
		
		if(record.getJourney() != null && record.getJourney().getCurrentClock() != null)
    	{
			record.getJourney().getCurrentClock().setCurrentRTTStatus(pathwayRTTStatus);
    			
    		if(record.getJourney().getCurrentClock().getRTTStatusHistory() == null)
    			record.getJourney().getCurrentClock().setRTTStatusHistory(new java.util.ArrayList());
    			
    		record.getJourney().getCurrentClock().getRTTStatusHistory().add(pathwayRTTStatus);
    	}
		
		return pathwayRTTStatus;
	}
	private RTTStatusPoint getRTTStatusPoint(int nationalCode)
	{
		String query = "select rtt from RTTStatusPoint as rtt where rtt.nationalCode = :NationalCode";
		
		List<?> rttList = getDomainFactory().find(query, new String[] {"NationalCode"}, new Object[] {nationalCode});
		
		if(rttList != null && rttList.size() > 0 && rttList.get(0) instanceof RTTStatusPoint)
		{
			return (RTTStatusPoint) rttList.get(0);
		}
		
		return null;
	}

	private void createPatientEvent(CatsReferralForRequestServiceVo record, CatsReferral domCatsReferral, PathwayRTTStatus rttStatus) throws DomainInterfaceException, StaleObjectException
	{
		RTTStatusEventMapVo rttMap = getRTTStatusEventMap(rttStatus.getRTTStatus());
		
		if(rttMap != null && rttMap.getEvent() != null)
		{
			PatientEventVo patEvent = new PatientEventVo();
			patEvent.setPatient(record.getPatient());
			patEvent.setEvent(rttMap.getEvent());
			patEvent.setEventDateTime(new DateTime());
			patEvent.setEventStatus(EventStatus.ACTIVE);
			patEvent.setJourney(PatientJourneyVoAssembler.create(domCatsReferral.getJourney()));
			
			HL7PathwayIf impl = (HL7PathwayIf) getDomainImpl(HL7PathwayIfImpl.class);
			impl.instantiatePatientEvent(patEvent);
		}
	}
	private RTTStatusEventMapVo getRTTStatusEventMap(RTTStatusPoint rttStatusPoint)
	{
		if(rttStatusPoint == null)
			return null;
		
		String query = "select rttMap from RTTStatusEventMap as rttMap left join rttMap.currentRTTStatus as rtt where rtt.id = :RTTStatusPoint and rttMap.event is not null and rttMap.active = 1 and rttMap.encounterType is null";
		List<?> listRTTMap = getDomainFactory().find(query, new String[] {"RTTStatusPoint"}, new Object[] {rttStatusPoint.getId()});
		
		if(listRTTMap != null && listRTTMap.size() > 0 && listRTTMap.get(0) instanceof RTTStatusEventMap)
		{
			return RTTStatusEventMapVoAssembler.create((RTTStatusEventMap) listRTTMap.get(0));
		}
		
		return null;
	}

	
	
	//-------end of wdev-19930
	
	
	
	/**
	 * This function is used to remove the OutcomeActions record marked for removal. If these OutcomeActions are already saved
	 * they will be marked as RIE and the link in the AppointmentOutcome will be cleared. It will also mark as RIE the 
	 * PatientElectiveList record associated with the OutcomeAction
	 * @param appointmentOutcome
	 * @return
	 * @throws StaleObjectException 
	 */
	private void removeOutcomeActions(BookingAppointmentOutcomeVo appointmentOutcome , CatsReferralRefVo parrentCatsReferral) throws StaleObjectException
	{
		// Test the AppointmentOutcome parameter to have actions
		if (appointmentOutcome == null || appointmentOutcome.getOutcomeActions() == null)
			return;
		
		
		// Iterate in reverse order the OutcomeActions collection as this will be a removal process
		for (int i = appointmentOutcome.getOutcomeActions().size() - 1; i >= 0; i--)
		{
			AppointmentOutcomeActionVo outcomeAction = appointmentOutcome.getOutcomeActions().get(i);
			
			// If the OutcomeAction was marked for removal
			if (Boolean.TRUE.equals(outcomeAction.getRemove()))
			{
				// Remove the OutcomeAction from AppointmentOutcome
				appointmentOutcome.getOutcomeActions().remove(outcomeAction);

				Integer patientID = null;
				DomainFactory factory = getDomainFactory();
				
				// Mark as RIE process for PatientElectiveList
				
				// 1. If PatientElectiveList was added as part of an Add Later action
				PatientElectiveListAddLaterVo patientElectiveListAddLater = outcomeAction.getWaitingListAction();
				if (patientElectiveListAddLater != null && patientElectiveListAddLater.getID_PatientElectiveList() != null)
				{
					patientID = patientElectiveListAddLater.getPatient().getID_Patient();
					// Set the creating appointment and the appointment outcome action to null so they can be erased
					// and avoid the ConstraintViolationException 
					patientElectiveListAddLater.setCreatingAppointment(null);
					patientElectiveListAddLater.setAppointmentOutcomeAction(null);
					PatientElectiveList patientElectiveList = PatientElectiveListAddLaterVoAssembler.extractPatientElectiveList(factory, patientElectiveListAddLater);
					factory.save(patientElectiveList);

					factory.markAsRie(PatientElectiveList.class, patientElectiveListAddLater.getID_PatientElectiveList(), null, patientID, null, null, "Appointment Outcome Action removed.");
				}
				
				// 2. If PatientElectiveList was added as part of an Add now action
				PatientElectiveListAddLaterVo patientElectiveListAddNow = outcomeAction.getPlannedListAction();
				if (patientElectiveListAddNow != null && patientElectiveListAddNow.getID_PatientElectiveList() != null)
				{
					patientID = patientElectiveListAddNow.getPatient().getID_Patient();
					
					// If the PatientElectiveList record had a TCI saved, then RIE the TCI record as well
					if (patientElectiveListAddNow.getTCIDetails() != null && patientElectiveListAddNow.getTCIDetails().getID_TCIForPatientElectiveList() != null)
					{
						factory.markAsRie(TCIForPatientElectiveList.class, patientElectiveListAddNow.getTCIDetails().getID_TCIForPatientElectiveList(), null, patientID, null, null, "Appointment Outcome Action removed.");
					}
					
					// Set the creating appointment and the appointment outcome action to null so they can be erased
					// and avoid the ConstraintViolationException 
					patientElectiveListAddNow.setCreatingAppointment(null);
					patientElectiveListAddNow.setAppointmentOutcomeAction(null);
					PatientElectiveList patientElectiveList = PatientElectiveListAddLaterVoAssembler.extractPatientElectiveList(factory, patientElectiveListAddNow);
					factory.save(patientElectiveList);
					
					factory.markAsRie(PatientElectiveList.class, patientElectiveListAddNow.getID_PatientElectiveList(), null, patientID, null, null, "Appointment Outcome Action removed.");
				}
				
				// 3. Future Appointment was added and needs to be removed
				FutureAppointmentDetailsVo futureAppointment = outcomeAction.getFutureAppointment();
				if (futureAppointment != null && futureAppointment.getID_FutureAppointmentDetails() != null)
				{
					factory.markAsRie(FutureAppointmentDetails.class, futureAppointment.getID_FutureAppointmentDetails(), null, patientID, null, null, "Appointment Outcome Action removed.");
				}
				
				// 4. Inter Provider Transfer was added and needs to be removed
				InterProviderTransferOutVo interProviderTransfer = outcomeAction.getInterProviderTransfer();
				if (interProviderTransfer != null)
				{
					outcomeAction.setInterProviderTransfer(null);
					AppointmentOutcomeAction domAction = AppointmentOutcomeActionVoAssembler.extractAppointmentOutcomeAction(factory, outcomeAction);
					factory.save(domAction);
					outcomeAction = AppointmentOutcomeActionVoAssembler.create(domAction);
				}
				
				// 5. Request for Service
				LinkedCatsReferralForOutcomeVoCollection requestsForService = outcomeAction.getRequestsForService();
				if (requestsForService != null)
				{
					for (LinkedCatsReferralForOutcomeVo referral : requestsForService)
					{
						// Get the Linked Referral record data needed for RIE process
						LinkedCatsReferral_RIE_OutcomeVo linkedReferral = LinkedCatsReferral_RIE_OutcomeVoAssembler.create((LinkedCatsReferral) factory.getDomainObject(LinkedCatsReferral.class, referral.getID_LinkedCatsReferral()));
						if (linkedReferral != null)
						{

							// If the Linked Referral has a CatsReferral - also mark it as RIE
							if (linkedReferral.getReferral() != null)
							{
								// If the CatsReferral has a Journey - also mark it as RIE
								if (linkedReferral.getReferral().getJourney() != null)
								{
									// Mark as RIE the Core.Referral for the Patient Journey
									if (linkedReferral.getReferral().getJourney().getReferral() != null)
									{
										factory.markAsRie(Referral.class, linkedReferral.getReferral().getJourney().getReferral().getID_Referral() , null, patientID, null, null, "RIE Appointment Outcome");
									}

									factory.markAsRie(PatientPathwayJourney.class, linkedReferral.getReferral().getJourney().getID_PatientPathwayJourney(), null, patientID, null, null, "RIE Appointment Outcome");
								}

								// Mark as RIE the Care Context for the Referral
								factory.markAsRie(CareContext.class, linkedReferral.getReferral().getCareContext().getID_CareContext(), null, patientID, null, null, "RIE Appointment Outcome");

								// Mark as RIE the CatsReferal
								factory.markAsRie(CatsReferral.class, linkedReferral.getReferral().getID_CatsReferral(), null, patientID, null, null, "RIE Appointment Outcome");
							}

							// Mark as RIE the Linked Cats Referral record
							factory.markAsRie(LinkedCatsReferral.class, linkedReferral.getID_LinkedCatsReferral(), null, patientID, null, null, "RIE Appointment Outcome");
						}
					}
				}
				
				
				// 6. For Transfer of Care - RIE the Linked CatsReferral record
				// For 'Transfer of Care' and appointment action - RIE the Linked CatsReferral record
				if (AppointmentAction.TRANSFER_OF_CARE.equals(outcomeAction.getAppointmentAction())	&& outcomeAction.getTransferOfCare() != null)
				{
					// Get the Linked Referral record data needed for RIE process
					LinkedCatsReferral_RIE_OutcomeVo linkedReferralTransferOfCare = LinkedCatsReferral_RIE_OutcomeVoAssembler.create(getLinkedCatsReferralCreatedByOutcomeAction(appointmentOutcome, ReferralRelationType.TRANSFER_OF_CARE));
					if (linkedReferralTransferOfCare != null)
					{
						// If the Linked Referral has a CatsReferral - also mark it as RIE
						if (linkedReferralTransferOfCare.getReferral() != null)
						{
							// If the CatsReferral has a Journey - also mark it as RIE
							if (linkedReferralTransferOfCare.getReferral().getJourney() != null)
							{
								// Mark as RIE the Core.Referral for the Patient Journey
								if (linkedReferralTransferOfCare.getReferral().getJourney().getReferral() != null)
								{
									factory.markAsRie(Referral.class, linkedReferralTransferOfCare.getReferral().getJourney().getReferral().getID_Referral() , null, patientID, null, null, "RIE Appointment Outcome");
								}

								factory.markAsRie(PatientPathwayJourney.class, linkedReferralTransferOfCare.getReferral().getJourney().getID_PatientPathwayJourney(), null, patientID, null, null, "RIE Appointment Outcome");
							}

							// Mark as RIE the Care Context for the Referral
							factory.markAsRie(CareContext.class, linkedReferralTransferOfCare.getReferral().getCareContext().getID_CareContext(), null, patientID, null, null, "RIE Appointment Outcome");

							// Mark as RIE the CatsReferal
							factory.markAsRie(CatsReferral.class, linkedReferralTransferOfCare.getReferral().getID_CatsReferral(), null, patientID, null, null, "RIE Appointment Outcome");
						}

						// Mark as RIE the Linked Cats Referral record
						factory.markAsRie(LinkedCatsReferral.class, linkedReferralTransferOfCare.getID_LinkedCatsReferral(), null, patientID, null, null, "RIE Appointment Outcome");

						// In case this is was a TRANSFER OF CARE then set the parent Cats Referral RTT Clock Impact to TRUE
						// and restore the status of the parent Cats Referral
						if (AppointmentAction.TRANSFER_OF_CARE.equals(outcomeAction.getAppointmentAction()))
						{
							updateParentCatsReferral(linkedReferralTransferOfCare, patientID);
						}
					}
				}
				
				// Remove action from Appointment Outcome Actions collection
				appointmentOutcome.getOutcomeActions().remove(outcomeAction);
				// 5. Mark the OutcomeAction as RIE in the end
//				factory.markAsRie(AppointmentOutcomeAction.class, outcomeAction.getID_AppointmentOutcomeAction(), null, patientID, null, null, "Appointment Outcome Action removed.");
			}
		}
	}
	
	
	
	private AppointmentOutcomeActionRefVo getSavedAppointmentOutcomeAction(BookingAppointmentOutcomeVo appointmentOutcome, AppointmentOutcomeActionVo outcomeAction)
	{
		if (appointmentOutcome == null || appointmentOutcome.getOutcomeActions() == null)
			return null;
		
		for (AppointmentOutcomeActionVo action : appointmentOutcome.getOutcomeActions())
		{
			if (action.getAppointmentAction() != null && action.getAppointmentAction().equals(outcomeAction.getAppointmentAction()))
				return action;
		}
		
		return null;
	}

	
	public PatientProcedureForAppointmentOutcomeVo getPatientProcedure(PatientProcedureRefVo patientProcedureRef)
	{
		if(patientProcedureRef == null || patientProcedureRef.getID_PatientProcedure() == null)
			return null;
		
		PatientProcedure doPatientProcedure = (PatientProcedure) getDomainFactory().getDomainObject(PatientProcedure.class, patientProcedureRef.getID_PatientProcedure());
		
		return PatientProcedureForAppointmentOutcomeVoAssembler.create(doPatientProcedure);
	}

	public CareContextShortVo getCareContext(Booking_AppointmentRefVo bookApptId)
	{
		if(bookApptId == null || bookApptId.getID_Booking_Appointment() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select cc from CatsReferral as cats left join cats.appointments as appt left join cats.careContext as cc where appt.id = :ApptId";
		
		List<?> careContextList = factory.find(query, new String[] {"ApptId"}, new Object[] {bookApptId.getID_Booking_Appointment()});
		
		if(careContextList != null && careContextList.size() > 0)
			return CareContextShortVoAssembler.create((CareContext) careContextList.get(0));
		
		return null;
	}

	public AppointmentOutcomeConfigVo getAppointmentOutcomeConfigByApptOutcomeLookup(ApptOutcome apptOutcomeLookup)
	{
		if(apptOutcomeLookup == null)
			return null;
		
		AppointmentOutcomeConfig impl = (AppointmentOutcomeConfig) getDomainImpl(AppointmentOutcomeConfigImpl.class);
		return impl.getAppointmentOutcomeConfigByApptOutcomeLookup(apptOutcomeLookup);
	}

	public Boolean hasReferralActivePatientElectiveList(Booking_AppointmentRefVo bookApptRef)
	{
		if(bookApptRef == null || bookApptRef.getID_Booking_Appointment() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select count(pEl) from PatientElectiveList as pEl left join pEl.electiveListStatus as es left join es.electiveListStatus as s left join pEl.referral as c left join c.appointments as a where a.id = :BookAppointmentId and s.id not in (:RemovedStatus)";
		
		Object[] count = factory.find(query, new String[] {"BookAppointmentId", "RemovedStatus"}, new Object[] {bookApptRef.getID_Booking_Appointment(), WaitingListStatus.REMOVED.getID()}).toArray();
		
		if(count != null && count.length > 0 && ((Long) count[0]).intValue() > 0)
			return true;
		
		return false;	
	}

	public PatientDiagnosisForAppointmentOutcomeVo getPatientDiagnosis(PatientDiagnosisRefVo patientDiagnosisRef)
	{
		if(patientDiagnosisRef == null || patientDiagnosisRef.getID_PatientDiagnosis() == null)
			return null;
		
		PatientDiagnosis doPatientDiagnosis = (PatientDiagnosis) getDomainFactory().getDomainObject(PatientDiagnosis.class, patientDiagnosisRef.getID_PatientDiagnosis());
		
		return PatientDiagnosisForAppointmentOutcomeVoAssembler.create(doPatientDiagnosis);
	}

	public CatsReferralForSessionManagementVo getCatsReferral(Booking_AppointmentRefVo bookApptRef)
	{
		if(bookApptRef == null || bookApptRef.getID_Booking_Appointment() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select cats from CatsReferral as cats left join cats.appointments as appt where appt.id = :ApptId";
		
		List<?> catsReferralList = factory.find(query, new String[] {"ApptId"}, new Object[] {bookApptRef.getID_Booking_Appointment()});
		
		if(catsReferralList != null && catsReferralList.size() > 0 && catsReferralList.get(0) instanceof CatsReferral)
		{
			return CatsReferralForSessionManagementVoAssembler.create((CatsReferral) catsReferralList.get(0));
		}
		
		return null;
	}


	public AppointmentOutcomeConfigVoCollection listAppointmentOutcomeByAppointmentStatus(Status_Reason status)
	{
		if (status == null || !(Status_Reason.DNA.equals(status) || Status_Reason.NOT_SEEN.equals(status) || Status_Reason.SEEN.equals(status)))
			return null;
		
		StringBuilder query = new StringBuilder("SELECT outcomeConfig FROM AppointmentOutcomeConfig AS outcomeConfig ");
		
		if (Status_Reason.DNA.equals(status))
			query.append("WHERE outcomeConfig.usedForDNA = 1");
		else if (Status_Reason.NOT_SEEN.equals(status))
			query.append("WHERE outcomeConfig.usedForNotSeen = 1");
		else if (Status_Reason.SEEN.equals(status))
			query.append("WHERE outcomeConfig.usedForSeen = 1");
		
		return AppointmentOutcomeConfigVoAssembler.createAppointmentOutcomeConfigVoCollectionFromAppointmentOutcomeConfig(getDomainFactory().find(query.toString()));
	}
	
	//
	public Boolean hasTCI(Booking_AppointmentRefVo appointment)
	{
		if (appointment == null)
			return Boolean.FALSE;
		
		long count = 0;
		
		String query = "SELECT COUNT (tci.id) FROM TCIForPatientElectiveList AS tci LEFT JOIN tci.appointment AS appt WHERE appt.id = :APPT_ID and tci.isRIE is null";
		
		//WDEV-23321
		try
		{
			count = getDomainFactory().countWithHQL(query, new String[] {"APPT_ID"}, new Object[] {appointment.getID_Booking_Appointment()});
		}
		catch (RuntimeException e) {
			if (e instanceof LockAcquisitionException) 
			{
				try
				{
					count = getDomainFactory().countWithHQL(query, new String[] {"APPT_ID"}, new Object[] {appointment.getID_Booking_Appointment()});
				}
				catch (RuntimeException e1) 
				{
					if (e1 instanceof LockAcquisitionException) 
					{
						throw new StaleStateException(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					}
				}
			}
		}
		//WDEV-23321 ends here
		if (count > 0)
			return Boolean.TRUE;
		
		return Boolean.FALSE;
	}

	
	public Integer markAsRIE_OutcomeAndActions(Booking_AppointmentRefVo appointmentRef) throws DomainInterfaceException, StaleObjectException
	{
		if (appointmentRef == null || appointmentRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Cannot RIE appointment outcome for null appointment parameter");
		
		DomainFactory factory = getDomainFactory();
		BookingAppointment_RIE_OutcomeVo appointment = getBookingAppointmentForRIE(appointmentRef); 


		boolean hasClockImpact = Boolean.TRUE.equals(appointment.getOutcomeHasRTTClockImpact());
		ApptOutcome outcomeBeeingReverted = appointment.getOutcome();
		
		// Get current appointment status for RIE purpose
		Appointment_StatusForAppointmentOutcomeVo statusToRIE = appointment.getCurrentStatusRecord();
		
		// Set current status to previous non-RIEd status		
		Appointment_StatusForAppointmentOutcomeVo historyStatus = getPreviousStatus(appointment.getApptStatusHistory(),statusToRIE);

		appointment.setApptStatus(historyStatus != null && Status_Reason.ARRIVAL.equals(historyStatus.getStatus()) ? Status_Reason.ARRIVAL : Status_Reason.BOOKED);
		appointment.setApptStatusReas(null);
		appointment.setCurrentStatusRecord(historyStatus);

		
		// Nullify the appointment fields
		appointment.setSeenBy(null);
		appointment.setSeenTime(null);
		appointment.setApptCompleteTime(null);
		
		appointment.setOutcome(null);
		appointment.setOutcomeDateTime(null);
		appointment.setOutcomeReason(null);
		appointment.setOutcomeComments(null);
		appointment.setWasFirstDefinitiveTreatment(null);
		appointment.setOutcomeHasRTTClockImpact(null);
		appointment.setStatusSavedFromOutcome(null);
		appointment.setApptBookedOnSameDay(null);

		// Mark as RIE the appointment actions associated data
		if (appointment.getOutcomeActions() != null)
		{
			for (AppointmentOutcomeAction_RIE_OutcomeVo outcomeAction : appointment.getOutcomeActions())
			{
				markAsRIE_OutcomeActionData(outcomeAction, appointment.getPatient().getID_Patient());
			}
		}

		// The Appointment Outcome Actions are linked as composite in BO,
		// so marking the collection as null it will actually delete them from database
		appointment.setOutcomeActions(null);
		
		Booking_Appointment domAppointment = BookingAppointment_RIE_OutcomeVoAssembler.extractBooking_Appointment(factory, appointment);
		factory.save(domAppointment);
		factory.markAsRie(Appointment_Status.class, statusToRIE.getID_Appointment_Status(), null, appointment.getPatient().getID_Patient(), null, null, "RIE Appointment Outcome");
	
		// If the Appointment Outcome had a clock impact attempt to automatically undo the ClockImpact of the referral
		// Or if the Appointment Outcome have set the Referral to End Of Care
		if (hasClockImpact || ApptOutcome.DECISION_NOT_TO_TREAT.equals(outcomeBeeingReverted)|| ApptOutcome.PATIENT_DECLINED_OFFER.equals(outcomeBeeingReverted))
		{
			try
			{
				Class<?> referralImpl = Class.forName("ims.RefMan.domain.impl.ReferralDetailsImpl");
				IRecordRTTClockImpact clockImpactImpl = (IRecordRTTClockImpact) getDomainImpl(referralImpl);
				// TODO: Optimize this VO used - changed to use a lighter one
				BookingAppointmentOutcomeVo appointmentUndoClockImpact = BookingAppointmentOutcomeVoAssembler.create(domAppointment);
				Integer returnValue = clockImpactImpl.undoAppointmentOutcomeClockImpact(appointmentUndoClockImpact, appointment.getRTTClockImpact(), outcomeBeeingReverted);
				
				if (IRecordRTTClockImpact.NOT_LAST_IMPACT.equals(returnValue))
					return UNDO_OUTCOME_SUCCESS_NOT_LAST_IMPACT;
			}
			catch (ClassNotFoundException exception)
			{
				createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Class 'ReferralDetailsImpl' was not found when attempting to record RTT Clock Impact of the AppointmentOutcome. This functionality might not be available in the application.");
			}
		}
		
		createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Appointment outcome has been marked as RIE.");
		
		return UNDO_OUTCOME_SUCCESS;
	}
	

	/**
	 * Function to Mark as RiE the data associated with an outcome action
	 * @param outcomeAction
	 * @param patientID
	 * @throws StaleObjectException 
	 */
	private void markAsRIE_OutcomeActionData(AppointmentOutcomeAction_RIE_OutcomeVo outcomeAction, Integer patientID) throws StaleObjectException
	{
		if (outcomeAction == null)
			return;
		
		DomainFactory factory = getDomainFactory();
		
		PatientElectiveListRefVo patientElectiveListRef = outcomeAction.getPatientElectiveList();
		FutureAppointmentDetailsRefVo futureAppointmentRef = outcomeAction.getFutureAppointmentDetail();
		InterProviderTransferOutRefVo careTransferRef = outcomeAction.getIPTOUT();
		LinkedCatsReferralRefVoCollection linkedRequestsForService = outcomeAction.getLinkedRequestForService();
		LinkedCatsReferralRefVo linkedTransferOfCare = outcomeAction.getLinkedTransferOfCare();


		// For 'ADD to Waiting List' and 'ADD to Planned List' appointment actions - RIE the Patient Elective List record
		if ((AppointmentAction.WAITING_LIST_ACTION.equals(outcomeAction.getAppointmentAction())
				|| AppointmentAction.PLANNED_LIST_ACTION.equals(outcomeAction.getAppointmentAction())
				|| AppointmentAction.BOOKED_LIST_ACTION.equals(outcomeAction.getAppointmentAction()))
			&& patientElectiveListRef != null)
		{
			// Get the Patient Elective List record data needed for RIE process
			PatientElectiveList_RIE_AppointmentOutcomeVo patientElectiveList = PatientElectiveList_RIE_AppointmentOutcomeVoAssembler.create((PatientElectiveList) factory.getDomainObject(PatientElectiveList.class, patientElectiveListRef.getID_PatientElectiveList()));

			// If the Patient Elective List record has TCI details - also mark them as RIE
			if (patientElectiveList.getTCIDetails() != null)
			{
				factory.markAsRie(TCIForPatientElectiveList.class, patientElectiveList.getTCIDetails().getID_TCIForPatientElectiveList(), null, patientID, null, null, "RIE Appointment Outcome");
			}
			
			// Set the creating appointment and the appointment outcome action to null so they can be erased
			// and avoid the ConstraintViolationException 
			patientElectiveList.setCreatingAppointment(null);
			patientElectiveList.setAppointmentOutcomeAction(null);

			// Update the Patient Elective List with cleared links
			PatientElectiveList domPatientElectiveList = PatientElectiveList_RIE_AppointmentOutcomeVoAssembler.extractPatientElectiveList(factory, patientElectiveList);
			factory.save(domPatientElectiveList);
			
			// Mark as RIE the Patient Elective List record
			factory.markAsRie(PatientElectiveList.class, patientElectiveList.getID_PatientElectiveList(), null, patientID, null, null, "RIE Appointment Outcome");
		}
		
		// For 'ADD Future Appointment' appointment action - RIE the Future Appointment action
		if (AppointmentAction.BOOK_APPT_ACTION.equals(outcomeAction.getAppointmentAction())
				&& futureAppointmentRef != null)
		{
			factory.markAsRie(FutureAppointmentDetails.class, futureAppointmentRef.getID_FutureAppointmentDetails(), null, patientID, null, null, "RIE Appointment Outcome");
		}
		
		
		// For 'Request for Service' appointment action - RIE the Linked CatsReferral records
		if (AppointmentAction.REQUEST_FOR_SERVICE_ACTION.equals(outcomeAction.getAppointmentAction()) && linkedRequestsForService != null)
		{
			for (LinkedCatsReferralRefVo referral : linkedRequestsForService)
			{
				// Get the Linked Referral record data needed for RIE process
				LinkedCatsReferral_RIE_OutcomeVo linkedReferral = LinkedCatsReferral_RIE_OutcomeVoAssembler.create((LinkedCatsReferral) factory.getDomainObject(LinkedCatsReferral.class, referral.getID_LinkedCatsReferral()));
				
				// If the Linked Referral has a CatsReferral - also mark it as RIE
				if (linkedReferral.getReferral() != null)
				{
					// If the CatsReferral has a Journey - also mark it as RIE
					if (linkedReferral.getReferral().getJourney() != null)
					{
						// Mark as RIE the Core.Referral for the Patient Journey
						if (linkedReferral.getReferral().getJourney().getReferral() != null)
						{
							factory.markAsRie(Referral.class, linkedReferral.getReferral().getJourney().getReferral().getID_Referral() , null, patientID, null, null, "RIE Appointment Outcome");
						}
						
						factory.markAsRie(PatientPathwayJourney.class, linkedReferral.getReferral().getJourney().getID_PatientPathwayJourney(), null, patientID, null, null, "RIE Appointment Outcome");
					}

					// Mark as RIE the Care Context for the Referral
					factory.markAsRie(CareContext.class, linkedReferral.getReferral().getCareContext().getID_CareContext(), null, patientID, null, null, "RIE Appointment Outcome");

					// Mark as RIE the CatsReferal
					factory.markAsRie(CatsReferral.class, linkedReferral.getReferral().getID_CatsReferral(), null, patientID, null, null, "RIE Appointment Outcome");
				}
				
				// Mark as RIE the Linked Cats Referral record
				factory.markAsRie(LinkedCatsReferral.class, linkedReferral.getID_LinkedCatsReferral(), null, patientID, null, null, "RIE Appointment Outcome");
			}
		}
		
		
		// For 'Transfer of Care' and appointment action - RIE the Linked CatsReferral record
		if (AppointmentAction.TRANSFER_OF_CARE.equals(outcomeAction.getAppointmentAction())	&& linkedTransferOfCare != null)
		{
			// Get the Linked Referral record data needed for RIE process
			LinkedCatsReferral_RIE_OutcomeVo linkedReferral = LinkedCatsReferral_RIE_OutcomeVoAssembler.create((LinkedCatsReferral) factory.getDomainObject(LinkedCatsReferral.class, linkedTransferOfCare.getID_LinkedCatsReferral()));
			
			// If the Linked Referral has a CatsReferral - also mark it as RIE
			if (linkedReferral.getReferral() != null)
			{
				// If the CatsReferral has a Journey - also mark it as RIE
				if (linkedReferral.getReferral().getJourney() != null)
				{
					// Mark as RIE the Core.Referral for the Patient Journey
					if (linkedReferral.getReferral().getJourney().getReferral() != null)
					{
						factory.markAsRie(Referral.class, linkedReferral.getReferral().getJourney().getReferral().getID_Referral() , null, patientID, null, null, "RIE Appointment Outcome");
					}
					
					factory.markAsRie(PatientPathwayJourney.class, linkedReferral.getReferral().getJourney().getID_PatientPathwayJourney(), null, patientID, null, null, "RIE Appointment Outcome");
				}

				// Mark as RIE the Care Context for the Referral
				factory.markAsRie(CareContext.class, linkedReferral.getReferral().getCareContext().getID_CareContext(), null, patientID, null, null, "RIE Appointment Outcome");

				// Mark as RIE the CatsReferal
				factory.markAsRie(CatsReferral.class, linkedReferral.getReferral().getID_CatsReferral(), null, patientID, null, null, "RIE Appointment Outcome");
			}
			
			// Mark as RIE the Linked Cats Referral record
			factory.markAsRie(LinkedCatsReferral.class, linkedReferral.getID_LinkedCatsReferral(), null, patientID, null, null, "RIE Appointment Outcome");
			
			// In case this is was a TRANSFER OF CARE then set the parent Cats Referral RTT Clock Impact to TRUE
			// and restore the status of the parent Cats Referral
			if (AppointmentAction.TRANSFER_OF_CARE.equals(outcomeAction.getAppointmentAction()))
			{
				updateParentCatsReferral(linkedReferral, patientID);
			}
		}
		
		// For 'Transfer to Provider' appointment action - RIE the InterProvider Transfer record
		if (AppointmentAction.TRANSFER_ACTION.equals(outcomeAction.getAppointmentAction())
				&& careTransferRef != null)
		{
			// The link between BOs is composite, DO NOT 'Mark as RIE' as the appointment outcomes are already being deleted at the end of the RIE process
			outcomeAction.setIPTOUT(null);
		}

		
		// Do NOT 'Mark as RIE' the AppointmentOutcomeAction record because:
		// - The aggregation link between BookingAppointment and AppointmentOutcomeAction is set to composite, so setting the appointment.OutcomeAction to null
		// will actually delete it from database. The next AppointmentOutcomeAction created could have the same ID as the one just deleted. The 'Mark as RIE'
		// mechanism will add the ID of the record marked to a configuration table, which has a unique index based on DomainObject class and ID. But because
		// the second AppointmentOutcomeAction has the same ID as the first, second recorded AppointmentOutcomeAction will be prevented from being marked as
		// RIE, stopping a second UNDO action on the appointment outcome
		
	}

	
	
	private void updateParentCatsReferral(LinkedCatsReferral_RIE_OutcomeVo linkedReferral, Integer patientID) throws StaleObjectException
	{
		CatsReferralParentVo parentCatsReferral = getParentCatsReferralForLinkedCatsReferral(linkedReferral, ReferralRelationType.TRANSFER_OF_CARE);
		
		if (parentCatsReferral != null)
		{
			parentCatsReferral.setRTTClockImpact(Boolean.TRUE);
			
			// Get current appointment status for RIE purpose
			CatsReferralStatusLiteVo statusToRIE = parentCatsReferral.getCurrentStatus();
			
			if (parentCatsReferral.getStatusHistory() != null)
			{
				parentCatsReferral.getStatusHistory().sort(SortOrder.DESCENDING);
				
				if (parentCatsReferral.getStatusHistory().size() > 1)
					parentCatsReferral.setCurrentStatus(parentCatsReferral.getStatusHistory().get(1));
				else
					parentCatsReferral.setCurrentStatus(null);
			}
			
			CatsReferral domCatsReferral = CatsReferralParentVoAssembler.extractCatsReferral(getDomainFactory(), parentCatsReferral);
			getDomainFactory().save(domCatsReferral);
			
			getDomainFactory().markAsRie(CATSReferralStatus.class, statusToRIE.getID_CATSReferralStatus(), null, patientID, null, null, "RIE Appointment Outcome");
		}
	}

	
	/**
	 * Function used to retrieve the data needed for RIE Outcome & Actions process 
	 * @param appointmentRef
	 * @return
	 */
	private BookingAppointment_RIE_OutcomeVo getBookingAppointmentForRIE(Booking_AppointmentRefVo appointment)
	{
		// Check for valid appointment reference
		if (appointment == null || appointment.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Invallid Argurment - appointmentRef is null or ID not provided in method getBookingAppointmentForRIE");
		
		// Retrieve the basic data from database
		BookingAppointment_RIE_OutcomeVo appointmentOutcome = BookingAppointment_RIE_OutcomeVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(Booking_Appointment.class, appointment.getID_Booking_Appointment()));
		

		// Update the Appointment Outcome Action records with unmapped data
		if (appointmentOutcome.getOutcomeActions() != null)
		{
			for (AppointmentOutcomeAction_RIE_OutcomeVo action : appointmentOutcome.getOutcomeActions())
			{
				// Retrieve the Patient Elective List created as a result of this action
				if (AppointmentAction.WAITING_LIST_ACTION.equals(action.getAppointmentAction())
						|| AppointmentAction.PLANNED_LIST_ACTION.equals(action.getAppointmentAction())
						|| AppointmentAction.BOOKED_LIST_ACTION.equals(action.getAppointmentAction()))
				{
					PatientElectiveList patientElectiveList = getPatientElectiveListCreatedByOutcomeAction(appointment, action);
					if (patientElectiveList != null)
						action.setPatientElectiveList(new PatientElectiveListRefVo(patientElectiveList.getId(), patientElectiveList.getVersion()));
				}
				// Retrieve the Linked Cats Referral record created as a result of this action
				else if (AppointmentAction.REQUEST_FOR_SERVICE_ACTION.equals(action.getAppointmentAction()))
				{
					LinkedCatsReferralRefVoCollection linkedReferrals = getLinkedCatsReferralsCreatedByOutcomeAction(appointment, ReferralRelationType.REQUEST_FOR_SERVICE);
					if (linkedReferrals != null)
						action.setLinkedRequestForService(linkedReferrals);
				}
				// Retrieve the Cats Referral record created as a result of this action
				else if (AppointmentAction.TRANSFER_OF_CARE.equals(action.getAppointmentAction()))
				{
					LinkedCatsReferral linkedReferral = getLinkedCatsReferralCreatedByOutcomeAction(appointment, ReferralRelationType.TRANSFER_OF_CARE);
					if (linkedReferral != null)
						action.setLinkedTransferOfCare(new LinkedCatsReferralRefVo(linkedReferral.getId(), linkedReferral.getVersion()));
				}
			}
		}
		
		
		// Return appointment record for RIE process
		return appointmentOutcome;
	}



	private LinkedCatsReferralRefVoCollection getLinkedCatsReferralsCreatedByOutcomeAction(Booking_AppointmentRefVo appointment, ReferralRelationType relationship)
	{
		if (appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
		
		if (relationship == null)
			return null;
		
		StringBuilder query = new StringBuilder("SELECT linkedCatsReferral ");
		query.append(" FROM LinkedCatsReferral AS linkedCatsReferral ");
		query.append(" LEFT JOIN linkedCatsReferral.referral AS referral ");
		query.append(" LEFT JOIN referral.creatingAppointment AS appointment ");
		query.append(" LEFT JOIN linkedCatsReferral.referralRelationType AS relationType ");

		query.append(" WHERE ");
		
		query.append(" appointment.id = :APPOINTMENT AND relationType.id = :REQUEST_FOR_SERVICE ");
		query.append(" AND (linkedCatsReferral.isRIE is null OR linkedCatsReferral.isRIE = 0) ");
		query.append(" AND (referral.isRIE is null OR referral.isRIE = 0) ");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("APPOINTMENT");					paramValues.add(appointment.getID_Booking_Appointment());
		paramNames.add("REQUEST_FOR_SERVICE");			paramValues.add(relationship.getID());
		
		List<?> results = getDomainFactory().find(query.toString(), paramNames, paramValues);
		
		if (results == null)
			return null;
		
		LinkedCatsReferralRefVoCollection linkedReferrals = new LinkedCatsReferralRefVoCollection();

		for (int i = 0; i < results.size(); i++)
		{
			if ((results.get(i)) instanceof LinkedCatsReferral)
			{
				LinkedCatsReferral linkedReferral = (LinkedCatsReferral) results.get(i);
				
				linkedReferrals.add(new LinkedCatsReferralRefVo(linkedReferral.getId(), linkedReferral.getVersion()));
			}
		}
		
		return linkedReferrals;
	}

	
	private LinkedCatsReferral getLinkedCatsReferralCreatedByOutcomeAction(Booking_AppointmentRefVo appointment, ReferralRelationType relationship)
	{
		if (appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
		
		if (relationship == null)
			return null;
		
		StringBuilder query = new StringBuilder("SELECT linkedCatsReferral ");
		query.append(" FROM LinkedCatsReferral AS linkedCatsReferral ");
		query.append(" LEFT JOIN linkedCatsReferral.referral AS referral ");
		query.append(" LEFT JOIN referral.creatingAppointment AS appointment ");
		query.append(" LEFT JOIN linkedCatsReferral.referralRelationType AS relationType ");

		query.append(" WHERE ");
		
		query.append(" appointment.id = :APPOINTMENT AND relationType.id = :REQUEST_FOR_SERVICE ");
		query.append(" AND (linkedCatsReferral.isRIE is null OR linkedCatsReferral.isRIE = 0) ");
		query.append(" AND (referral.isRIE is null OR referral.isRIE = 0) ");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("APPOINTMENT");					paramValues.add(appointment.getID_Booking_Appointment());
		paramNames.add("REQUEST_FOR_SERVICE");			paramValues.add(relationship.getID());
		
		LinkedCatsReferral linkedReferral = (LinkedCatsReferral) getDomainFactory().findFirst(query.toString(), paramNames, paramValues);
		
		if (linkedReferral == null)
			return null;
		
		return linkedReferral;
	}


	/**
	 * Retrieve the Patient Elective List created for by the Appointment Outcome Action
	 * @param appointment
	 * @param action
	 * @return
	 */
	private PatientElectiveList getPatientElectiveListCreatedByOutcomeAction(Booking_AppointmentRefVo appointment, AppointmentOutcomeActionRefVo action)
	{
		if (appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
		
		if (action == null || action.getID_AppointmentOutcomeAction() == null)
			return null;
		
		StringBuilder query = new StringBuilder("SELECT electiveList ");
		query.append(" FROM PatientElectiveList AS electiveList ");
		query.append(" LEFT JOIN electiveList.creatingAppointment AS appointment ");
		query.append(" LEFT JOIN electiveList.appointmentOutcomeAction AS outcomeAction ");
		
		query.append(" WHERE ");
		
		query.append(" appointment.id = :APPOINTMENT AND outcomeAction.id = :OUTCOME_ACTION ");
		query.append(" AND (electiveList.isRIE is null OR electiveList.isRIE = 0)");
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("APPOINTMENT");					paramValues.add(appointment.getID_Booking_Appointment());
		paramNames.add("OUTCOME_ACTION");				paramValues.add(action.getID_AppointmentOutcomeAction());
		
		PatientElectiveList patientElectiveList = (PatientElectiveList) getDomainFactory().findFirst(query.toString(), paramNames, paramValues);
		
		if (patientElectiveList == null)
			return null;
		
		return patientElectiveList;
	}
	
	//WDEV-22963
	private Appointment_StatusForAppointmentOutcomeVo getPreviousStatus(Appointment_StatusForAppointmentOutcomeVoCollection apptStatusHistory, Appointment_StatusForAppointmentOutcomeVo statusToRIE)
	{
		if (apptStatusHistory == null)
			return null;
		Appointment_StatusForAppointmentOutcomeVoCollection coll = new Appointment_StatusForAppointmentOutcomeVoCollection();
		for (Appointment_StatusForAppointmentOutcomeVo record : apptStatusHistory)
		{
			if (statusToRIE != null && record.getID_Appointment_Status().equals(statusToRIE.getID_Appointment_Status()))
				continue;
			coll.add(record);
		}
		coll.sort(Appointment_StatusForAppointmentOutcomeVo.getStatusDateTimeComparator(SortOrder.DESCENDING));
		
		return coll.get(0);		
	}

	//wdev-19933
	public Integer undoAppointmentOutcome(Booking_AppointmentRefVo appointmentRef) throws DomainInterfaceException, StaleObjectException
	{
		if (appointmentRef == null || appointmentRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("Cannot undo appointment outcome for null appointment parameter");
		
		BookingAppointmentOutcomeVo appointment = getBookingAppointment(appointmentRef);
		
		boolean hasClockImpact = Boolean.TRUE.equals(appointment.getOutcomeHasRTTClockImpact());
		ApptOutcome outcomeBeeingReverted = appointment.getOutcome();
	
		boolean apppointmentMarkedAsDna = Status_Reason.DNA.equals(appointment.getApptStatus());
		boolean apppointmentMarkedAsNotSeen = Status_Reason.NOT_SEEN.equals(appointment.getApptStatus());
		
		if (apppointmentMarkedAsDna || apppointmentMarkedAsNotSeen)
		{
			if (ApptOutcome.DISCHARGED_BACK_TO_GP.equals(appointment.getOutcome()))
			{
				try
				{
					undoEndOfCare(appointment);
				}
				catch (ForeignKeyViolationException e)
				{
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		
		// If the Appointment Outcome had a clock impact attempt to automatically undo the ClockImpact of the referral
		// Or if the Appointment Outcome have set the Referral to End Of Care
		if (hasClockImpact || ApptOutcome.DECISION_NOT_TO_TREAT.equals(outcomeBeeingReverted)|| ApptOutcome.PATIENT_DECLINED_OFFER.equals(outcomeBeeingReverted))
		{
			try
			{
				Class<?> referralImpl = Class.forName("ims.RefMan.domain.impl.ReferralDetailsImpl");
				IRecordRTTClockImpact clockImpactImpl = (IRecordRTTClockImpact) getDomainImpl(referralImpl);
				Integer returnValue = clockImpactImpl.undoAppointmentOutcomeClockImpact(appointment, appointment.getRTTClockImpact(), outcomeBeeingReverted);
				
				if (IRecordRTTClockImpact.NOT_LAST_IMPACT.equals(returnValue))
				{
					createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Appointment outcome has been undone.");
					return UNDO_OUTCOME_SUCCESS_NOT_LAST_IMPACT;
				}
			}
			catch (ClassNotFoundException exception)
			{
				createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Class 'ReferralDetailsImpl' was not found when attempting to record RTT Clock Impact of the AppointmentOutcome. This functionality might not be available in the application.");
			}
		}
		
		createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Appointment outcome has been undone.");
		return UNDO_OUTCOME_SUCCESS;
	}

	
	private void undoEndOfCare(BookingAppointmentOutcomeVo appt) throws StaleObjectException, ForeignKeyViolationException
	{
		CatsReferralListVo catsReferral = getCatsReferralListVo(appt);
		
		if (catsReferral != null && catsReferral.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(catsReferral.getCurrentStatus().getReferralStatus()))
		{	
			try
			{
				Class<?> referralStatusListImpl = Class.forName("ims.RefMan.domain.impl.ReferralStatusListImpl");
				IUndoEndOfTreatment impl  = (IUndoEndOfTreatment) getDomainImpl(referralStatusListImpl);
				impl.undoEndOfCare(catsReferral);
			}
			catch (ClassNotFoundException exception)
			{
				createSystemLogEntry(SystemLogType.APPLICATION, SystemLogLevel.INFORMATION, "Class 'ReferralDetailsImpl' was not found when attempting to record RTT Clock Impact of the AppointmentOutcome. This functionality might not be available in the application.");
			}
		}
		
	}

	private CatsReferralListVo getCatsReferralListVo(BookingAppointmentOutcomeVo appt)
	{
		if(appt == null || appt.getID_Booking_Appointment() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select cats from CatsReferral as cats left join cats.appointments as appt where appt.id = :ApptId";
		
		List<?> catsReferralList = factory.find(query, new String[] {"ApptId"}, new Object[] {appt.getID_Booking_Appointment()});
		
		if(catsReferralList != null && catsReferralList.size() > 0 && catsReferralList.get(0) instanceof CatsReferral)
		{
			return CatsReferralListVoAssembler.create((CatsReferral) catsReferralList.get(0));
		}
		
		return null;
	}

	//wdev-19933
	private CatsReferralParentVo getParentCatsReferralForLinkedCatsReferral(LinkedCatsReferralRefVo linkedReferral, ReferralRelationType actionType)
	{
		if (linkedReferral == null || linkedReferral.getID_LinkedCatsReferral() == null)
			return null;
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		StringBuilder query = new StringBuilder("SELECT referral FROM CatsReferral AS referral ");
		query.append(" LEFT JOIN referral.linkedReferrals AS linkedReferral ");
		query.append(" LEFT JOIN linkedReferral.referralRelationType AS relationship ");
		query.append(" WHERE ");
		
		query.append(" linkedReferral.id = :LINKED_REFERRAL_ID AND relationship.id = :RELATIONSHIP_TYPE ");
				
		
		paramNames.add("LINKED_REFERRAL_ID");		paramValues.add(linkedReferral.getID_LinkedCatsReferral());
		paramNames.add("RELATIONSHIP_TYPE");		paramValues.add(actionType.getID());
		
		return CatsReferralParentVoAssembler.create((CatsReferral) getDomainFactory().findFirst(query.toString(), paramNames, paramValues));
	}

	
	//wdev-19933
	public CatsReferralForRequestServiceVo getChildReferralForTransferOfCareVo(CatsReferralRefVo catsReferralRef)
	{
		if( catsReferralRef == null)
			return null;
		
		StringBuilder query = new StringBuilder("SELECT c1_1 FROM ");
		query.append(" CatsReferral as p1_1 left join p1_1.linkedReferrals as l1_1 left join l1_1.referral as c1_1  left join l1_1.referralRelationType as l2_1 ");
		query.append(" WHERE( (c1_1.isRIE = 0 OR c1_1.isRIE is null) and l2_1.id = :ActionType and p1_1.id = :parentCatsReferralID) ");
				
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		paramNames.add("parentCatsReferralID");		paramValues.add(catsReferralRef.getID_CatsReferral());
		paramNames.add("ActionType");				paramValues.add(ReferralRelationType.TRANSFER_OF_CARE.getID());
		
		CatsReferral catsReferral = (CatsReferral) getDomainFactory().findFirst(query.toString(), paramNames, paramValues);
		if( catsReferral != null)
		{
			
				return CatsReferralForRequestServiceVoAssembler.create(catsReferral);
			
		}

		
		return null;
	}


	//wdev-19933, wdev-19930
	//This method is it used by ReferralDetails form
	public void saveChildCatsReferralForTransferOfCare(CatsReferralForRequestServiceVo chillCatsReferralForTransferOfCare, CatsReferralRefVo parentRef, BookingAppointmentOutcomeVo appointment) throws DomainInterfaceException, StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		CatsReferralMasterVo parrentCatsRef = getMasterCatsReferral(parentRef);
		//EpisodeOfCareForRequestServiceShortVo  updatedEpisode = getUpdatedEpsiodeOfCare(chillCatsReferralForTransferOfCare.getCareContext().getEpisodeOfCare(),factory);
		
		CareSpellForRequestServiceShortVo updatedCarespell = getCareSpellForReferral(parentRef); // getUpdatedCareSpell(chillCatsReferralForTransferOfCare.getCareContext().getEpisodeOfCare().getCareSpell(),factory);	//wdev-20922
		if (updatedCarespell.getEpisodes() == null)
			updatedCarespell.setEpisodes(new EpisodeOfCareForRequestServiceShortVoCollection());
		updatedCarespell.getEpisodes().add(chillCatsReferralForTransferOfCare.getEpisodeOfCare());

//		CareSpell domCareSpell = CareSpellForRequestServiceShortVoAssembler.extractCareSpell(getDomainFactory(), updatedCarespell);
//		factory.save(domCareSpell);

		// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
		// If 'Transfer of Care' is the result of the 'Appointment Outcome' process then use the Appointment Outcome Date/Time,
		// else use the Date of Referral of the created child referral
		Date eventDateTime = null;
		if (appointment != null && appointment.getOutcomeDateTime() != null)
		{
			eventDateTime = appointment.getOutcomeDateTime().getJavaDate();
		}
		else
		{
			eventDateTime = chillCatsReferralForTransferOfCare.getReferralDetails().getDateOfReferral().getDate();
		}
		
		saveChildCatsReferralForTransferOfCare(factory, appointment, parrentCatsRef, chillCatsReferralForTransferOfCare, updatedCarespell, eventDateTime);										//wdev-20922
		
		// Update the parent Referral Journey to RTT Status of 98
		CatsReferral domReferral = (CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, parentRef.getID_CatsReferral());
		
		updateRTTStatus(domReferral, RTT_CODE_ACTIVITY_NOT_APPLICABLE_RTT, RTTClockImpactSource.REFERRAL_TRANSFER_OF_CARE, false, false, true, eventDateTime);
		
		endReferralPathwayJourney(domReferral, true);

	}

	private void endReferralPathwayJourney(CatsReferral domReferral, boolean clearCurrentClock) throws StaleObjectException
	{
		if (domReferral == null || domReferral.getJourney() == null)
			return;
		
		PatientJourneyStatus journeyStatus = new PatientJourneyStatus();
		journeyStatus.setDateTime(new java.util.Date());
		journeyStatus.setStatus(getDomLookup(JourneyStatus.ENDPATHWAYJOURNEY));

		if (domReferral.getJourney().getStatusHistory() == null)
		{
			domReferral.getJourney().setStatusHistory(new HashSet());
		}
		
		domReferral.getJourney().setEndedOnDate(new java.util.Date());
		domReferral.getJourney().setCurrentStatus(journeyStatus);
		domReferral.getJourney().getStatusHistory().add(journeyStatus);
		
		if (clearCurrentClock)
			domReferral.getJourney().setCurrentClock(null);
		
		getDomainFactory().save(domReferral);
	}

	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private void updateRTTStatus(CatsReferral referral, Integer rttCodeActivityNotApplicableRtt, RTTClockImpactSource source, boolean startNewClock, boolean stopCurrentClock,
									boolean parentReferralForTransferOfCare, Date eventDateTime) throws StaleObjectException
	{
		if (Boolean.FALSE.equals(referral.isRTTClockImpact()) && !(parentReferralForTransferOfCare && referral.getJourney() != null))
			return;
		
		if (referral.getJourney() == null)
			throw new CodingRuntimeException("Referral should have had a Journey created at this point.");
		
		PathwayClock initialClock = referral.getJourney().getCurrentClock();
		RTTClockState initialClockState = getClockState(initialClock);
		PathwayRTTStatus initialStatus = referral.getJourney().getCurrentClock()!=null?referral.getJourney().getCurrentClock().getCurrentRTTStatus():null; //WDEV-23518
		
		if (startNewClock && (referral.getJourney().getCurrentClock() == null || referral.getJourney().getCurrentClock().getStopDate() != null))
		{
			// TODO: Code to create new clock here - not needed for now, implement later
		}
		
		if (stopCurrentClock && (referral.getJourney().getCurrentClock() != null && referral.getJourney().getCurrentClock().getStopDate() == null))
		{
			referral.getJourney().getCurrentClock().setStopDate(new Date());
		}
		
		PathwayRTTStatus finalStatus = createNewRTTStatus(rttCodeActivityNotApplicableRtt, eventDateTime);
		
		referral.setCurrentRTTStatus(finalStatus);
		if(referral.getJourney().getCurrentClock()!=null) //WDEV-23518
		{
			referral.getJourney().getCurrentClock().setCurrentRTTStatus(finalStatus);
			referral.getJourney().getCurrentClock().getRTTStatusHistory().add(finalStatus);
		}
		PathwayClock finalClock = referral.getJourney().getCurrentClock();
		RTTClockState finalClockState = getClockState(finalClock);
		// Create the RTT Clock Impact
		PathwaysRTTClockImpact clockImpact = createRTTClockImpactRecord(initialClock, finalClock, initialStatus, finalStatus, initialClockState, finalClockState, null, referral.getJourney(), source);
		
		referral.getRTTClockImpacts().add(clockImpact);
		
		getDomainFactory().save(referral);
	}
	
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private PathwayRTTStatus createNewRTTStatus(Integer nationalCode, Date eventDateTime)
	{
		if (nationalCode == null)
			return null;
		
		PathwayRTTStatus status = new PathwayRTTStatus();
		status.setRTTStatus(getRTTStatusPoint(nationalCode));
		status.setStatusDateTime(eventDateTime);
		
		Object mos = getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			status.setStatusBy((MemberOfStaff) getDomainFactory().getDomainObject(MemberOfStaff.class, ((MemberOfStaffLiteVo) mos).getID_MemberOfStaff()));
		}

		return status;
	}
	

	private PathwaysRTTClockImpact createRTTClockImpactRecord(PathwayClock initialClock, PathwayClock finalClock, 
																PathwayRTTStatus initialStatus, PathwayRTTStatus finalStatus,
																RTTClockState initialClockState, RTTClockState finalClockState, 
																RTTStatusEventMap eventMap, PatientPathwayJourney journey, RTTClockImpactSource source)
	{
		PathwaysRTTClockImpact clockImpact = new PathwaysRTTClockImpact();

		clockImpact.setInitialClock(initialClock);
		clockImpact.setFinalClock(finalClock);
		clockImpact.setInitialRTTStatus(initialStatus);
		clockImpact.setFinalRTTStatus(finalStatus);

		clockImpact.setOutcomeEvent(eventMap);
		clockImpact.setJourney(journey);
		clockImpact.setSource(getDomLookup(source));

		clockImpact.setInitialClockState(getDomLookup(initialClockState));
		clockImpact.setFinalClockState(getDomLookup(finalClockState));


		clockImpact.setClockStarted(Boolean.FALSE);
		clockImpact.setClockStopped(Boolean.FALSE);

		//  Case 1 - If there was not clock initially and one clock was created
		if (initialClock == null && finalClock != null)
		{
			// New clock has a start date - mark the Clock Impact
			if (finalClock.getStartDate() != null)
				clockImpact.setClockStarted(Boolean.TRUE);

			if (finalClock.getStopDate() != null)
				clockImpact.setClockStopped(Boolean.TRUE);
		}

		// Case 2 - If there was a clock initially and there is no clock now
		if (initialClock != null && finalClock == null)
		{
			clockImpact.setClockStopped(Boolean.TRUE);
		}

		// Case 3 - If there was an initial clock and a clock is present now
		if (initialClock != null && finalClock != null)
		{
			// Case 3.1 - Initial and current clock are the same one
			if (initialClock.getId() == finalClock.getId())
			{
				if (initialClock.getStopDate() == null && finalClock.getStopDate() != null)
					clockImpact.setClockStopped(Boolean.TRUE);

				if (initialClock.getStopDate() != null && finalClock.getStopDate() == null)
					clockImpact.setClockStarted(Boolean.TRUE);

				if (initialClock.getStartDate() == null && finalClock.getStartDate() != null)
					clockImpact.setClockStarted(Boolean.TRUE);
			}

			// Case 3.2 - Initial and current clock are not ehe same one
			if (initialClock.getId() != finalClock.getId())
			{
				if (initialClock.getStopDate() == null)
					clockImpact.setClockStopped(Boolean.TRUE);

				if (finalClock.getStartDate() != null)
					clockImpact.setClockStarted(Boolean.TRUE);

				if (finalClock.getStopDate() != null)
					clockImpact.setClockStopped(Boolean.TRUE);
			}

		}

		return clockImpact;
	}
	
	

	private RTTClockState getClockState(PathwayClock clock)
	{
		if (clock == null)
			return RTTClockState.NOT_PRESENT;
			
		if (clock.getStopDate() != null)
			return RTTClockState.STOPPED;
			
		return RTTClockState.STARTED;
	}

	/**
	 * WDEV-20332
	 * List Appointment Outcomes based on current appointment status and current RTT status
	 */
	public AppointmentOutcomeConfigVoCollection listAppointmentOutcomeByAppointmentStatusAndRTTSTatus(Status_Reason status, RTTStatusPointRefVo rttStatusPoint)
	{
		if (status == null || !(Status_Reason.DNA.equals(status) || Status_Reason.NOT_SEEN.equals(status) || Status_Reason.SEEN.equals(status)))
			return null;
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		StringBuilder query = new StringBuilder("SELECT outcomeConfig FROM AppointmentOutcomeConfig AS outcomeConfig ");
		query.append(" LEFT JOIN outcomeConfig.appointmentOutcome AS appointmentOutcome ");
		
		if (Status_Reason.DNA.equals(status))
			query.append("WHERE outcomeConfig.usedForDNA = 1");
		else if (Status_Reason.NOT_SEEN.equals(status))
			query.append("WHERE outcomeConfig.usedForNotSeen = 1");
		else if (Status_Reason.SEEN.equals(status))
			query.append("WHERE outcomeConfig.usedForSeen = 1");

		query.append(" AND appointmentOutcome.active = 1 "); //WDEV-23584
		
		if (rttStatusPoint != null && rttStatusPoint.getID_RTTStatusPoint() != null)
		{
			query.append(" AND appointmentOutcome.id IN (");
			query.append("SELECT outcome.id ");
			query.append(" FROM RTTStatusPoint AS rtt ");
			query.append(" LEFT JOIN rtt.appointmentOutcomes AS outcomeRef ");
			query.append(" LEFT JOIN outcomeRef.instance AS outcome ");
			query.append(" WHERE rtt.id = :RTT_STATUS_POINT");
			query.append(")");
			
			paramNames.add("RTT_STATUS_POINT");
			paramValues.add(rttStatusPoint.getID_RTTStatusPoint());
		}

		return AppointmentOutcomeConfigVoAssembler.createAppointmentOutcomeConfigVoCollectionFromAppointmentOutcomeConfig(getDomainFactory().find(query.toString(), paramNames, paramValues));
	}
	
	
	//wdev-19930
	public class ReferralStatusComparator implements Comparator
	{
		private int direction = 1;
		
		public ReferralStatusComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ReferralStatusComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime pdate1 = null;
			DateTime pdate2 = null;
			if(ob1 instanceof CatsReferralStatusVo )
			{
				CatsReferralStatusVo ps1 = (CatsReferralStatusVo)ob1;
				pdate1 = ps1.getStatusDateTime();
			}
			if(ob2 instanceof CatsReferralStatusVo)
			{
				CatsReferralStatusVo ps2 = (CatsReferralStatusVo)ob2;
				pdate2 = ps2.getStatusDateTime();
			}
			if(pdate1 != null )
				return  pdate1.compareTo(pdate2)*direction;
			if(pdate2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	//wdev-19930
	
	public HcpLiteVoCollection getListOwnersForSession(String value, Sch_SessionRefVo session)
	{
		if (session == null || session.getID_Sch_Session() == null)
			return null;
		
		if(value == null || (value != null && value.length() == 0))
			throw new DomainRuntimeException("Can not search on null name.");
		
		DomainFactory factory = getDomainFactory();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		String hql = "select hcp from Sch_Session as session left join session.listOwners as owners left join owners.hcp as hcp  ";
			   hql += "where session.id = :sessionID and (owners.attendingClinician = 1 or owners.listOwner = 1) and " +
			   		  "hcp.isActive = :isActive and (hcp.mos.name.upperSurname like :hcpSurname or hcp.mos.name.upperForename like :hcpForname)";
		
		markers.add("sessionID");
		values.add(session.getID_Sch_Session());
		
		markers.add("isActive");
		values.add(Boolean.TRUE);
		
		markers.add("hcpSurname");
		values.add(value.toUpperCase() + "%");
		
		markers.add("hcpForname");
		values.add(value.toUpperCase() + "%");
		
		return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(factory.find(hql, markers, values));
	}
	private PathwayRTTStatusVo copyRTTStatus(PathwayRTTStatusVo parent)
	{
		if( parent == null )
			return null;
		
		
		PathwayRTTStatusVo child = new PathwayRTTStatusVo();
					
		child.setRTTStatus(parent.getRTTStatus());
		child.setStatusBy(parent.getStatusBy());
		child.setStatusDateTime(parent.getStatusDateTime());
		child.setSetting(parent.getSetting());
		child.setRTTStatusUpdateComment(parent.getRTTStatusUpdateComment());
		child.setRTTStatusUpdateReason(parent.getRTTStatusUpdateReason());
		
		return child;
		
		
	}
	
	// WDEV-23646 - Ensure the correct event Date Time is used when creating a new RTT Status
	private PathwayRTTStatusVo  getRTTStatusWithNationalCode12(PatientPathwayJourneyForTransferOfCareVo record, DateTime eventDateTime) throws DomainInterfaceException
	{
		int nationalCode = OTHER_SOURCE_OF_REFERRAL_NAT_CODE;
		
		RTTStatusPoint rttStatusPoint = getRTTStatusPoint(nationalCode);
		
		
		//WDEV-19383
		if (rttStatusPoint == null)
			throw new DomainInterfaceException("No RTT Status Point was found for National Code: " + nationalCode);
		
		Object mos = getMosUser();
				
		PathwayRTTStatusVo pathwayRTTStatus = new PathwayRTTStatusVo();
		pathwayRTTStatus.setRTTStatus(RTTStatusPointLiteVoAssembler.create(rttStatusPoint));
		if(mos instanceof MemberOfStaffLiteVo)
		{
			pathwayRTTStatus.setStatusBy((MemberOfStaffRefVo) mos);
		}
		
		pathwayRTTStatus.setStatusDateTime(eventDateTime);
		
		if(record!= null && record.getCurrentClock() != null)
    	{
			record.getCurrentClock().setCurrentRTTStatus(pathwayRTTStatus);
    			
    		if(record.getCurrentClock().getRTTStatusHistory() == null)
    			record.getCurrentClock().setRTTStatusHistory(new PathwayRTTStatusVoCollection());
    			
    		record.getCurrentClock().getRTTStatusHistory().add(pathwayRTTStatus);
    	}
		
		return pathwayRTTStatus;
	}
	//wdev-20922

	public CareSpellForRequestServiceShortVo getUpdatedCareSpell(CareSpellRefVo record, DomainFactory factory)
	{
		if(record == null || record.getID_CareSpell()==null) //http://jira/browse/WDEV-20263
			return null;
		
		CareSpell doCareSpell =  (CareSpell) factory.getDomainObject(CareSpell.class, record.getID_CareSpell());
		
		return CareSpellForRequestServiceShortVoAssembler.create(doCareSpell);
	}
	

	
	public AppFormForTrackingVo getFormMenuAction(Integer formId)
	{
		if(formId == null)
			throw new CodingRuntimeException("Cannot get AppFormMenuActionVo for a null FormId.");
		
		AppForm domainObject = (AppForm)getDomainFactory().getDomainObject(AppForm.class, formId);
		
		return  AppFormForTrackingVoAssembler.create(domainObject);
	}


	public CatsReferralParentVo getParentCatsReferrall(CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			return null;

		CatsReferral doCatsReferral = (CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, referral.getID_CatsReferral());

		return CatsReferralParentVoAssembler.create(doCatsReferral);
	}

	
	public CatsReferralParentVo getParentCatsReferrall(Booking_AppointmentRefVo bookingAppointment)
	{
		if (bookingAppointment == null || bookingAppointment.getID_Booking_Appointment() == null)
			return null;
		
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		
		StringBuilder query = new StringBuilder("SELECT referral FROM CatsReferral AS referral ");
		query.append(" LEFT JOIN referral.appointments AS appointment ");
		query.append(" WHERE ");
		query.append(" appointment.id = :APPOINTMENT ");

		paramNames.add("APPOINTMENT");
		paramValues.add(bookingAppointment.getID_Booking_Appointment());
		
		
		return CatsReferralParentVoAssembler.create((CatsReferral) getDomainFactory().findFirst(query.toString(), paramNames, paramValues));
	}

	
	
	public CatsReferralMasterVo getMasterCatsReferral(CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			return null;

		CatsReferral doCatsReferral = (CatsReferral) getDomainFactory().getDomainObject(CatsReferral.class, referral.getID_CatsReferral());

		return CatsReferralMasterVoAssembler.create(doCatsReferral);
	}

	public PathwayRTTStatusVo getRTTStatus(PathwayRTTStatusRefVo rttStatus)
	{
		if (rttStatus == null || rttStatus.getID_PathwayRTTStatus() == null)
			return null;

		return PathwayRTTStatusVoAssembler.create((PathwayRTTStatus) getDomainFactory().getDomainObject(PathwayRTTStatus.class, rttStatus.getID_PathwayRTTStatus())); 
	}
	
	public CareSpellForRequestServiceShortVo getCareSpellForReferral(CatsReferralRefVo referral)
	{
		if (referral == null || referral.getID_CatsReferral() == null)
			return null;
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		StringBuilder query = new StringBuilder("SELECT carespell ");
		query.append(" FROM CatsReferral AS referral LEFT JOIN referral.careContext AS carecontext ");
		query.append(" LEFT JOIN carecontext.episodeOfCare AS episodeofcare LEFT JOIN episodeofcare.careSpell AS carespell ");
		
		query.append(" WHERE ");
		
		query.append(" referral.id = :REFERRAL_ID ");
		
		paramNames.add("REFERRAL_ID");
		paramValues.add(referral.getID_CatsReferral());
		
		return CareSpellForRequestServiceShortVoAssembler.create((CareSpell) getDomainFactory().findFirst(query.toString(), paramNames, paramValues));
	}	
}

//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.
//This component was made as a copy of Attendance Details container from the Original Attendance Details form
package ims.emergency.forms.emergencyattendancedetailscc;

import ims.admin.vo.EDAttendanceControlsConfigVo;
import ims.admin.vo.EDAttendanceControlsConfigVoCollection;
import ims.admin.vo.lookups.EDAttendenceControlType;
import ims.clinical.vo.lookups.DischargeLetterStatus;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareContextVoCollection;
import ims.core.vo.CareSpellVo;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.EpisodeofCareVoCollection;
import ims.core.vo.GpLiteWithNameVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.Patient;
import ims.core.vo.lookups.ContextType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.emergencyattendancedetailscc.GenForm.GroupCategoryEnumeration;
import ims.emergency.vo.AttendanceDetailsVo;
import ims.emergency.vo.AttendanceDetailsVoCollection;
import ims.emergency.vo.EpisodeDetailsVo;
import ims.emergency.vo.RTAVo;
import ims.emergency.vo.SpecialInterestDetailsVo;
import ims.emergency.vo.SpecialInterestDetailsVoCollection;
import ims.emergency.vo.TIIGVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingSendToAreaVo;
import ims.emergency.vo.emergencyepisodeliteVo;
import ims.emergency.vo.enums.EmergencyAttendanceEvent;
import ims.emergency.vo.lookups.AttendanceType;
import ims.emergency.vo.lookups.EDVisitType;
import ims.emergency.vo.lookups.LookupHelper;
import ims.emergency.vo.lookups.ModeOfArrival;
import ims.emergency.vo.lookups.PatientCategory;
import ims.emergency.vo.lookups.PresentingComplaint;
import ims.emergency.vo.lookups.ReferredBy;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.UrgencyLevelCollection;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.PartialDate;
import ims.utils.textile.Textile;
import ims.vo.ValueObject;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final String ATTENDANCE_TYPE 			= "EAD01";
	private static final String PATIENT_CATEGORY 			= "EAD02";
	private static final String PRESENTING_COMPLAINT 		= "EAD03";
	private static final String TRIAGE_CATEGORY 			= "EAD04";
	private static final String IS_PRIMARY_CARE				= "EAD05";//WDEV-17459
	private static final String IS_GPMEDDET_PATIENTCONS		= "EAD06";//WDEV-17819
	private static final String OTHER 						= "EAD07";
	private static final String INCIDENT_LOCATION 			= "EAD08";
	private static final String REFERRAL_GP 				= "EAD09";
	private static final String MODE_OF_ARRIVAL 			= "EAD10";
	private static final String AMBULANCE_JOB_NO 			= "EAD11";
	private static final String ACCOMPANIED_BY 				= "EAD12";
	private static final String SCHOOL					 	= "EAD13";
	private static final String OCCUPATION 					= "EAD14";
	private static final String OCCUPATION_STATUS 			= "EAD15";
	private static final String PLACE_OF_EMPLOYMENT 		= "EAD16";
	private static final String URGENCY_LEVEL 				= "EAD17";
	private static final String ED_CONSULTANT 				= "EAD18";
	private static final String DEPARTMENT_TYPE				= "EAD19";
	private static final String INCIDENT_TIME 				= "EAD20";
	private static final String AMBULANCE_ARRIVAL_TIME 		= "EAD21";
	private static final String SPECIAL_INTEREST 			= "EAD22";
	private static final String PATIENT_PREFERRED_LANGUAGE 	= "EAD23";
	private static final String INTERPRETER_REQUIRED 		= "EAD24";
	private static final String COMMENTS 					= "EAD25";
	private static final String DISCHARGE_OUTCOME 			= "EAD26";
	private static final String REGISTERED_BY 				= "EAD27";
	private static final String LAST_UPDATED_BY 			= "EAD28";

	private void newEpisode()
	{
		form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoFirstVisit, true);
		form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoScheduledReturn, false);
		form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoUnscheduledReturn, false);
		form.GroupCategory().setValue(GroupCategoryEnumeration.rdoFirstVisit);
	}

	private boolean save()
	{

		EpisodeDetailsVo record = populateDataFromScreen();

		String[] errors = record.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		TrackingSendToAreaVo patientArea = domain.isPatientCurrentlyinED(form.getGlobalContext().Core.getPatientShort());
		if (record.getID_EmergencyEpisode()==null && patientArea!=null)
		{
			engine.showMessage("This patient is curently in "+ (patientArea.getCurrentAreaIsNotNull() ? patientArea.getCurrentArea().getAreaDisplayName():""));
			
			//WDEV-17468
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.SAVE);
			form.fireCustomControlValueChanged();
			return false;
		}
		
		//wdev-17949
		AttendanceDetailsVo emergattendanceVo = form.getLocalContext().getSelectedRecord(); //take the selected emergency attendance
		
		// wdev-14420
		TrackingSendToAreaVo trackingVo = null;
		if (record.getID_EmergencyEpisode() == null || form.getLocalContext().getSelectedRecord() == null)
		{
			emergattendanceVo = null;	//wdev-17949 - it will be created a new emergency attendance
			
			MemberOfStaffShortVo memberVo = null;
			if (domain.getMosUser() instanceof MemberOfStaffShortVo)
			{
				memberVo = (MemberOfStaffShortVo) domain.getMosUser();
			}
			if (memberVo == null)
			{
				engine.showMessage("User must be Member Of Staff.");
				return false;
			}
			trackingVo = populateTracking();
			errors = null;
			errors = trackingVo.validate();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
		}

		try
		{
			record = domain.save(record, form.getLocalContext().getCurrentCareSpell(), form.getLocalContext().getCurrentEpisodeOfCare(), form.getLocalContext().getCurrentCareContext(), trackingVo, form.getLocalContext().getTIIG(), form.getLocalContext().getRTA(),emergattendanceVo); // wdev-14420 , wdev-14582, wdev-17949
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setTIIG(null);
			form.getLocalContext().setRTA(null);
			return true;
		}
		form.getLocalContext().setCurrentCareSpell(null);
		form.getLocalContext().setTIIG(null);
		form.getLocalContext().setRTA(null);
		form.getLocalContext().setSelectedEmergencyEpisode(record);
		form.getGlobalContext().Emergency.setSelectedEmergencyEpisode(record);

		return true;
	}

	// wdev-14420
	private TrackingSendToAreaVo populateTracking()
	{
		TrackingSendToAreaVo trackingVo = new TrackingSendToAreaVo();
		trackingVo.setPatient(form.getGlobalContext().Core.getPatientShort());
		trackingVo.setAttendance(new AttendanceDetailsVo()); // dummy the real Attendance will be populate in Impl save method
		trackingVo.setEpisode(new EpisodeDetailsVo()); // dummy the real episode will be populate in Impl save method
		trackingVo.setDischargeLetterStatus(DischargeLetterStatus.IN_PROGRESS);//WDEV-17062
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;
		if (domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) domain.getCurrentLocation();

		}
		else if (domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) domain.getCurrentLocation();
			if (locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(), locsite.getVersion_Location());

			}

		}
		trackingVo.setEDLocation(loc);
		trackingVo.setCurrentArea(form.getGlobalContext().Emergency.getTrackingAreaForSendToAreaVo());

		TrackingAttendanceStatusVo trStatusVo = new TrackingAttendanceStatusVo();
		trStatusVo.setPatient(form.getGlobalContext().Core.getPatientShort());
		trStatusVo.setAttendance(form.getLocalContext().getCurrentCareContext());
		trStatusVo.setEpisode(form.getLocalContext().getCurrentEpisodeOfCare());
		trStatusVo.setTrackingArea(form.getGlobalContext().Emergency.getTrackingAreaForSendToAreaVo());
		trStatusVo.setStatusDatetime(new DateTime());
		MemberOfStaffShortVo memberVo = null;
		if (domain.getMosUser() instanceof MemberOfStaffShortVo)
		{
			memberVo = (MemberOfStaffShortVo) domain.getMosUser();
		}
		trStatusVo.setCreatedBy(memberVo);
		
		//WDEV-17140
		if (Boolean.TRUE.equals(form.getLocalContext().getIsSkippedTriage()))
		{
			trStatusVo.setStatus(TrackingStatus.SKIPPED_TRIAGE);
		}
		else
		{
			trStatusVo.setStatus(TrackingStatus.WAITING_TO_BE_TRIAGED);
		}

		trStatusVo.setPrevStatus(null);//WDEV-16777
		
		trackingVo.setCurrentStatus(trStatusVo);
		return trackingVo;

	}

	private ContextType returnContextType(GroupCategoryEnumeration value)
	{
		if (value.equals(GroupCategoryEnumeration.rdoFirstVisit))
			return ContextType.EMERGENCY_FIRST_VISIT;
		if (value.equals(GroupCategoryEnumeration.rdoScheduledReturn))
			return ContextType.EMERGENCY_SCHEDULED;
		if (value.equals(GroupCategoryEnumeration.rdoUnscheduledReturn))
			return ContextType.EMERGENCY_UNSCHEDULED;

		return null;
	}

	private CareContextVoCollection createNewCareContext(EpisodeofCareVo voEpisodeOfCare)
	{
		CareContextVoCollection voCollCareContext = null;

		if (voEpisodeOfCare.getCareContexts() != null)
		{
			voCollCareContext = voEpisodeOfCare.getCareContexts();
		}
		else
		{
			voCollCareContext = new CareContextVoCollection();
		}

		CareContextVo voCareContext = new CareContextVo();
		voCareContext.setContext(returnContextType(form.GroupCategory().getValue()));
		// InjuryDateTime
		voCareContext.setStartDateTime(form.dtimRegistration().getValue());
		voCareContext.setEpisodeOfCare(voEpisodeOfCare);
		voCollCareContext.add(voCareContext);

		form.getLocalContext().setCurrentCareContext(voCareContext);
		return voCollCareContext;
	}

	private void createCareContextForAttendance(EpisodeDetailsVo voEpisodeDetails, AttendanceDetailsVo voAttendanceDetails)
	{
		EpisodeofCareVo episodeOfCare = domain.getEpisodeOfCare(voEpisodeDetails.getEpisodeOfCare().getID_EpisodeOfCare());
		CareSpellVo careSpell = domain.getCareSpellByEpisodeOfCare(voEpisodeDetails.getEpisodeOfCare().getID_EpisodeOfCare());
		EpisodeofCareVoCollection episodeOfCareColl = careSpell.getEpisodes();
		episodeOfCare.setCareContexts(createNewCareContext(episodeOfCare));
		episodeOfCareColl.add(episodeOfCare);
		form.getLocalContext().setCurrentEpisodeOfCare(episodeOfCare);
		careSpell.setEpisodes(episodeOfCareColl);
		voAttendanceDetails.setCareContext(form.getLocalContext().getCurrentCareContext());
	}

	private EpisodeofCareVoCollection createNewEpisodeOfCare(CareSpellVo voCareSpell)
	{
		EpisodeofCareVoCollection voCollEpisodeOfCare = new EpisodeofCareVoCollection();
		EpisodeofCareVo voEpisodeOfCare = new EpisodeofCareVo();

		if (form.dtimRegistration().getValue() != null) // wdev-16070
			voEpisodeOfCare.setStartDate(form.dtimRegistration().getValue().getDate());

		voEpisodeOfCare.setSpecialty(Specialty.EMERGENCY);
		voEpisodeOfCare.setCareSpell(voCareSpell);
		voEpisodeOfCare.setCareContexts(createNewCareContext(voEpisodeOfCare));
		voCollEpisodeOfCare.add(voEpisodeOfCare);
		form.getLocalContext().setCurrentEpisodeOfCare(voEpisodeOfCare);

		return voCollEpisodeOfCare;
	}

	private void createNewCareSpell()
	{
		CareSpellVo voCareSpell = new CareSpellVo();
		// InjuryDateTime
		if (form.dtimRegistration().getValue() != null)
			voCareSpell.setStartDate(form.dtimRegistration().getValue().getDate());
		// Set Patient
		voCareSpell.setPatient(form.getGlobalContext().Core.getPatientShort());
		voCareSpell.setEpisodes(createNewEpisodeOfCare(voCareSpell));

		form.getLocalContext().setCurrentCareSpell(voCareSpell);
	}

	private AttendanceType returnAttendanceType(GroupCategoryEnumeration value)
	{
		if (value.equals(GroupCategoryEnumeration.rdoFirstVisit))
			return AttendanceType.FIRST;
		if (value.equals(GroupCategoryEnumeration.rdoScheduledReturn))
			return AttendanceType.SCHEDULED;
		if (value.equals(GroupCategoryEnumeration.rdoUnscheduledReturn))
			return AttendanceType.UNSCHEDULED;

		return null;
	}

	private EpisodeDetailsVo populateDataFromScreen()
	{
		EpisodeDetailsVo voEpisodeDetails = null;
		AttendanceDetailsVo voAttendanceDetails = null;
		AttendanceDetailsVoCollection voCollAttendanceDetails = null;

		// EmergencyEpisode exist => CareSpell and Episode of Care exist
		if (form.getLocalContext().getSelectedEmergencyEpisodeIsNotNull())
		{
			voEpisodeDetails = form.getLocalContext().getSelectedEmergencyEpisode();

			if (form.getLocalContext().getSelectedRecordIsNotNull())
			{
				voAttendanceDetails = form.getLocalContext().getSelectedRecord();
				voCollAttendanceDetails = new AttendanceDetailsVoCollection();
				voCollAttendanceDetails = voEpisodeDetails.getEmergencyAttendances();
			}
			else
			{
				if (form.GroupCategory().getValue().equals(GroupCategoryEnumeration.rdoFirstVisit))
				{
					// Create new CARE SPELL and mark as TO BE SAVED
					createNewCareSpell();
					form.getLocalContext().setCreateNewCareSpell(Boolean.TRUE);
					voEpisodeDetails = new EpisodeDetailsVo();
					voEpisodeDetails.setEpisodeOfCare(form.getLocalContext().getCurrentEpisodeOfCare());
					voAttendanceDetails = new AttendanceDetailsVo();
					voAttendanceDetails.setCareContext(form.getLocalContext().getCurrentCareContext());
					voCollAttendanceDetails = new AttendanceDetailsVoCollection();
					form.getGlobalContext().Emergency.setCurrentEmergencyAttendance(null);
				}
				else
				{
					voAttendanceDetails = new AttendanceDetailsVo();
					createCareContextForAttendance(voEpisodeDetails, voAttendanceDetails);
					voCollAttendanceDetails = new AttendanceDetailsVoCollection();
					voCollAttendanceDetails = voEpisodeDetails.getEmergencyAttendances();
				}
			}
		}
		// EmergencyEpisode not exist => Must create CareSpell and Episode of Care
		else
		{
			// Create new CARE SPELL and mark as TO BE SAVED
			createNewCareSpell();
			form.getLocalContext().setCreateNewCareSpell(Boolean.TRUE);
			voEpisodeDetails = new EpisodeDetailsVo();
			voEpisodeDetails.setEpisodeOfCare(form.getLocalContext().getCurrentEpisodeOfCare());
			voAttendanceDetails = new AttendanceDetailsVo();
			voAttendanceDetails.setCareContext(form.getLocalContext().getCurrentCareContext());
			voCollAttendanceDetails = new AttendanceDetailsVoCollection();
			form.getGlobalContext().Emergency.setCurrentEmergencyAttendance(null);
		}

		// Populate EpisodeDetails
		voEpisodeDetails.setCategory(form.cmbPatientCategory().getValue());
		voEpisodeDetails.setPresentingComplaint(form.cmbPresComplaint().getValue());
		voEpisodeDetails.setSourceOfReferral(form.cmbSourceOfReferral().getValue());
		voEpisodeDetails.setOtherReferral(form.txtOther().getValue()); // wdev-16070

		voEpisodeDetails.setIncidentLocation(form.cmbIncidentLocation().getValue());
		voEpisodeDetails.setLocationDetails(form.getLocalContext().getLocationDetails());
		voEpisodeDetails.setReferringGP(form.getLocalContext().getSelectedGp()); // wdev-14420
		voEpisodeDetails.setInjuryDateTime(form.dtimInjury().getValue());

		// wdev-14582
		if (form.getLocalContext().getTIIG() != null && form.getLocalContext().getTIIG().getID_TIIG() == null)
		{
			form.getLocalContext().getTIIG().setPatient(form.getGlobalContext().Core.getPatientShort());
			form.getLocalContext().getTIIG().setEpisode(voEpisodeDetails.getEpisodeOfCare());
			form.getLocalContext().getTIIG().setAttendance(voAttendanceDetails.getCareContext());
		}
		if (!PatientCategory.ASSAULT.equals(form.cmbPatientCategory().getValue()) && !PresentingComplaint.ASSAULT.equals(form.cmbPresComplaint().getValue()) && voEpisodeDetails.getTiigIsNotNull() && voEpisodeDetails.getTiig().getID_TIIGIsNotNull())
		{
			form.getLocalContext().setTIIG(voEpisodeDetails.getTiig());
			voEpisodeDetails.setTiig(null);
		}
		else
		{
			if (voEpisodeDetails.getID_EmergencyEpisode() == null)
			{
				if (form.getLocalContext().getTIIG() != null && form.getLocalContext().getTIIG().getID_TIIGIsNotNull())
				{
					form.getLocalContext().setTIIG(copyTIIGVO(form.getLocalContext().getTIIG()));
					form.getLocalContext().getTIIG().setPatient(form.getGlobalContext().Core.getPatientShort());
					form.getLocalContext().getTIIG().setEpisode(voEpisodeDetails.getEpisodeOfCare());
					form.getLocalContext().getTIIG().setAttendance(voAttendanceDetails.getCareContext());
				}
			}
			voEpisodeDetails.setTiig(form.getLocalContext().getTIIG());
			form.getLocalContext().setTIIG(null);
		}
		// ----------------------

		// wdev-14615
		if (!PatientCategory.RTA.equals(form.cmbPatientCategory().getValue()) && voEpisodeDetails.getRTADetailsIsNotNull() && voEpisodeDetails.getRTADetails().getID_RTAIsNotNull())
		{
			form.getLocalContext().setRTA(voEpisodeDetails.getRTADetails());
			voEpisodeDetails.setRTADetails(null);
		}
		else
		{
			if (voEpisodeDetails.getID_EmergencyEpisode() == null)
			{
				if (form.getLocalContext().getRTA() != null && form.getLocalContext().getRTA().getRTATypeIsNotNull())
				{
					form.getLocalContext().setRTA(copyRTAVo(form.getLocalContext().getRTA()));
				}
			}
			voEpisodeDetails.setRTADetails(form.getLocalContext().getRTA());
			form.getLocalContext().setRTA(null);
		}

		voEpisodeDetails.setSchool(form.cmbSchool().getValue()); // wdev-14420
		voEpisodeDetails.setOccupation(form.cmbOcupation().getValue());
		voEpisodeDetails.setOccupationStatus(form.cmbOccupationStatus().getValue());
		voEpisodeDetails.setPlaceofEmployment(form.txtPlaceOfEmployment().getValue());
		voEpisodeDetails.setTriageCategoryType(form.cmbTriageCategory().getValue());
		voEpisodeDetails.setPatient(form.getGlobalContext().Core.getPatientShort());

		// Populate AttendanceDetails
		voAttendanceDetails.setAttendanceType(returnAttendanceType(form.GroupCategory().getValue()));
		voAttendanceDetails.setModeOfArrival(form.cmbModeOfArrival().getValue());
		voAttendanceDetails.setAccompaniedBy(form.cmbAccompaniedBy().getValue());
		voAttendanceDetails.setArrivalDateTime(form.dtimArrival().getValue());
		voAttendanceDetails.setEmergencyEpisode(voEpisodeDetails);
		voAttendanceDetails.setPatient(form.getGlobalContext().Core.getPatientShort()); // wdev-14420
		voAttendanceDetails.setEpisode(voEpisodeDetails); // wdev-14420
		voAttendanceDetails.setAmbulanceJobNo(form.txtAmbulanceJobNo().getValue());
		voAttendanceDetails.setAmbulanceArrivalDateTime(form.dtimAmbulanceArrivalTime().getValue());
		voAttendanceDetails.setAgeAtAttendance(calculateAge());
		voAttendanceDetails.setUrgencyLevel(form.cmbUrgencyLevel().getValue()); // wdev-14799

		voAttendanceDetails.setEDConsultant(form.cmbEDConsultant().getValue()); // wdev-16070
		voAttendanceDetails.setDeptType(form.cmbDepartmentType().getValue()); // wdev-17008
		voAttendanceDetails.setVisitType(form.cmbAttendanceType().getValue()); // wdev-16070

		// wdev-16070
		if (domain.getMosUser() instanceof MemberOfStaffLiteVo)
		{
			MemberOfStaffLiteVo tempVo = (MemberOfStaffLiteVo) domain.getMosUser();
			if (voAttendanceDetails.getID_EmergencyAttendance() == null)
			{
				voAttendanceDetails.setRegisteringMOS(tempVo);
				voAttendanceDetails.setUpdatingMOS(null);
			}
			else
				voAttendanceDetails.setUpdatingMOS(tempVo);
		}
		DateTime registrationDate = form.dtimRegistration().getValue();

		voAttendanceDetails.setRegistrationDateTime(registrationDate);

		voAttendanceDetails.setPreferedLanguage(form.cmbPatPrefLanguage().getValue());
		voAttendanceDetails.setIntrepreterRequired(form.cmbInterpreterRequired().getValue());
		voAttendanceDetails.setIsPrimaryCare(form.chkIsPrimaryCare().getValue());//WDEV-17459
		voAttendanceDetails.setComments(form.txtComments().getValue());
		
		//WDEV-17683
		if (voAttendanceDetails.getID_EmergencyAttendance() == null)
		{
			voAttendanceDetails.setRegistrationLocation(getLocation());
		}
		
		//WDEV-17008
		if (voAttendanceDetails.getID_EmergencyAttendance()==null)
		{
			//voAttendanceDetails.setIsCoded(false);
		}
		else //WDEV-17003
		{
			voAttendanceDetails.getCareContext().setStartDateTime(registrationDate);
		}

		if (form.pnlDischargeOutcome().isVisible())
		{
			voAttendanceDetails.setOutcome(form.cmbOutcome().getValue());
			voAttendanceDetails.setDischargeDateTime(form.dtimDischarge().getValue());
			if (form.dtimDischarge().getValue() != null)
			{
				voAttendanceDetails.getCareContext().setEndDateTime(form.dtimDischarge().getValue());//WDEV-17003
			}
			voAttendanceDetails.setDestination(form.txtDestination().getValue());
		}

		if (voCollAttendanceDetails.contains(voAttendanceDetails))
		{
			int index = voCollAttendanceDetails.indexOf(voAttendanceDetails);
			voCollAttendanceDetails.remove(voAttendanceDetails);
			voCollAttendanceDetails.add(index, voAttendanceDetails);
		}
		else
		{
			voCollAttendanceDetails.add(voAttendanceDetails);
		}

		voEpisodeDetails.setEmergencyAttendances(voCollAttendanceDetails);
		voEpisodeDetails.setMedPatientConsent(form.chkGPMedicationDetailsPatientConsents().getValue());	//wdev-17819

		// populate Special Interest
		if (form.getGlobalContext().Emergency.getCollSpecialInterestDetailsIsNotNull() && form.getGlobalContext().Emergency.getCollSpecialInterestDetails().size() > 0)
		{
			SpecialInterestDetailsVoCollection tempVoColl = new SpecialInterestDetailsVoCollection();
			for (int i = 0; i < form.getGlobalContext().Emergency.getCollSpecialInterestDetails().size(); i++)
			{
				SpecialInterestDetailsVo tempSpecVo = form.getGlobalContext().Emergency.getCollSpecialInterestDetails().get(i);
				if (tempSpecVo != null)
				{
					if (tempSpecVo.getID_SpecialInterestDetail() == null)
					{
						tempSpecVo.setEpisode(voEpisodeDetails.getEpisodeOfCare());
						tempSpecVo.setAttendance(voAttendanceDetails.getCareContext());
						tempSpecVo.setPatient(form.getGlobalContext().Core.getPatientShort());
					}
					tempVoColl.add(tempSpecVo);
				}
			}
			if (tempVoColl.size() == 0)
				tempVoColl = null;

			voEpisodeDetails.setSpecialInterestDetails(tempVoColl);
		}
		else
		{
			voEpisodeDetails.setSpecialInterestDetails(null);
		}

		return voEpisodeDetails;
	}
	
	//WDEV-17683
	private LocationLiteVo getLocation()
	{
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;

		if (domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) domain.getCurrentLocation();

		}
		else if (domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) domain.getCurrentLocation();
			if (locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(), locsite.getVersion_Location());
				LocSiteShortVo locShortVo = domain.getTypeOfLocSite(loc);
				loc.setType(locShortVo.getType());
			}
		}

		if (loc != null && loc.getTypeIsNotNull() && loc.getType().equals(LocationType.ANE))
			return loc;
		else
			return null;
	}

	private String getReferalGpTooltip(GpShortVo gp)
	{
		if (gp == null)
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.imbReferralGP().setVisible(true);
			}
			else
			{
				form.imbReferralGP().setVisible(false);
			}
			return "No GP Details";
		}

		StringBuffer sbGPDetails = new StringBuffer();
		if (gp.getNameIsNotNull())
		{
			sbGPDetails.append(Textile.setBold("GP DETAILS") + "\r" + Textile.setBold("GP Name: ") + gp.getName().toString());
			form.txtReferralGP().setValue(gp.getName().toString());
		}

		return new Textile().process(sbGPDetails.toString());
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.GPSelection) && result.equals(DialogResult.OK))
		{
			Patient patient = form.getLocalContext().getPatient();
			GpShortVo gpDetails = form.getGlobalContext().Core.getGPDetails();
			form.getLocalContext().setSelectedGp(gpDetails);

			LocSiteShortVo gpSurgery = form.getGlobalContext().Core.getGPSurgery();
			if (patient == null)
				patient = new Patient();

			form.imbReferralGP().setTooltip(getReferalGpTooltip(gpDetails));

			if (gpDetails != null)
				form.txtReferralGP().setValue(gpDetails.getName().toString());

			patient.setGp(gpDetails);
			patient.setGpSurgery(gpSurgery);
			form.getLocalContext().setPatient(patient);
		}

		if (formName.equals(form.getForms().Emergency.LocationDetailsDialog) && result.equals(DialogResult.OK))
		{
			form.getLocalContext().setLocationDetails(form.getGlobalContext().Emergency.getLocationDetails());
			form.imbLocDetails().setTooltip(form.getGlobalContext().Emergency.getLocationDetailsIsNotNull() ? "Location details: " + form.getGlobalContext().Emergency.getLocationDetails() : null); // WDEV-15227
		}
		if (formName.equals(form.getForms().Emergency.SendToAreaDialog) && result.equals(DialogResult.OK))
		{
			if (save())
			{
				form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.SAVE);
				form.fireCustomControlValueChanged();
				
				engine.open(form.getForms().Core.PrintReport);//WDEV-17428
			}
		}
		// wdev-14420
		if (formName.equals(form.getForms().Emergency.EmergencyAttendancesDialog) && result.equals(DialogResult.OK))
		{
			if (form.getGlobalContext().Emergency.getEmergencyEpisodeDetailsIsNotNull() && form.getGlobalContext().Emergency.getEmergencyEpisodeDetails() instanceof EpisodeDetailsVo)
			{
				EpisodeDetailsVo episode = domain.getEmergencyEpisode((EpisodeDetailsVo) form.getGlobalContext().Emergency.getEmergencyEpisodeDetails());  //wdev-17819
				form.getGlobalContext().Emergency.setEmergencyEpisodeDetails(episode);									//wdev-17819
				displayRecord(form.getGlobalContext().Emergency.getEmergencyEpisodeDetails());

				
				
				form.getLocalContext().setLocationDetails(episode.getLocationDetails());
				form.getGlobalContext().Emergency.setLocationDetails(episode.getLocationDetails());
				form.getGlobalContext().Emergency.setCollSpecialInterestDetails(episode.getSpecialInterestDetails()); 	//WDEV-17707
				
				if (episode.getReferringGPIsNotNull())
				{
					GpShortVo gp = new GpShortVo();
					gp.setID_Gp(episode.getReferringGP().getID_Gp());
					form.getLocalContext().setSelectedGp(gp);
				}
				else
					form.getLocalContext().setSelectedGp(null);

				form.getLocalContext().setSelectedEmergencyEpisode(episode);		//wdev-17819
				if (form.getLocalContext().getSelectedEmergencyEpisodeIsNotNull())
				{
					form.getLocalContext().setTIIG(form.getLocalContext().getSelectedEmergencyEpisode().getTiig());
					form.getLocalContext().setRTA(form.getLocalContext().getSelectedEmergencyEpisode().getRTADetails());

				}
				updateControlState();

			}
		}

		if (formName.equals(form.getForms().Emergency.SpecialInterest) && result.equals(DialogResult.OK))
		{
			form.btnSpecialInterest().setTooltip(createSpecialInterestTooltip(form.getGlobalContext().Emergency.getCollSpecialInterestDetails()));
		}

		if (formName.equals(form.getForms().Emergency.TIIGDialog) && result.equals(DialogResult.OK))
		{
			emergencyepisodeliteVo tempVo = form.getGlobalContext().Emergency.getTIIG();
			if (tempVo != null)
			{
				form.dtimInjury().setValue(tempVo.getInjuryDateTime());
				form.cmbIncidentLocation().setValue(tempVo.getIncidentLocation());
				form.getLocalContext().setTIIG(tempVo.getTiig());
			}
			else
				form.getLocalContext().setTIIG(null);
		}

		if (formName.equals(form.getForms().Emergency.RTADialog) && result.equals(DialogResult.OK)) // wdev-14615
		{
			form.getLocalContext().setRTA(form.getGlobalContext().Emergency.getRTA());
		}

		// ----------
	}

	protected void onFormModeChanged()
	{
		updateControlState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{

	}

	private void hideOrDisableDischargeDetails(boolean isVisible)
	{
		form.pnlDischargeOutcome().setVisible(isVisible);
		form.cmbOutcome().setVisible(isVisible);
		form.lblOutcome().setVisible(isVisible);
		form.txtDestination().setVisible(isVisible);
		form.lblDestination().setVisible(isVisible);
		form.dtimDischarge().setVisible(isVisible);
		form.lblDischargeTime().setVisible(isVisible);
		form.lblDischargeTime1().setVisible(isVisible);		//wdev-17945
	}
	
	private void clearInstanceControls()
	{
		form.GroupCategory().setValue(null);
		form.cmbModeOfArrival().setValue(null);
		form.lblAmbulanceJobNo().setTextColor(Color.Black); // wdev-16070
		form.cmbAccompaniedBy().setValue(null);
		form.dtimArrival().setValue(null);
		form.dtimRegistration().setValue(null);

		form.dtimAmbulanceArrivalTime().setValue(null);
		form.txtAmbulanceJobNo().setValue(null);
		form.cmbUrgencyLevel().setValue(null);
		form.cmbEDConsultant().setValue(null); // wdev-16070
		form.cmbDepartmentType().setValue(null);//WDEV-17008
		form.lblRegisteredBy1().setValue(null); // wdev-16070
		form.lblLastUpdatedBy1().setValue(null); // wdev-16070
		form.cmbAttendanceType().setValue(null); // wdev-16070

		form.cmbPatPrefLanguage().setValue(null);
		form.cmbInterpreterRequired().setValue(null);
		form.chkIsPrimaryCare().setValue(null);//WDEV-17459
		form.txtComments().setValue(null);
	}

	// wdev-14420
	private void clearEpisodeControls()
	{
		form.cmbPatientCategory().setValue(null);
		form.cmbPresComplaint().setValue(null);
		form.cmbSourceOfReferral().setValue(null);
		form.txtOther().setValue(null); // wdev-16070

		form.cmbIncidentLocation().setValue(null);
		form.txtReferralGP().setValue(null);
		form.dtimInjury().setValue(null);

		form.cmbTriageCategory().setValue(null);
		form.txtPlaceOfEmployment().setValue(null);
		form.cmbOccupationStatus().setValue(null);
		form.cmbOcupation().setValue(null);
		form.cmbSchool().setValue(null);
		form.btnRTA().setVisible(false);
		form.btnRTA1().setVisible(false);
		form.btnTIIG().setVisible(false);
		form.chkGPMedicationDetailsPatientConsents().setValue(null);		//wdev-17819

	}

	private void clearEmergencyAttendanceDischargeDetails()
	{
		form.cmbOutcome().setValue(null);
		form.txtDestination().setValue(null);
		form.dtimDischarge().setValue(null);
	}

	private void getAndDisplayRecord(ValueObject rowValue)
	{
		clearAttendanceDetails();

		if (rowValue == null)
		{
			return;
		}

		if (rowValue instanceof AttendanceDetailsVo)
		{
			AttendanceDetailsVo attendance = ((AttendanceDetailsVo) rowValue);
			EpisodeDetailsVo episode = domain.getEmergencyEpisode(attendance.getEpisode());
			// EpisodeDetailsVo episode = (EpisodeDetailsVo) selectedRow.getParentRow().getValue();

			// Populate EpisodeDetails
			form.cmbPatientCategory().setValue(episode.getCategory());
			form.cmbPresComplaint().setValue(episode.getPresentingComplaint());
			// wdev-14582
			if (PatientCategory.ASSAULT.equals(episode.getCategory()) || PresentingComplaint.ASSAULT.equals(episode.getPresentingComplaint()))
				form.btnTIIG().setVisible(true);
			else
				form.btnTIIG().setVisible(false);
			// -----------------------------------

			// wdev-14615
			if (PatientCategory.RTA.equals(episode.getCategory()))
			{
				if (form.btnTIIG().isVisible())
				{
					form.btnRTA1().setVisible(true);
					form.btnRTA().setVisible(false);
				}
				else
				{
					form.btnRTA().setVisible(true);
					form.btnRTA1().setVisible(false);
				}

			}
			else
			{
				form.btnRTA1().setVisible(false);
				form.btnRTA().setVisible(false);
			}
			// ------------
			// WDEV-14420
			// form.imbLocDetails().setTooltip(episode.getLocationDetailsIsNotNull() ? "Location details: " + episode.getLocationDetails() : null);
			form.imbLocDetails().setTooltip(episode.getLocationDetailsIsNotNull() ? "Location details: " + episode.getLocationDetails() : "Location Details");
			form.getGlobalContext().Emergency.setLocationDetails(episode.getLocationDetails());
			form.cmbSourceOfReferral().setValue(episode.getSourceOfReferral());

			//form.txtOther().setEnabled(form.cmbSourceOfReferral().getValue() != null && form.cmbSourceOfReferral().getValue().equals(ReferredBy.OTHER)); // wdev-16070
			form.txtOther().setValue(episode.getOtherReferral()); // wdev-16070

			form.cmbIncidentLocation().setValue(episode.getIncidentLocation());
			form.cmbModeOfArrival().setValue(attendance.getModeOfArrival());

			// wdev-14420
			form.txtAmbulanceJobNo().setValue(attendance.getAmbulanceJobNo());

			form.cmbAccompaniedBy().setValue(attendance.getAccompaniedBy());
			form.dtimInjury().setValue(episode.getInjuryDateTime());
			form.dtimArrival().setValue(attendance.getArrivalDateTime());
			form.dtimRegistration().setValue(attendance.getRegistrationDateTime());
			form.dtimAmbulanceArrivalTime().setValue(attendance.getAmbulanceArrivalDateTime());
			form.cmbUrgencyLevel().setValue(attendance.getUrgencyLevel()); // wdev-14799
			form.cmbEDConsultant().setValue(attendance.getEDConsultant()); // wdev-16070
			form.cmbDepartmentType().setValue(attendance.getDeptType()); //WDEV-17008
			form.cmbAttendanceType().setValue(attendance.getVisitType()); // wdev-16070

			form.cmbSchool().setValue(episode.getSchool());
			form.cmbOccupationStatus().setValue(episode.getOccupationStatus());
			form.cmbOcupation().setValue(episode.getOccupation());
			form.txtPlaceOfEmployment().setValue(episode.getPlaceofEmployment());
			form.cmbTriageCategory().setValue(episode.getTriageCategoryType());
			form.chkGPMedicationDetailsPatientConsents().setValue(episode.getMedPatientConsent());  //wdev-17819

			if (episode.getReferringGPIsNotNull())
			{
				//WDEV-17297
				GpLiteWithNameVo tempGP = domain.getGP(episode.getReferringGP().getID_Gp());
				form.txtReferralGP().setValue(tempGP.getName().toString());
				if (tempGP.getNameIsNotNull())
				{
					form.imbReferralGP().setTooltip("<b>GP DETAILS <br><br> GP Name: " + tempGP.getName().toString()+"</b>");
				}
			}

			if (attendance.getAttendanceTypeIsNotNull())
				form.GroupCategory().setValue(returnType(attendance.getAttendanceType()));

			hideOrDisableDischargeDetails(true);

			form.cmbOutcome().setValue(attendance.getOutcome());
			form.dtimDischarge().setValue(attendance.getDischargeDateTime());
			form.txtDestination().setValue(attendance.getDestination());
			form.lblRegisteredBy1().setValue(attendance.getRegisteringMOSIsNotNull() && attendance.getRegisteringMOS().getNameIsNotNull() ? attendance.getRegisteringMOS().getName().toString() : ""); // wdev-16070
			form.lblLastUpdatedBy1().setValue(attendance.getUpdatingMOSIsNotNull() && attendance.getUpdatingMOS().getNameIsNotNull() ? attendance.getUpdatingMOS().getName().toString() : ""); // wdev-16070

			// populate Special Interest button tooltip
			form.getGlobalContext().Emergency.setCollSpecialInterestDetails(episode.getSpecialInterestDetails());
			form.btnSpecialInterest().setTooltip(createSpecialInterestTooltip(form.getGlobalContext().Emergency.getCollSpecialInterestDetails()));

			form.cmbPatPrefLanguage().setValue(attendance.getPreferedLanguage());
			form.cmbInterpreterRequired().setValue(attendance.getIntrepreterRequired());
			form.chkIsPrimaryCare().setValue(attendance.getIsPrimaryCare());//WDEV-17459
			form.txtComments().setValue(attendance.getComments());
		}
		else if (rowValue instanceof EpisodeDetailsVo)
		{
			EpisodeDetailsVo episode = (EpisodeDetailsVo) rowValue;

			// Populate EpisodeDetails
			form.cmbPatientCategory().setValue(episode.getCategory());
			form.cmbPresComplaint().setValue(episode.getPresentingComplaint());
			// wdev-14582
			if (PatientCategory.ASSAULT.equals(episode.getCategory()) || PresentingComplaint.ASSAULT.equals(episode.getPresentingComplaint()))
				form.btnTIIG().setVisible(true);
			else
				form.btnTIIG().setVisible(false);
			// -----------------------------------
			// wdev-14615
			if (PatientCategory.RTA.equals(episode.getCategory()))
			{
				if (form.btnTIIG().isVisible())
				{
					form.btnRTA1().setVisible(true);
					form.btnRTA().setVisible(false);
				}
				else
				{
					form.btnRTA().setVisible(true);
					form.btnRTA1().setVisible(false);
				}

			}
			else
			{
				form.btnRTA1().setVisible(false);
				form.btnRTA().setVisible(false);
			}
			// ------------
			form.imbLocDetails().setTooltip("Location details: " + episode.getLocationDetails());
			form.cmbSourceOfReferral().setValue(episode.getSourceOfReferral());

			//form.txtOther().setEnabled(form.cmbSourceOfReferral().getValue() != null && form.cmbSourceOfReferral().getValue().equals(ReferredBy.OTHER)); // wdev-16070
			form.txtOther().setValue(episode.getOtherReferral()); // wdev-16070

			form.cmbIncidentLocation().setValue(episode.getIncidentLocation());
			form.dtimInjury().setValue(episode.getInjuryDateTime());
			// wdev-14420
			form.cmbSchool().setValue(episode.getSchool());
			form.cmbOccupationStatus().setValue(episode.getOccupationStatus());
			form.cmbOcupation().setValue(episode.getOccupation());
			form.txtPlaceOfEmployment().setValue(episode.getPlaceofEmployment());
			form.cmbTriageCategory().setValue(episode.getTriageCategoryType());
			form.chkGPMedicationDetailsPatientConsents().setValue(episode.getMedPatientConsent());  //wdev-17819
			if (episode.getReferringGPIsNotNull())
			{
				form.txtReferralGP().setValue(domain.getGP(episode.getReferringGP().getID_Gp()).getName().toString());
			}

			// populate Special Interest button tooltip
			form.getGlobalContext().Emergency.setCollSpecialInterestDetails(episode.getSpecialInterestDetails());
			form.btnSpecialInterest().setTooltip(createSpecialInterestTooltip(form.getGlobalContext().Emergency.getCollSpecialInterestDetails()));

			hideOrDisableDischargeDetails(false);
		}
	}

	private String createSpecialInterestTooltip(SpecialInterestDetailsVoCollection collSpecialInterestDetails)
	{
		if (collSpecialInterestDetails == null || (collSpecialInterestDetails != null && collSpecialInterestDetails.size() == 0))
			return null;

		StringBuffer tooltip = new StringBuffer();

		/*
		 * tooltip.append("<table border=1>"); tooltip.append("<tr><td><b>Category  &nbsp &nbsp</b></td><td><b>Start Date &nbsp &nbsp </b></td><td><b>End Date &nbsp &nbsp </b></td></tr>"); for (int i=0;i<collSpecialInterestDetails.size();i++) { tooltip.append("<tr>"); SpecialInterestDetailsVo specInterest = collSpecialInterestDetails.get(i); tooltip.append("<td><b>"+specInterest.getSpecialInterestCategory().toString()+ "</b></td><td><b>"+specInterest.getStartDateTime().toString() +"</b></td><td><b>" + specInterest.getCompletedDateTime().toString()+"</b></td></tr>"); } tooltip.append("</table>");
		 */
		// tooltip.append("<table style=\"border :1px solid black; border-collapse:collapse;\">");
		tooltip.append("<table style=\"border :1px solid black; border-collapse:collapse;\">");
		tooltip.append("<tr><td style=\" border:1px solid black;\"><b>Category  &nbsp &nbsp</b></td><td style=\" border:1px solid black;\"><b>Start Date &nbsp &nbsp </b></td><td style=\" border:1px solid black;\"><b>End Date &nbsp &nbsp </b></td></tr>");
		for (int i = 0; i < collSpecialInterestDetails.size(); i++)
		{
			tooltip.append("<tr>");
			SpecialInterestDetailsVo specInterest = collSpecialInterestDetails.get(i);
			tooltip.append("<td style=\" border:1px solid black;\"><b>" +( specInterest!=null && specInterest.getSpecialInterestCategory()!=null ? specInterest.getSpecialInterestCategory():"") 
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(specInterest!=null && specInterest.getStartDateTime()!=null ? specInterest.getStartDateTime():"" )
							+ "</b></td><td style=\" border:1px solid black;\"><b>" +(specInterest!=null && specInterest.getCompletedDateTime()!=null ? specInterest.getCompletedDateTime():"") + "</b></td></tr>");
		}
		tooltip.append("</table>");

		return tooltip.toString();
	}

	// wdev-14420
	private void displayRecord(ims.vo.ValueObject selectedRow)
	{
		if (selectedRow != null)
		{
			clearEpisodeControls();
			clearEmergencyAttendanceDischargeDetails();
			if (selectedRow instanceof EpisodeDetailsVo)
			{
				EpisodeDetailsVo episode = (EpisodeDetailsVo) selectedRow;

				// Populate EpisodeDetails
				form.cmbPatientCategory().setValue(episode.getCategory());
				form.cmbPresComplaint().setValue(episode.getPresentingComplaint());
				form.imbLocDetails().setTooltip("Location details: " + episode.getLocationDetails());
				form.cmbSourceOfReferral().setValue(episode.getSourceOfReferral());
				form.cmbIncidentLocation().setValue(episode.getIncidentLocation());
				form.dtimInjury().setValue(episode.getInjuryDateTime());

				form.cmbOccupationStatus().setValue(episode.getOccupationStatus());
				form.cmbOcupation().setValue(episode.getOccupation());
				form.cmbSchool().setValue(episode.getSchool());
				form.cmbTriageCategory().setValue(episode.getTriageCategoryType());
				form.txtPlaceOfEmployment().setValue(episode.getPlaceofEmployment());
				form.chkGPMedicationDetailsPatientConsents().setValue(episode.getMedPatientConsent());  //wdev-17819
				// wdev-14582
				if (PatientCategory.ASSAULT.equals(episode.getCategory()) || PresentingComplaint.ASSAULT.equals(episode.getPresentingComplaint()))
					form.btnTIIG().setVisible(true);
				else
					form.btnTIIG().setVisible(false);
				// -----------------------------------
				// wdev-14615
				if (PatientCategory.RTA.equals(episode.getCategory()))
				{
					if (form.btnTIIG().isVisible())
					{
						form.btnRTA1().setVisible(true);
						form.btnRTA().setVisible(false);
					}
					else
					{
						form.btnRTA().setVisible(true);
						form.btnRTA1().setVisible(false);
					}

				}
				else
				{
					form.btnRTA1().setVisible(false);
					form.btnRTA().setVisible(false);
				}
				// ------------
				if (episode.getReferringGPIsNotNull())
				{
					form.txtReferralGP().setValue(domain.getGP(episode.getReferringGP().getID_Gp()).getName().toString());
				}
				// wdev-14420
				if (episode != null)
				{
					if (episode.getSpecialInterestDetails() != null && episode.getSpecialInterestDetails().size() > 0)
					{
						// populate SpecialInterest Button Tooltip
					}
					else
					{
						form.btnSpecialInterest().setTooltip(null);

					}
				}

				hideOrDisableDischargeDetails(false);
			}
			updateControlState();
		}
		else
		{
			clearAttendanceDetails();
		}

	}

	// ----------

	private GroupCategoryEnumeration returnType(AttendanceType value)
	{
		if (value == null)
			return null;

		if (value.equals(AttendanceType.FIRST))
			return GroupCategoryEnumeration.rdoFirstVisit;
		else if (value.equals(AttendanceType.SCHEDULED))
			return GroupCategoryEnumeration.rdoScheduledReturn;
		else if (value.equals(AttendanceType.UNSCHEDULED))
			return GroupCategoryEnumeration.rdoUnscheduledReturn;

		return null;
	}

	private void updateControlState()
	{
		AttendanceDetailsVo attendVo = domain.getLastAttendance(form.getGlobalContext().Core.getPatientShort());
	
		boolean isExpectedArrival = attendVo!=null && Boolean.TRUE.equals(attendVo.getIsExpectedArrival());
		
		TrackingSendToAreaVo trackPatient = domain.isPatientCurrentlyinED(form.getGlobalContext().Core.getPatientShort());
		form.getLocalContext().setAllowNewAttendance(trackPatient!=null ? false :true);
		
		Integer age = calculateAge();
		
		ValueObject selectedRowValue = form.getLocalContext().getSelectedRow();
		
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoFirstVisit, false);
			form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoScheduledReturn, false);
			form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoUnscheduledReturn, false);
		}
		
		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode())&& Boolean.TRUE.equals(form.getLocalContext().getAllowNewAttendance()) && !isExpectedArrival);//WDEV-17278
		form.btnNew().setEnabled(FormMode.VIEW.equals(form.getMode()) && getLoc() != null);
		
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && selectedRowValue != null && (selectedRowValue instanceof AttendanceDetailsVo));
		
		form.cmbSourceOfReferral().setRequired(true);
		form.cmbSourceOfReferral().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.dtimArrival().setRequired(true);
		form.dtimArrival().setEnabled(FormMode.EDIT.equals(form.getMode()));
			
		form.dtimRegistration().setRequired(true);
		form.dtimRegistration().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		EDAttendanceControlsConfigVoCollection attendanceControlsConfig = domain.getEDAttendanceControlsConfig(EDAttendenceControlType.ATTEND_CONTROLS);
		
		for (int i=0;attendanceControlsConfig!=null && i<attendanceControlsConfig.size();i++)
		{
			EDAttendanceControlsConfigVo controlConfig = attendanceControlsConfig.get(i);
			
			if (ATTENDANCE_TYPE.equals(controlConfig.getControlIMSID()))
			{
				form.lblAttendanceType().setVisible(controlConfig.getIsVisible());
				
				form.cmbAttendanceType().setVisible(controlConfig.getIsVisible());
				form.cmbAttendanceType().setRequired(controlConfig.getIsRequired());
				form.cmbAttendanceType().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (PATIENT_CATEGORY.equals(controlConfig.getControlIMSID()))
			{
				form.lblPatientCategory().setVisible(controlConfig.getIsVisible());
				
				form.cmbPatientCategory().setVisible(controlConfig.getIsVisible());
				form.cmbPatientCategory().setRequired(controlConfig.getIsRequired());
				form.cmbPatientCategory().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
				form.btnTIIG().setVisible(controlConfig.getIsVisible() && ((form.cmbPatientCategory().getValue() != null && form.cmbPatientCategory().getValue().equals(PatientCategory.ASSAULT)) || (form.cmbPresComplaint().getValue() != null && form.cmbPresComplaint().getValue().equals(PresentingComplaint.ASSAULT))));
				form.btnTIIG().setEnabled(controlConfig.getIsEditable());
				//form.btnTIIG().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
			
				form.btnRTA().setVisible(controlConfig.getIsVisible() && !form.btnTIIG().isVisible() && (form.cmbPatientCategory().getValue() != null && form.cmbPatientCategory().getValue().equals(PatientCategory.RTA)));
				form.btnRTA().setEnabled(controlConfig.getIsEditable());
				//form.btnRTA().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
				form.btnRTA1().setVisible(controlConfig.getIsVisible() && form.btnTIIG().isVisible() && (form.cmbPatientCategory().getValue() != null && form.cmbPatientCategory().getValue().equals(PatientCategory.RTA)));
				form.btnRTA1().setEnabled(controlConfig.getIsEditable());
				//form.btnRTA1().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
			
			}
			else if (PRESENTING_COMPLAINT.equals(controlConfig.getControlIMSID()))
			{
				form.lblPresComplaint().setVisible(controlConfig.getIsVisible());
				
				form.cmbPresComplaint().setVisible(controlConfig.getIsVisible());
				form.cmbPresComplaint().setRequired(controlConfig.getIsRequired());
				form.cmbPresComplaint().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (TRIAGE_CATEGORY.equals(controlConfig.getControlIMSID()))
			{
				form.lblTriageCategory().setVisible(controlConfig.getIsVisible());
				
				form.cmbTriageCategory().setVisible(controlConfig.getIsVisible());
				form.cmbTriageCategory().setRequired(controlConfig.getIsRequired());
				form.cmbTriageCategory().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (IS_PRIMARY_CARE.equals(controlConfig.getControlIMSID()))//WDEV-17459
			{
				form.lblIsPrimaryCare().setVisible(controlConfig.getIsVisible());
				
				form.chkIsPrimaryCare().setVisible(controlConfig.getIsVisible());
				form.chkIsPrimaryCare().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());		
			}
			else if( IS_GPMEDDET_PATIENTCONS.equals(controlConfig.getControlIMSID()))  //wdev-17819
			{
				form.lblGPMEdicationDetails().setVisible(controlConfig.getIsVisible());
				form.lblPatientConsents().setVisible(controlConfig.getIsVisible());
				form.chkGPMedicationDetailsPatientConsents().setVisible(controlConfig.getIsVisible());
				form.chkGPMedicationDetailsPatientConsents().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
			}
			else if (OTHER.equals(controlConfig.getControlIMSID()))
			{
				form.lblOther().setVisible(controlConfig.getIsVisible());
				
				form.txtOther().setVisible(controlConfig.getIsVisible());
				form.txtOther().setRequired(controlConfig.getIsRequired());
				form.txtOther().setEnabled(FormMode.EDIT.equals(form.getMode()) && (controlConfig.getIsEditable() && ReferredBy.OTHER.equals(form.cmbSourceOfReferral().getValue())));		
			}
			else if (INCIDENT_LOCATION.equals(controlConfig.getControlIMSID()))
			{
				form.lblIncidentLocation().setVisible(controlConfig.getIsVisible());
				
				form.cmbIncidentLocation().setVisible(controlConfig.getIsVisible());
				form.cmbIncidentLocation().setRequired(controlConfig.getIsRequired());
				form.cmbIncidentLocation().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
				form.imbLocDetails().setVisible(controlConfig.getIsVisible());
				form.imbLocDetails().setEnabled(FormMode.EDIT.equals(form.getMode()) && (controlConfig.getIsEditable() && form.cmbIncidentLocation().getValue() != null));
				
			}
			else if (REFERRAL_GP.equals(controlConfig.getControlIMSID()))
			{
				form.lblReferralGP().setVisible(controlConfig.getIsVisible() && ReferredBy.GP.equals(form.cmbSourceOfReferral().getValue()));//WDEV-17160
				
				form.txtReferralGP().setVisible(controlConfig.getIsVisible() && ReferredBy.GP.equals(form.cmbSourceOfReferral().getValue()));//WDEV-17160
				form.txtReferralGP().setRequired(false);//WDEV-17160
				form.txtReferralGP().setEnabled(false);//WDEV-17160
				
				form.imbReferralGP().setVisible(controlConfig.getIsVisible() && controlConfig.getIsEditable() && ReferredBy.GP.equals(form.cmbSourceOfReferral().getValue()));//WDEV-17160
				form.imbReferralGP().setEnabled(FormMode.EDIT.equals(form.getMode()) && (controlConfig.getIsEditable() && ReferredBy.GP.equals(form.cmbSourceOfReferral().getValue())));//WDEV-17160
				
			}
			else if (MODE_OF_ARRIVAL.equals(controlConfig.getControlIMSID()))
			{
				form.lblModeOfArrival().setVisible(controlConfig.getIsVisible());
				
				form.cmbModeOfArrival().setVisible(controlConfig.getIsVisible());
				form.cmbModeOfArrival().setRequired(controlConfig.getIsRequired());
				form.cmbModeOfArrival().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (AMBULANCE_JOB_NO.equals(controlConfig.getControlIMSID()))
			{
				form.lblAmbulanceJobNo().setVisible(controlConfig.getIsVisible());
				form.lblAmbulanceJobNo().setTextColor(ModeOfArrival.AMBULANCE.equals(form.cmbModeOfArrival().getValue()) ? Color.Red :Color.Black);
				
				form.txtAmbulanceJobNo().setVisible(controlConfig.getIsVisible());
				form.txtAmbulanceJobNo().setRequired(controlConfig.getIsRequired());
				form.txtAmbulanceJobNo().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable() && ModeOfArrival.AMBULANCE.equals(form.cmbModeOfArrival().getValue()));
				
			}
			else if (ACCOMPANIED_BY.equals(controlConfig.getControlIMSID()))
			{
				form.lblAccompaniedBy().setVisible(controlConfig.getIsVisible());
				
				form.cmbAccompaniedBy().setVisible(controlConfig.getIsVisible());
				form.cmbAccompaniedBy().setRequired(controlConfig.getIsRequired());
				form.cmbAccompaniedBy().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (SCHOOL.equals(controlConfig.getControlIMSID()))
			{
				form.lblSchool().setVisible(controlConfig.getIsVisible() && age <= ConfigFlag.GEN.PAEDIATRIC_AGE.getValue());
				
				form.cmbSchool().setVisible(controlConfig.getIsVisible() && age <= ConfigFlag.GEN.PAEDIATRIC_AGE.getValue());
				form.cmbSchool().setRequired(controlConfig.getIsRequired());
				form.cmbSchool().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (OCCUPATION.equals(controlConfig.getControlIMSID()))
			{
				form.lblOccupation().setVisible(controlConfig.getIsVisible() && age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue());
				
				form.cmbOcupation().setVisible(controlConfig.getIsVisible() && age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue());
				form.cmbOcupation().setRequired(controlConfig.getIsRequired());
				form.cmbOcupation().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (OCCUPATION_STATUS.equals(controlConfig.getControlIMSID()))
			{
				form.lblOccupationStatus().setVisible(controlConfig.getIsVisible() && age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue());
				
				form.cmbOccupationStatus().setVisible(controlConfig.getIsVisible() && age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue());
				form.cmbOccupationStatus().setRequired(controlConfig.getIsRequired());
				form.cmbOccupationStatus().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (PLACE_OF_EMPLOYMENT.equals(controlConfig.getControlIMSID()))
			{
				form.lblPlaceOfEmployment().setVisible(controlConfig.getIsVisible() && age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue());
				
				form.txtPlaceOfEmployment().setVisible(controlConfig.getIsVisible() && age > ConfigFlag.GEN.PAEDIATRIC_AGE.getValue());
				form.txtPlaceOfEmployment().setRequired(controlConfig.getIsRequired());
				form.txtPlaceOfEmployment().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (URGENCY_LEVEL.equals(controlConfig.getControlIMSID()))
			{
				form.lblUrgencyLevel().setVisible(controlConfig.getIsVisible());
				
				form.cmbUrgencyLevel().setVisible(controlConfig.getIsVisible());
				form.cmbUrgencyLevel().setRequired(controlConfig.getIsRequired());
				form.cmbUrgencyLevel().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (ED_CONSULTANT.equals(controlConfig.getControlIMSID()))
			{
				form.lblEDConsultatnt().setVisible(controlConfig.getIsVisible());
				
				form.cmbEDConsultant().setVisible(controlConfig.getIsVisible());
				form.cmbEDConsultant().setRequired(controlConfig.getIsRequired());
				form.cmbEDConsultant().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (DEPARTMENT_TYPE.equals(controlConfig.getControlIMSID())) //WDEV-17008
			{
				form.lblDepartmen().setVisible(controlConfig.getIsVisible());
				
				form.cmbDepartmentType().setVisible(controlConfig.getIsVisible());
				form.cmbDepartmentType().setRequired(controlConfig.getIsRequired());
				form.cmbDepartmentType().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (INCIDENT_TIME.equals(controlConfig.getControlIMSID()))
			{
				form.lblInjuryTime().setVisible(controlConfig.getIsVisible());
				
				form.dtimInjury().setVisible(controlConfig.getIsVisible());
				form.dtimInjury().setRequired(controlConfig.getIsRequired());
				form.dtimInjury().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (AMBULANCE_ARRIVAL_TIME.equals(controlConfig.getControlIMSID()))
			{
				form.lblAmbulanceArrivalTime().setVisible(controlConfig.getIsVisible());
				
				form.dtimAmbulanceArrivalTime().setVisible(controlConfig.getIsVisible());
				form.dtimAmbulanceArrivalTime().setRequired(controlConfig.getIsRequired());
				form.dtimAmbulanceArrivalTime().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (SPECIAL_INTEREST.equals(controlConfig.getControlIMSID()))
			{
				form.btnSpecialInterest().setVisible(controlConfig.getIsVisible());
			}
			else if (PATIENT_PREFERRED_LANGUAGE.equals(controlConfig.getControlIMSID()))
			{
				form.lblPatientPreferredLanguage1().setVisible(controlConfig.getIsVisible());
				form.lblPatientPreferredLanguage2().setVisible(controlConfig.getIsVisible());
				
				form.cmbPatPrefLanguage().setVisible(controlConfig.getIsVisible());
				form.cmbPatPrefLanguage().setRequired(controlConfig.getIsRequired());
				form.cmbPatPrefLanguage().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (INTERPRETER_REQUIRED.equals(controlConfig.getControlIMSID()))
			{
				form.lblInterpreterRequired().setVisible(controlConfig.getIsVisible());
				
				form.cmbInterpreterRequired().setVisible(controlConfig.getIsVisible());
				form.cmbInterpreterRequired().setRequired(controlConfig.getIsRequired());
				form.cmbInterpreterRequired().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (COMMENTS.equals(controlConfig.getControlIMSID()))
			{
				form.lblComments().setVisible(controlConfig.getIsVisible());
				
				form.txtComments().setVisible(controlConfig.getIsVisible());
				form.txtComments().setRequired(controlConfig.getIsRequired());
				form.txtComments().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());
				
			}
			else if (DISCHARGE_OUTCOME.equals(controlConfig.getControlIMSID()))
			{
				form.pnlDischargeOutcome().setVisible(controlConfig.getIsVisible() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo );
				form.lblOutcome().setVisible(controlConfig.getIsVisible() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo );
				form.cmbOutcome().setVisible(controlConfig.getIsVisible() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo );
				form.cmbOutcome().setRequired(controlConfig.getIsRequired());
				form.cmbOutcome().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo && ((AttendanceDetailsVo)selectedRowValue).getDischargeDateTimeIsNotNull());
				
				form.lblDischargeTime().setVisible(controlConfig.getIsVisible() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo );
				form.lblDischargeTime1().setVisible(controlConfig.getIsVisible() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo );  //wdev-17945
				form.dtimDischarge().setVisible(controlConfig.getIsVisible() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo );
				form.dtimDischarge().setRequired(controlConfig.getIsRequired());
				form.dtimDischarge().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo && ((AttendanceDetailsVo)selectedRowValue).getDischargeDateTimeIsNotNull());
				
				form.lblDestination().setVisible(controlConfig.getIsVisible() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo );
				form.txtDestination().setVisible(controlConfig.getIsVisible() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo );
				form.txtDestination().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable() && selectedRowValue!=null && selectedRowValue instanceof AttendanceDetailsVo && ((AttendanceDetailsVo)selectedRowValue).getDischargeDateTimeIsNotNull());
				
			}
			else if (REGISTERED_BY.equals(controlConfig.getControlIMSID()))
			{
				form.lblRegisteredBy().setVisible(controlConfig.getIsVisible());
				form.lblRegisteredBy1().setVisible(controlConfig.getIsVisible());				
			}
			else if (LAST_UPDATED_BY.equals(controlConfig.getControlIMSID()))
			{
				form.lblLastUpdatedBy().setVisible(controlConfig.getIsVisible());
				form.lblLastUpdatedBy1().setVisible(controlConfig.getIsVisible());				
			}
		}
		
		//WDEV-17140
		form.btnSkippedTriage().setVisible(FormMode.EDIT.equals(form.getMode()) && selectedRowValue==null);
		
		//WDEV-17160
		form.txtAttendanceCategoryRequired().setRequired(form.GroupCategory().isEnabled(GroupCategoryEnumeration.rdoFirstVisit) || form.GroupCategory().isEnabled(GroupCategoryEnumeration.rdoScheduledReturn) || form.GroupCategory().isEnabled(GroupCategoryEnumeration.rdoUnscheduledReturn) );
	}

	@Override
	protected void onImbLocDetailsClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.LocationDetailsDialog);
	}

	@Override
	protected void onImbReferralGPClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.GPSelection);
	}

	@Override
	protected void onCmbIncidentLocationValueChanged() throws PresentationLogicException
	{
		//WDEV-17297
		form.imbLocDetails().setTooltip("Location Details");
		form.getGlobalContext().Emergency.setLocationDetails(null);
		form.getLocalContext().setLocationDetails(null);
		updateControlState();
	}

	// wdev-14420
	protected void onRadioButtonGroupCategoryValueChanged() throws PresentationLogicException
	{
		if (form.GroupCategory().getValue().equals(GroupCategoryEnumeration.rdoScheduledReturn))
		{
			// EmergencyAttendance.ArrivalDateTime < NOW() - X (X = EMERGENCY_ATTENDANCE_SCHEDULED_RETURN_RULE_DAYS )
			form.cmbAttendanceType().setValue(EDVisitType.SCHEDULED_ATTENDENCE); // wdev-16070
			DateTime dt = new DateTime();
			dt.addDays(-ConfigFlag.GEN.EMERGENCY_ATTENDANCE_SCHEDULED_RETURN_RULE_DAYS.getValue());
			engine.open(form.getForms().Emergency.EmergencyAttendancesDialog, new Object[] { new Date(dt.getDate())}); // wdev-14420,wdev-17577
		}
		else if (form.GroupCategory().getValue().equals(GroupCategoryEnumeration.rdoUnscheduledReturn))
		{ 
			form.cmbAttendanceType().setValue(EDVisitType.UNSCHEDULED_ATTENDANCE); // wdev-16070  //WDEV-17984
			// EmergencyAttendance.ArrivalDateTime < NOW() - X (X = EMERGENCY_ATTENDANCE_UNSCHEDULED_RETURN_RULE_DAYS)
			DateTime dt = new DateTime();
			dt.addDays(-ConfigFlag.GEN.EMERGENCY_ATTENDANCE_UNSCHEDULED_RETURN_RULE_DAYS.getValue());
			engine.open(form.getForms().Emergency.EmergencyAttendancesDialog, new Object[] { new Date(dt.getDate()) }); // wdev-14420,wdev-17577
		}
		else if (form.GroupCategory().getValue().equals(GroupCategoryEnumeration.rdoFirstVisit))
		{
			form.cmbAttendanceType().setValue(EDVisitType.NEW_ATTENDENCE); // wdev-16070
			form.getLocalContext().setSelectedEmergencyEpisode(null);
			form.getLocalContext().setSelectedAttendanceDetails(null);
		}

	}

	// wdev-14420
	protected void onCmbModeOfArrivalValueChanged() throws PresentationLogicException
	{
		if (!ModeOfArrival.AMBULANCE.equals(form.cmbModeOfArrival().getValue()))
		{
			form.txtAmbulanceJobNo().setValue(null);
		}
		updateControlState();
	}
	
	// wdev-14420
	public Integer calculateAge()
	{
		if (form.getGlobalContext().Core.getPatientShort() != null)
		{
			PartialDate dob = form.getGlobalContext().Core.getPatientShort().getDob();
			Date dod = form.getGlobalContext().Core.getPatientShort().getDod();
			Date arrival = form.dtimArrival().getValue() != null ? form.dtimArrival().getValue().getDate() : null;
			int patAge = 0;
			if (dob != null)
			{

				if (dod != null)
				{
					patAge = dod.yearDiff(dob);
				}
				else
				{
					patAge = new ims.framework.utils.Age(dob, arrival).getYears();
				}

			}
			return new Integer(patAge);
		}
		return null;
	}

	protected void onDtimArrivalValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	// wdev-14420
	protected void onBtnTIIGClick() throws PresentationLogicException
	{
		emergencyepisodeliteVo tempVo = new emergencyepisodeliteVo();
		if (form.getLocalContext().getSelectedEmergencyEpisode() != null) // form.grdPreviousHistory().getSelectedRow() != null
		{
			EpisodeDetailsVo epdetVo = form.getLocalContext().getSelectedEmergencyEpisode();// (EpisodeDetailsVo) form.grdPreviousHistory().getSelectedRow().getParentRow().getValue();
			if (epdetVo != null)
			{
				tempVo.setIncidentLocation(form.cmbIncidentLocation().getValue());// WDEV-15122
				tempVo.setInjuryDateTime(form.dtimInjury().getValue());
				tempVo.setTiig(epdetVo.getTiig());
				// form.getLocalContext().setTIIG(epdetVo.getTiig());

			}

		}
		else
		{
			tempVo.setIncidentLocation(form.cmbIncidentLocation().getValue()); // wdev-14582
			tempVo.setInjuryDateTime(form.dtimInjury().getValue());
		}

		if (form.getLocalContext().getTIIGIsNotNull())
			tempVo.setTiig(form.getLocalContext().getTIIG());

		form.getGlobalContext().Emergency.setTIIG(tempVo);
		engine.open(form.getForms().Emergency.TIIGDialog,new Object[] { form.getMode() }); // wdev-14420
	}

	protected void onCmbPatientCategoryValueChanged() throws PresentationLogicException
	{
		//WDEV-17268
		bindcmbPresComplaintLookup();
		if (PatientCategory.RTA.equals(form.cmbPatientCategory().getValue()))
		{
			form.cmbPresComplaint().removeRow(PresentingComplaint.ASSAULT);
		}
		updateControlState();
	}

	protected void onCmbSourceOfReferralValueChanged() throws PresentationLogicException
	{
		form.txtReferralGP().setValue(null);
		form.txtOther().setValue(null);
		
		if (!ReferredBy.GP.equals(form.cmbSourceOfReferral().getValue()))
		{
			form.txtReferralGP().setValue(null);
			form.imbReferralGP().setTooltip("Find and Select GP");//WDEV-17297
		}
		
		if (!ReferredBy.OTHER.equals(form.cmbSourceOfReferral().getValue()))
		{
			form.txtOther().setValue(null);
			form.imbReferralGP().setTooltip("Find and Select GP");//WDEV-17297
		}

		if (ReferredBy.GP.equals(form.cmbSourceOfReferral().getValue()) && form.txtReferralGP().getValue() == null)
		{
			GpShortVo gpShortVo = domain.getGpPatient(form.getGlobalContext().Core.getPatientShort());
			form.getLocalContext().setSelectedGp(gpShortVo);
			if (gpShortVo != null)
			{
				form.txtReferralGP().setValue(gpShortVo.getNameIsNotNull() ? gpShortVo.getName().toString() : "");
				form.imbReferralGP().setTooltip(getReferalGpTooltip(gpShortVo));
			}
		}
		
		updateControlState();
	}

	protected void onCmbPresComplaintValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	// wdev-14615
	protected void onBtnRTAClick() throws PresentationLogicException
	{
		EpisodeDetailsVo tempVo = form.getLocalContext().getSelectedEmergencyEpisode();
		if (tempVo != null)
		{
			if (form.getLocalContext().getRTAIsNotNull())
				form.getGlobalContext().Emergency.setRTA(form.getLocalContext().getRTA());
			else
				form.getGlobalContext().Emergency.setRTA(tempVo.getRTADetails());
		}
		else
		{
			if (form.getLocalContext().getRTAIsNotNull())
				form.getGlobalContext().Emergency.setRTA(form.getLocalContext().getRTA());
			else
				form.getGlobalContext().Emergency.setRTA(null);
		}

		engine.open(form.getForms().Emergency.RTADialog, new Object[] { form.getMode() });
	}

	// wdev-14615
	protected void onBtnRTA1Click() throws PresentationLogicException
	{
		EpisodeDetailsVo tempVo = form.getLocalContext().getSelectedEmergencyEpisode();
		if (tempVo != null)
		{
			if (form.getLocalContext().getRTAIsNotNull())
				form.getGlobalContext().Emergency.setRTA(form.getLocalContext().getRTA());
			else
				form.getGlobalContext().Emergency.setRTA(tempVo.getRTADetails());
		}
		else
		{
			if (form.getLocalContext().getRTAIsNotNull())
				form.getGlobalContext().Emergency.setRTA(form.getLocalContext().getRTA());
			else
				form.getGlobalContext().Emergency.setRTA(null);
		}

		engine.open(form.getForms().Emergency.RTADialog, new Object[] { form.getMode() });

	}

	// wdev-14420
	private RTAVo copyRTAVo(RTAVo record)
	{
		if (record == null)
			return null;

		RTAVo temp = new RTAVo();
		temp.setDriverAddress(record.getDriverAddress());
		temp.setDriverName(record.getDriverName());
		temp.setIsDriverOwner(record.getIsDriverOwner());
		temp.setNotes(record.getNotes());
		temp.setPoliceID(record.getPoliceID());
		temp.setPoliceInvolved(record.getPoliceInvolved());
		temp.setPoliceStation(record.getPoliceStation());
		temp.setProtectionDevice(record.getProtectionDevice());
		temp.setRTAType(record.getRTAType());

		return temp;
	}

	private TIIGVo copyTIIGVO(TIIGVo record)
	{
		if (record == null)
			return null;

		TIIGVo tiigVo = new TIIGVo();

		tiigVo.setHadPatientConsumedAlcohol(record.getHadPatientConsumedAlcohol());
		tiigVo.setAssaultWeapon(record.getAssaultWeapon());
		tiigVo.setAssaultWeaponDetails(record.getAssaultWeaponDetails());
		tiigVo.setAssaultLocation(record.getAssaultLocation());
		tiigVo.setAssaultLocationDetails(record.getAssaultLocationDetails());
		tiigVo.setAttackerHadConsumedAlcohol(record.getAttackerHadConsumedAlcohol());
		tiigVo.setConsumedOrPurchasedAlcoholFrom(record.getConsumedOrPurchasedAlcoholFrom());
		tiigVo.setGenderofAttacker(record.getGenderofAttacker());
		tiigVo.setIntendToInformPolice(record.getIntendToInformPolice());
		tiigVo.setNumberOfAttackers(record.getNumberOfAttackers());
		tiigVo.setPreviouslyAssulatedByAttacker(record.getPreviouslyAssulatedByAttacker());
		tiigVo.setRelationshipToAttacker(record.getRelationshipToAttacker());
		tiigVo.setLastDrinkLocationDetails(record.getLastDrinkLocationDetails());

		return tiigVo;
	}

	private LocationLiteVo getLoc()
	{
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;
		if (domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) domain.getCurrentLocation();

		}
		else if (domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) domain.getCurrentLocation();
			if (locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(), locsite.getVersion_Location());
				LocSiteShortVo locShortVo = domain.getTypeOfLocSite(loc);
				loc.setType(locShortVo.getType());

			}

		}
		if (loc != null && loc.getTypeIsNotNull() && loc.getType().equals(LocationType.ANE))
			return loc;
		else
			return null;

	}

	public void clearAttendanceDetails()
	{
		clearInstanceControls();
		clearEpisodeControls();
		clearEmergencyAttendanceDischargeDetails();
		clearSpecialInterest();
	}

	private void clearSpecialInterest()
	{
		form.btnSpecialInterest().setTooltip(null);
	}

	public void initialize()
	{
		form.getLocalContext().setTIIG(null);
		form.getLocalContext().setRTA(null);

		UrgencyLevelCollection collLookup = LookupHelper.getUrgencyLevel(domain.getLookupService());
		if (collLookup != null)
		{
			for (int i = 0; i < collLookup.size(); i++)
			{
				form.cmbUrgencyLevel().newRow(collLookup.get(i), collLookup.get(i).getIItemText());
			}
		}
		
	}

	public void setValue(ValueObject rowValue)
	{

		form.getLocalContext().setSelectedRow(rowValue);

		if (rowValue instanceof AttendanceDetailsVo)
		{
			getAndDisplayRecord(rowValue);

			form.getLocalContext().setSelectedRecord((AttendanceDetailsVo) rowValue);
			form.getLocalContext().setSelectedEmergencyEpisode(domain.getEmergencyEpisode(form.getLocalContext().getSelectedRecord().getEmergencyEpisode()));

			// form.getLocalContext().setSelectedEmergencyEpisode((EpisodeDetailsVo) selectedRow.getParentRow().getValue());
			// form.getLocalContext().setSelectedRecord((AttendanceDetailsVo) selectedRow.getValue());

			form.getGlobalContext().Core.setCurrentCareContext(form.getLocalContext().getSelectedRecord().getCareContext());
			form.getGlobalContext().Emergency.setCurrentEmergencyAttendance((AttendanceDetailsVo) rowValue);

			if (form.getLocalContext().getSelectedEmergencyEpisodeIsNotNull() && form.getLocalContext().getSelectedEmergencyEpisode().getReferringGPIsNotNull())
			{
				GpShortVo gp = new GpShortVo();
				gp.setID_Gp(form.getLocalContext().getSelectedEmergencyEpisode().getReferringGP().getID_Gp());
				// form.getGlobalContext().Core.setGPDetails(gp);
				form.getLocalContext().setSelectedGp(gp); // wdev-14420
			}
		}
		else if (rowValue instanceof EpisodeDetailsVo)
		{
			getAndDisplayRecord(rowValue);
			form.getLocalContext().setSelectedEmergencyEpisode((EpisodeDetailsVo) rowValue);
		}

		updateControlState();
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	public void newInstance()
	{
		clearAttendanceDetails();

		newEpisode();
		form.getLocalContext().setSelectedEmergencyEpisode(null);
		form.getLocalContext().setSelectedAttendanceDetails(null);
		form.getLocalContext().setLocationDetails(null);
		form.getGlobalContext().Emergency.setLocationDetails(null);
		// form.imbLocDetails().setTooltip(null);
		form.imbLocDetails().setTooltip("Location Details");// WDEV-14420

		if (form.getLocalContext().getSelectedRowIsNotNull())
		{
			form.getLocalContext().setSelectedRecord(null);
		}

		// wdev-14420
		form.GroupCategory().setValue(GroupCategoryEnumeration.rdoFirstVisit);
		form.cmbAttendanceType().setValue(EDVisitType.NEW_ATTENDENCE); // wdev-16070
		enableDisableScheduledUnscheduled();

		DateTime dt = new DateTime();
		form.dtimArrival().setValue(dt);
		form.dtimRegistration().setValue(dt);

		hideOrDisableDischargeDetails(false);

		// wdev-16070
		if (domain.getMosUser() instanceof MemberOfStaffLiteVo)
		{
			MemberOfStaffLiteVo tempVo = (MemberOfStaffLiteVo) domain.getMosUser();
			if (tempVo != null)
				form.lblRegisteredBy1().setValue(tempVo.getNameIsNotNull() ? tempVo.getName().toString() : "");
		}
		
		//wdev-17488
		LocationLiteVo loc = null;
		LocSiteLiteVo locsite = null;
		if (domain.getCurrentLocation() instanceof LocationLiteVo)
		{
			loc = (LocationLiteVo) domain.getCurrentLocation();

		}
		else if (domain.getCurrentLocation() instanceof LocSiteLiteVo)
		{
			locsite = (LocSiteLiteVo) domain.getCurrentLocation();
			if (locsite != null)
			{
				loc = new LocationLiteVo(locsite.getID_Location(), locsite.getVersion_Location());

			}
		}
		
		form.cmbDepartmentType().setValue(domain.getEDDeptType(loc)); //WDEV-17008,wdev-17488
		
		//-----------
		form.getLocalContext().setSelectedRow(null);
		form.setMode(FormMode.EDIT);
		
		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.NEW);
		form.fireCustomControlValueChanged();
	}

	// wdev-14420
	private void enableDisableScheduledUnscheduled()
	{
		AttendanceDetailsVo attendVo = null;

		if (form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			attendVo = domain.getLastAttendance(form.getGlobalContext().Core.getPatientShort());
		}
		if (attendVo != null)
		{
			if (attendVo.getArrivalDateTimeIsNotNull())
			{
				int numberOfDaysScheduled = DateTime.daysDiff(new DateTime(), attendVo.getArrivalDateTime());

				if (numberOfDaysScheduled < ConfigFlag.GEN.EMERGENCY_ATTENDANCE_SCHEDULED_RETURN_RULE_DAYS.getValue())		//wdev-17577
				{
					form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoScheduledReturn, true);
					// form.cmbAttendanceType().setValue(EDVisitType.SCHEDULED_ATTENDENCE); //wdev-16070
				}
				else
				{
					form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoScheduledReturn, false);
				}

				if (numberOfDaysScheduled < ConfigFlag.GEN.EMERGENCY_ATTENDANCE_UNSCHEDULED_RETURN_RULE_DAYS.getValue())	//wdev-17577
				{
					form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoUnscheduledReturn, true);
					// form.cmbAttendanceType().setValue(null); //wdev-16070
				}
				else
				{
					form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoUnscheduledReturn, false);
				}
			}
			else
			{
				form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoScheduledReturn, false);
				form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoUnscheduledReturn, false);
			}
		}
		else
		{
			form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoScheduledReturn, false);
			form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoUnscheduledReturn, false);
		}
	}
	
	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		editInstance();
	}

	public void editInstance()
	{
		ValueObject rowValue = form.getLocalContext().getSelectedRow();

		if (rowValue != null)
		{
			if (rowValue instanceof AttendanceDetailsVo)
			{
				editAttendance(rowValue);
			}
		}

		// wdev-14420
		if (form.getLocalContext().getSelectedEmergencyEpisodeIsNotNull())
		{
			form.getLocalContext().setTIIG(form.getLocalContext().getSelectedEmergencyEpisode().getTiig());
			form.getLocalContext().setRTA(form.getLocalContext().getSelectedEmergencyEpisode().getRTADetails());

		}

		form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoFirstVisit, false);
		form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoScheduledReturn, false);
		form.GroupCategory().setEnabled(GroupCategoryEnumeration.rdoUnscheduledReturn, false);

		// wdev-16070
		if (domain.getMosUser() instanceof MemberOfStaffLiteVo)
		{
			MemberOfStaffLiteVo tempVo = (MemberOfStaffLiteVo) domain.getMosUser();
			if (tempVo != null)
			{
				form.lblLastUpdatedBy1().setValue(tempVo.getNameIsNotNull() ? tempVo.getName().toString() : "");
			}
		}

		form.setMode(FormMode.EDIT);
		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.EDIT);
		form.fireCustomControlValueChanged();
	}

	private void editAttendance(ValueObject rowValue)
	{
		form.getLocalContext().setSelectedRecord((AttendanceDetailsVo) rowValue);
		form.getLocalContext().setSelectedEmergencyEpisode(domain.getEmergencyEpisode(form.getLocalContext().getSelectedRecord().getEmergencyEpisode()));
	}

	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		form.getLocalContext().setIsSkippedTriage(null);//WDEV-17248
		String[] uiErrors = getUiErrors();
		if (uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return;
		}

		if (form.getLocalContext().getSelectedEmergencyEpisodeIsNotNull() && form.getLocalContext().getSelectedRecordIsNotNull()) // wdev-14420
		{
			if (save())
			{
				form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.SAVE);
				form.fireCustomControlValueChanged();
			}
		}
		else
			engine.open(form.getForms().Emergency.SendToAreaDialog, new Object[] {Boolean.FALSE});
	}

	private String[] getUiErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		// WDEV-14420
		if (form.GroupCategory().getValue() == null)
		{
			errors.add("Attendance Type is mandatory!");
		}
		
		if (form.cmbAttendanceType().isRequired() && form.cmbAttendanceType().isEnabled() && form.cmbAttendanceType().getVisible() && form.cmbAttendanceType().getValue()==null)
		{
			errors.add("Attendance Type is mandatory!");
		}
		
		if (form.cmbPatientCategory().isRequired() && form.cmbPatientCategory().isEnabled() && form.cmbPatientCategory().getVisible() && form.cmbPatientCategory().getValue()==null)
		{
			errors.add("Patient Category is mandatory!");
		}
		
		if (form.cmbPresComplaint().isRequired() && form.cmbPresComplaint().isEnabled() && form.cmbPresComplaint().getVisible() && form.cmbPresComplaint().getValue()==null)
		{
			errors.add("Presenting Complaint is mandatory!");
		}
		
		if (form.cmbTriageCategory().isRequired() && form.cmbTriageCategory().isEnabled() && form.cmbTriageCategory().getVisible() && form.cmbTriageCategory().getValue()==null)
		{
			errors.add("Triage category is mandatory!");
		}
		
		if (form.cmbSourceOfReferral().isRequired() && form.cmbSourceOfReferral().isEnabled() && form.cmbSourceOfReferral().getVisible() && form.cmbSourceOfReferral().getValue()==null)
		{
			errors.add("Source of Referral is mandatory!");
		}

		if (form.txtOther().isRequired() && form.txtOther().isEnabled() && form.txtOther().isVisible() && form.txtOther().getValue()==null)
		{
			errors.add("Other is mandatory!");
		}
		
		if (form.cmbIncidentLocation().isRequired() && form.cmbIncidentLocation().isEnabled() && form.cmbIncidentLocation().getVisible() && form.cmbIncidentLocation().getValue()==null)
		{
			errors.add("Incident Location is mandatory!");
		}
		
		if (form.cmbSourceOfReferral().getValue() != null && form.cmbSourceOfReferral().getValue().equals(ReferredBy.GP))
		{
			if (form.txtReferralGP().getValue() == null || form.cmbSourceOfReferral().getValue().toString().trim().equals(""))
			{
				errors.add("A referral GP must be selected if the source of referral is GP");
			}
		}
		
		if (form.cmbModeOfArrival().isRequired() && form.cmbModeOfArrival().isEnabled() && form.cmbModeOfArrival().getVisible() && form.cmbModeOfArrival().getValue()==null)
		{
			errors.add("Mode of Arrival is mandatory!");
		}
		
		if (form.txtAmbulanceJobNo().isRequired() && form.txtAmbulanceJobNo().isEnabled() && form.txtAmbulanceJobNo().isVisible() && form.txtAmbulanceJobNo().getValue()==null)
		{
			errors.add("Ambulance Job No. is mandatory!");
		}
		
		if (form.cmbAccompaniedBy().isRequired() && form.cmbAccompaniedBy().isEnabled() && form.cmbAccompaniedBy().getVisible() && form.cmbAccompaniedBy().getValue()==null)
		{
			errors.add("Accompanied by is mandatory!");
		}
		
		if (form.cmbSchool().isRequired() && form.cmbSchool().isEnabled() && form.cmbSchool().getVisible() && form.cmbSchool().getValue()==null)
		{
			errors.add("School is mandatory!");
		}
		
		if (form.cmbOcupation().isRequired() && form.cmbOcupation().isEnabled() && form.cmbOcupation().getVisible() && form.cmbOcupation().getValue()==null)
		{
			errors.add("Occupation is mandatory!");
		}
		
		if (form.cmbOccupationStatus().isRequired() && form.cmbOccupationStatus().isEnabled() && form.cmbOccupationStatus().getVisible() && form.cmbOccupationStatus().getValue()==null)
		{
			errors.add("Occupation Status is mandatory!");
		}
		
		if (form.txtPlaceOfEmployment().isRequired() && form.txtPlaceOfEmployment().isEnabled() && form.txtPlaceOfEmployment().isVisible() && form.txtPlaceOfEmployment().getValue()==null)
		{
			errors.add("Place of Employment is mandatory!");
		}
		
		if (form.cmbUrgencyLevel().isRequired() && form.cmbUrgencyLevel().isEnabled() && form.cmbUrgencyLevel().getVisible()&& form.cmbUrgencyLevel().getValue()==null)
		{
			errors.add("Urgency Level is mandatory!");
		}
		
		if (form.cmbEDConsultant().isRequired() && form.cmbEDConsultant().isEnabled() && form.cmbEDConsultant().getVisible()&& form.cmbEDConsultant().getValue()==null)
		{
			errors.add("ED Consultant is mandatory!");
		}
		
		//WDEV-17008
		if (form.cmbDepartmentType().isRequired() && form.cmbDepartmentType().isEnabled() && form.cmbDepartmentType().getVisible()&& form.cmbDepartmentType().getValue()==null)
		{
			errors.add("Department Type is mandatory!");
		}
		
		if (form.dtimInjury().isRequired() && form.dtimInjury().isEnabled() && form.dtimInjury().isVisible()&& form.dtimInjury().getValue()==null)
		{
			errors.add("Incident Time is mandatory!");			//wdev-17391
		}
		
		if (form.dtimAmbulanceArrivalTime().isRequired() && form.dtimAmbulanceArrivalTime().isEnabled() && form.dtimAmbulanceArrivalTime().isVisible()&& form.dtimAmbulanceArrivalTime().getValue()==null)
		{
			errors.add("Ambulance Arrival Time is mandatory!");
		}
		
		EDAttendanceControlsConfigVoCollection attendanceControlsConfig = domain.getEDAttendanceControlsConfig(EDAttendenceControlType.ATTEND_CONTROLS);
		for (int i=0;attendanceControlsConfig!=null && i<attendanceControlsConfig.size();i++)
		{
			EDAttendanceControlsConfigVo controlConfig = attendanceControlsConfig.get(i);
			
			if (controlConfig!=null && SPECIAL_INTEREST.equals(controlConfig.getControlIMSID()) && controlConfig.getIsVisibleIsNotNull() && controlConfig.getIsRequired() && (form.getGlobalContext().Emergency.getCollSpecialInterestDetails()==null || (form.getGlobalContext().Emergency.getCollSpecialInterestDetails()!=null && form.getGlobalContext().Emergency.getCollSpecialInterestDetails().size()==0)))
			{
				errors.add("Special Interest is mandatory!");	
			}
		}
		
		if (form.cmbPatPrefLanguage().isRequired() && form.cmbPatPrefLanguage().isEnabled() && form.cmbPatPrefLanguage().getVisible()&& form.cmbPatPrefLanguage().getValue()==null)
		{
			errors.add("Patient Preferred Language is mandatory!");
		}
		
		if (form.cmbInterpreterRequired().isRequired()  && form.cmbInterpreterRequired().isEnabled() && form.cmbInterpreterRequired().getVisible()&& form.cmbInterpreterRequired().getValue()==null)
		{
			errors.add("Interpreter Required is mandatory!");
		}
		
		if (form.txtComments().isRequired() && form.txtComments().isEnabled() && form.txtComments().isVisible()&& form.txtComments().getValue()==null)
		{
			errors.add("Comments is mandatory!");
		}
		
		
		if (form.dtimInjury().getValue() != null && form.dtimInjury().getValue().isGreaterThan(new DateTime())) // wdev-16070
		{
			errors.add("Incident Time is in the future!");    //wdev-17391
		}
		
		if (form.dtimAmbulanceArrivalTime().getValue() != null)
		{
			if (form.dtimInjury().getValue() != null)
			{
				if (form.dtimInjury().getValue().isGreaterThan(form.dtimAmbulanceArrivalTime().getValue()))
				{
					errors.add("Ambulance Arrival Time cannot be less than Incident Time");		//wdev-17391
				}

			}
			if (form.dtimArrival().getValue() != null)
			{
				if (form.dtimAmbulanceArrivalTime().getValue().isGreaterThan(form.dtimArrival().getValue()))
				{
					errors.add("Arrival Time cannot be less than Ambulance Arrival Time");
				}
			}
			if (form.dtimRegistration().getValue() != null)
			{
				if (form.dtimAmbulanceArrivalTime().getValue().isGreaterThan(form.dtimRegistration().getValue()))
				{
					errors.add("Registration Time cannot be less than Ambulance Arrival Time");
				}
			}
		}
		
		if (form.dtimArrival().getValue()==null)
		{
			errors.add("Arrival Time is mandatory!");
		}
		else if (form.dtimArrival().getValue().isGreaterThan(new DateTime()))
		{
			errors.add("Arrival Time is in the future!");
		}
		else if (form.dtimInjury().getValue() != null && form.dtimArrival().getValue() != null && form.dtimArrival().getValue().isLessThan(form.dtimInjury().getValue()))
		{
			errors.add("Arrival Time cannot be less than Incident Time");		//wdev-17391
		}

		if (form.dtimRegistration().getValue() == null)
		{
			errors.add("Registration Time is mandatory!");
		}
		else if (form.dtimRegistration().getValue().isGreaterThan(new DateTime()))
		{
			errors.add("Registration Time is in the future!");
		}
		else if (form.dtimInjury().getValue() != null && form.dtimRegistration().getValue() != null && form.dtimRegistration().getValue().isLessThan(form.dtimInjury().getValue()))
		{
			errors.add("Registration Time cannot be less than Incident Time");		//wdev-17391
		}

		if (form.dtimArrival().getValue() != null && form.dtimRegistration().getValue() != null && form.dtimRegistration().getValue().isLessThan(form.dtimArrival().getValue()))
		{
			errors.add("Registration Time cannot be less than Arrival Time");
		}
		
		// WDEV-14420
		if (form.pnlDischargeOutcome().isVisible() && form.cmbOutcome().isEnabled() && form.dtimDischarge().isEnabled())
		{
			if (form.cmbOutcome().isRequired() && form.cmbOutcome().getValue()==null)
			{
				errors.add("Outcome is mandatory!");
			}
			
			if (form.dtimDischarge().isRequired() && form.dtimDischarge().getValue()==null)
			{
				errors.add("Departure Time is mandatory!");//WDEV-17920
			}

			if (form.dtimDischarge().getValue() != null)
			{
				if (form.dtimDischarge().getValue().isGreaterThan(new DateTime()))
				{
					errors.add("Departure Time is in the future!");//WDEV-17920
				}

				if (form.dtimArrival().getValue() != null && form.dtimDischarge().getValue().isLessThan(form.dtimArrival().getValue()))
				{
					errors.add("Departure Time cannot be less than Arrival Time!");//WDEV-17920
				}
			}

		}

		if (errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Attendance Record", searchErrors);

			return searchErrors;
		}
		return null;
	}

	
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		form.getLocalContext().setTIIG(null);
		form.getLocalContext().setRTA(null);

		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
		form.fireCustomControlValueChanged();
	}

	public EmergencyAttendanceEvent getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	@Override
	protected void onBtnSpecialInterestClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.SpecialInterest, new Object[] { form.getMode() });
	}

	//WDEV-17140
	@Override
	protected void onBtnSkippedTriageClick() throws PresentationLogicException
	{
		String[] uiErrors = getUiErrors();
		if (uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return;
		}
		
		form.getLocalContext().setIsSkippedTriage(true);
		engine.open(form.getForms().Emergency.SendToAreaDialog, new Object[] {Boolean.FALSE});
	}

}
